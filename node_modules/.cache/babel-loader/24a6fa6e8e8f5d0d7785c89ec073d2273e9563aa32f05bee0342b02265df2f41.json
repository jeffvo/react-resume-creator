{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { filterAsync, firstValueFrom, from, merge, raceWith } from '../../third_party/rxjs/rxjs.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { debugError, fromEmitterEvent, timeout } from '../common/util.js';\nimport { asyncDisposeSymbol, disposeSymbol } from '../util/disposable.js';\n/**\n * {@link BrowserContext} represents individual user contexts within a\n * {@link Browser | browser}.\n *\n * When a {@link Browser | browser} is launched, it has a single\n * {@link BrowserContext | browser context} by default. Others can be created\n * using {@link Browser.createBrowserContext}. Each context has isolated storage\n * (cookies/localStorage/etc.)\n *\n * {@link BrowserContext} {@link EventEmitter | emits} various events which are\n * documented in the {@link BrowserContextEvent} enum.\n *\n * If a {@link Page | page} opens another {@link Page | page}, e.g. using\n * `window.open`, the popup will belong to the parent {@link Page.browserContext\n * | page's browser context}.\n *\n * @example Creating a new {@link BrowserContext | browser context}:\n *\n * ```ts\n * // Create a new browser context\n * const context = await browser.createBrowserContext();\n * // Create a new page inside context.\n * const page = await context.newPage();\n * // ... do stuff with page ...\n * await page.goto('https://example.com');\n * // Dispose context once it's no longer needed.\n * await context.close();\n * ```\n *\n * @public\n */\nexport class BrowserContext extends EventEmitter {\n  /**\n   * @internal\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Waits until a {@link Target | target} matching the given `predicate`\n   * appears and returns it.\n   *\n   * This will look all open {@link BrowserContext | browser contexts}.\n   *\n   * @example Finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browserContext.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   */\n  async waitForTarget(predicate, options = {}) {\n    const {\n      timeout: ms = 30000\n    } = options;\n    return await firstValueFrom(merge(fromEmitterEvent(this, \"targetcreated\" /* BrowserContextEvent.TargetCreated */), fromEmitterEvent(this, \"targetchanged\" /* BrowserContextEvent.TargetChanged */), from(this.targets())).pipe(filterAsync(predicate), raceWith(timeout(ms))));\n  }\n  /**\n   * Whether this {@link BrowserContext | browser context} is closed.\n   */\n  get closed() {\n    return !this.browser().browserContexts().includes(this);\n  }\n  /**\n   * Identifier for this {@link BrowserContext | browser context}.\n   */\n  get id() {\n    return undefined;\n  }\n  /** @internal */\n  [disposeSymbol]() {\n    return void this.close().catch(debugError);\n  }\n  /** @internal */\n  [asyncDisposeSymbol]() {\n    return this.close();\n  }\n}","map":{"version":3,"names":["filterAsync","firstValueFrom","from","merge","raceWith","EventEmitter","debugError","fromEmitterEvent","timeout","asyncDisposeSymbol","disposeSymbol","BrowserContext","constructor","waitForTarget","predicate","options","ms","targets","pipe","closed","browser","browserContexts","includes","id","undefined","close","catch"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/puppeteer-core/src/api/BrowserContext.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  filterAsync,\n  firstValueFrom,\n  from,\n  merge,\n  raceWith,\n} from '../../third_party/rxjs/rxjs.js';\nimport {EventEmitter, type EventType} from '../common/EventEmitter.js';\nimport {debugError, fromEmitterEvent, timeout} from '../common/util.js';\nimport {asyncDisposeSymbol, disposeSymbol} from '../util/disposable.js';\n\nimport type {Browser, Permission, WaitForTargetOptions} from './Browser.js';\nimport type {Page} from './Page.js';\nimport type {Target} from './Target.js';\n\n/**\n * @public\n */\nexport const enum BrowserContextEvent {\n  /**\n   * Emitted when the url of a target inside the browser context changes.\n   * Contains a {@link Target} instance.\n   */\n  TargetChanged = 'targetchanged',\n\n  /**\n   * Emitted when a target is created within the browser context, for example\n   * when a new page is opened by\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open | window.open}\n   * or by {@link BrowserContext.newPage | browserContext.newPage}\n   *\n   * Contains a {@link Target} instance.\n   */\n  TargetCreated = 'targetcreated',\n  /**\n   * Emitted when a target is destroyed within the browser context, for example\n   * when a page is closed. Contains a {@link Target} instance.\n   */\n  TargetDestroyed = 'targetdestroyed',\n}\n\n/**\n * @public\n */\nexport interface BrowserContextEvents extends Record<EventType, unknown> {\n  [BrowserContextEvent.TargetChanged]: Target;\n  [BrowserContextEvent.TargetCreated]: Target;\n  [BrowserContextEvent.TargetDestroyed]: Target;\n}\n\n/**\n * {@link BrowserContext} represents individual user contexts within a\n * {@link Browser | browser}.\n *\n * When a {@link Browser | browser} is launched, it has a single\n * {@link BrowserContext | browser context} by default. Others can be created\n * using {@link Browser.createBrowserContext}. Each context has isolated storage\n * (cookies/localStorage/etc.)\n *\n * {@link BrowserContext} {@link EventEmitter | emits} various events which are\n * documented in the {@link BrowserContextEvent} enum.\n *\n * If a {@link Page | page} opens another {@link Page | page}, e.g. using\n * `window.open`, the popup will belong to the parent {@link Page.browserContext\n * | page's browser context}.\n *\n * @example Creating a new {@link BrowserContext | browser context}:\n *\n * ```ts\n * // Create a new browser context\n * const context = await browser.createBrowserContext();\n * // Create a new page inside context.\n * const page = await context.newPage();\n * // ... do stuff with page ...\n * await page.goto('https://example.com');\n * // Dispose context once it's no longer needed.\n * await context.close();\n * ```\n *\n * @public\n */\n\nexport abstract class BrowserContext extends EventEmitter<BrowserContextEvents> {\n  /**\n   * @internal\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Gets all active {@link Target | targets} inside this\n   * {@link BrowserContext | browser context}.\n   */\n  abstract targets(): Target[];\n\n  /**\n   * Waits until a {@link Target | target} matching the given `predicate`\n   * appears and returns it.\n   *\n   * This will look all open {@link BrowserContext | browser contexts}.\n   *\n   * @example Finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browserContext.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   */\n  async waitForTarget(\n    predicate: (x: Target) => boolean | Promise<boolean>,\n    options: WaitForTargetOptions = {}\n  ): Promise<Target> {\n    const {timeout: ms = 30000} = options;\n    return await firstValueFrom(\n      merge(\n        fromEmitterEvent(this, BrowserContextEvent.TargetCreated),\n        fromEmitterEvent(this, BrowserContextEvent.TargetChanged),\n        from(this.targets())\n      ).pipe(filterAsync(predicate), raceWith(timeout(ms)))\n    );\n  }\n\n  /**\n   * Gets a list of all open {@link Page | pages} inside this\n   * {@link BrowserContext | browser context}.\n   *\n   * @remarks Non-visible {@link Page | pages}, such as `\"background_page\"`,\n   * will not be listed here. You can find them using {@link Target.page}.\n   */\n  abstract pages(): Promise<Page[]>;\n\n  /**\n   * Whether this {@link BrowserContext | browser context} is incognito.\n   *\n   * In Chrome, the\n   * {@link Browser.defaultBrowserContext | default browser context} is the only\n   * non-incognito browser context.\n   */\n  abstract isIncognito(): boolean;\n\n  /**\n   * Grants this {@link BrowserContext | browser context} the given\n   * `permissions` within the given `origin`.\n   *\n   * @example Overriding permissions in the\n   * {@link Browser.defaultBrowserContext | default browser context}:\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * await context.overridePermissions('https://html5demos.com', [\n   *   'geolocation',\n   * ]);\n   * ```\n   *\n   * @param origin - The origin to grant permissions to, e.g.\n   * \"https://example.com\".\n   * @param permissions - An array of permissions to grant. All permissions that\n   * are not listed here will be automatically denied.\n   */\n  abstract overridePermissions(\n    origin: string,\n    permissions: Permission[]\n  ): Promise<void>;\n\n  /**\n   * Clears all permission overrides for this\n   * {@link BrowserContext | browser context}.\n   *\n   * @example Clearing overridden permissions in the\n   * {@link Browser.defaultBrowserContext | default browser context}:\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * context.overridePermissions('https://example.com', ['clipboard-read']);\n   * // do stuff ..\n   * context.clearPermissionOverrides();\n   * ```\n   */\n  abstract clearPermissionOverrides(): Promise<void>;\n\n  /**\n   * Creates a new {@link Page | page} in this\n   * {@link BrowserContext | browser context}.\n   */\n  abstract newPage(): Promise<Page>;\n\n  /**\n   * Gets the {@link Browser | browser} associated with this\n   * {@link BrowserContext | browser context}.\n   */\n  abstract browser(): Browser;\n\n  /**\n   * Closes this {@link BrowserContext | browser context} and all associated\n   * {@link Page | pages}.\n   *\n   * @remarks The\n   * {@link Browser.defaultBrowserContext | default browser context} cannot be\n   * closed.\n   */\n  abstract close(): Promise<void>;\n\n  /**\n   * Whether this {@link BrowserContext | browser context} is closed.\n   */\n  get closed(): boolean {\n    return !this.browser().browserContexts().includes(this);\n  }\n\n  /**\n   * Identifier for this {@link BrowserContext | browser context}.\n   */\n  get id(): string | undefined {\n    return undefined;\n  }\n\n  /** @internal */\n  [disposeSymbol](): void {\n    return void this.close().catch(debugError);\n  }\n\n  /** @internal */\n  [asyncDisposeSymbol](): Promise<void> {\n    return this.close();\n  }\n}\n"],"mappings":"AAAA;;;;;AAMA,SACEA,WAAW,EACXC,cAAc,EACdC,IAAI,EACJC,KAAK,EACLC,QAAQ,QACH,gCAAgC;AACvC,SAAQC,YAAY,QAAuB,2BAA2B;AACtE,SAAQC,UAAU,EAAEC,gBAAgB,EAAEC,OAAO,QAAO,mBAAmB;AACvE,SAAQC,kBAAkB,EAAEC,aAAa,QAAO,uBAAuB;AAyCvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAM,MAAgBC,cAAe,SAAQN,YAAkC;EAC7E;;;EAGAO,YAAA;IACE,KAAK,EAAE;EACT;EAQA;;;;;;;;;;;;;;;EAeA,MAAMC,aAAaA,CACjBC,SAAoD,EACpDC,OAAA,GAAgC,EAAE;IAElC,MAAM;MAACP,OAAO,EAAEQ,EAAE,GAAG;IAAK,CAAC,GAAGD,OAAO;IACrC,OAAO,MAAMd,cAAc,CACzBE,KAAK,CACHI,gBAAgB,CAAC,IAAI,0DAAoC,EACzDA,gBAAgB,CAAC,IAAI,0DAAoC,EACzDL,IAAI,CAAC,IAAI,CAACe,OAAO,EAAE,CAAC,CACrB,CAACC,IAAI,CAAClB,WAAW,CAACc,SAAS,CAAC,EAAEV,QAAQ,CAACI,OAAO,CAACQ,EAAE,CAAC,CAAC,CAAC,CACtD;EACH;EAkFA;;;EAGA,IAAIG,MAAMA,CAAA;IACR,OAAO,CAAC,IAAI,CAACC,OAAO,EAAE,CAACC,eAAe,EAAE,CAACC,QAAQ,CAAC,IAAI,CAAC;EACzD;EAEA;;;EAGA,IAAIC,EAAEA,CAAA;IACJ,OAAOC,SAAS;EAClB;EAEA;EACA,CAACd,aAAa,IAAC;IACb,OAAO,KAAK,IAAI,CAACe,KAAK,EAAE,CAACC,KAAK,CAACpB,UAAU,CAAC;EAC5C;EAEA;EACA,CAACG,kBAAkB,IAAC;IAClB,OAAO,IAAI,CAACgB,KAAK,EAAE;EACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}