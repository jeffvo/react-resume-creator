{"ast":null,"code":"var isDigit = require('../tokenizer').isDigit;\nvar cmpChar = require('../tokenizer').cmpChar;\nvar TYPE = require('../tokenizer').TYPE;\nvar DELIM = TYPE.Delim;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar N = 0x006E; // U+006E LATIN SMALL LETTER N (n)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\nfunction isDelim(token, code) {\n  return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;\n}\nfunction skipSC(token, offset, getNextToken) {\n  while (token !== null && (token.type === WHITESPACE || token.type === COMMENT)) {\n    token = getNextToken(++offset);\n  }\n  return offset;\n}\nfunction checkInteger(token, valueOffset, disallowSign, offset) {\n  if (!token) {\n    return 0;\n  }\n  var code = token.value.charCodeAt(valueOffset);\n  if (code === PLUSSIGN || code === HYPHENMINUS) {\n    if (disallowSign) {\n      // Number sign is not allowed\n      return 0;\n    }\n    valueOffset++;\n  }\n  for (; valueOffset < token.value.length; valueOffset++) {\n    if (!isDigit(token.value.charCodeAt(valueOffset))) {\n      // Integer is expected\n      return 0;\n    }\n  }\n  return offset + 1;\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB(token, offset_, getNextToken) {\n  var sign = false;\n  var offset = skipSC(token, offset_, getNextToken);\n  token = getNextToken(offset);\n  if (token === null) {\n    return offset_;\n  }\n  if (token.type !== NUMBER) {\n    if (isDelim(token, PLUSSIGN) || isDelim(token, HYPHENMINUS)) {\n      sign = true;\n      offset = skipSC(getNextToken(++offset), offset, getNextToken);\n      token = getNextToken(offset);\n      if (token === null && token.type !== NUMBER) {\n        return 0;\n      }\n    } else {\n      return offset_;\n    }\n  }\n  if (!sign) {\n    var code = token.value.charCodeAt(0);\n    if (code !== PLUSSIGN && code !== HYPHENMINUS) {\n      // Number sign is expected\n      return 0;\n    }\n  }\n  return checkInteger(token, sign ? 0 : 1, sign, offset);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = function anPlusB(token, getNextToken) {\n  /* eslint-disable brace-style*/\n  var offset = 0;\n  if (!token) {\n    return 0;\n  }\n\n  // <integer>\n  if (token.type === NUMBER) {\n    return checkInteger(token, 0, ALLOW_SIGN, offset); // b\n  }\n\n  // -n\n  // -n <signed-integer>\n  // -n ['+' | '-'] <signless-integer>\n  // -n- <signless-integer>\n  // <dashndashdigit-ident>\n  else if (token.type === IDENT && token.value.charCodeAt(0) === HYPHENMINUS) {\n    // expect 1st char is N\n    if (!cmpChar(token.value, 1, N)) {\n      return 0;\n    }\n    switch (token.value.length) {\n      // -n\n      // -n <signed-integer>\n      // -n ['+' | '-'] <signless-integer>\n      case 2:\n        return consumeB(getNextToken(++offset), offset, getNextToken);\n\n      // -n- <signless-integer>\n      case 3:\n        if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n          return 0;\n        }\n        offset = skipSC(getNextToken(++offset), offset, getNextToken);\n        token = getNextToken(offset);\n        return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n      // <dashndashdigit-ident>\n      default:\n        if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n          return 0;\n        }\n        return checkInteger(token, 3, DISALLOW_SIGN, offset);\n    }\n  }\n\n  // '+'? n\n  // '+'? n <signed-integer>\n  // '+'? n ['+' | '-'] <signless-integer>\n  // '+'? n- <signless-integer>\n  // '+'? <ndashdigit-ident>\n  else if (token.type === IDENT || isDelim(token, PLUSSIGN) && getNextToken(offset + 1).type === IDENT) {\n    // just ignore a plus\n    if (token.type !== IDENT) {\n      token = getNextToken(++offset);\n    }\n    if (token === null || !cmpChar(token.value, 0, N)) {\n      return 0;\n    }\n    switch (token.value.length) {\n      // '+'? n\n      // '+'? n <signed-integer>\n      // '+'? n ['+' | '-'] <signless-integer>\n      case 1:\n        return consumeB(getNextToken(++offset), offset, getNextToken);\n\n      // '+'? n- <signless-integer>\n      case 2:\n        if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n          return 0;\n        }\n        offset = skipSC(getNextToken(++offset), offset, getNextToken);\n        token = getNextToken(offset);\n        return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n      // '+'? <ndashdigit-ident>\n      default:\n        if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n          return 0;\n        }\n        return checkInteger(token, 2, DISALLOW_SIGN, offset);\n    }\n  }\n\n  // <ndashdigit-dimension>\n  // <ndash-dimension> <signless-integer>\n  // <n-dimension>\n  // <n-dimension> <signed-integer>\n  // <n-dimension> ['+' | '-'] <signless-integer>\n  else if (token.type === DIMENSION) {\n    var code = token.value.charCodeAt(0);\n    var sign = code === PLUSSIGN || code === HYPHENMINUS ? 1 : 0;\n    for (var i = sign; i < token.value.length; i++) {\n      if (!isDigit(token.value.charCodeAt(i))) {\n        break;\n      }\n    }\n    if (i === sign) {\n      // Integer is expected\n      return 0;\n    }\n    if (!cmpChar(token.value, i, N)) {\n      return 0;\n    }\n\n    // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n    if (i + 1 === token.value.length) {\n      return consumeB(getNextToken(++offset), offset, getNextToken);\n    } else {\n      if (token.value.charCodeAt(i + 1) !== HYPHENMINUS) {\n        return 0;\n      }\n\n      // <ndash-dimension> <signless-integer>\n      if (i + 2 === token.value.length) {\n        offset = skipSC(getNextToken(++offset), offset, getNextToken);\n        token = getNextToken(offset);\n        return checkInteger(token, 0, DISALLOW_SIGN, offset);\n      }\n      // <ndashdigit-dimension>\n      else {\n        return checkInteger(token, i + 2, DISALLOW_SIGN, offset);\n      }\n    }\n  }\n  return 0;\n};","map":{"version":3,"names":["isDigit","require","cmpChar","TYPE","DELIM","Delim","WHITESPACE","WhiteSpace","COMMENT","Comment","IDENT","Ident","NUMBER","Number","DIMENSION","Dimension","PLUSSIGN","HYPHENMINUS","N","DISALLOW_SIGN","ALLOW_SIGN","isDelim","token","code","type","value","charCodeAt","skipSC","offset","getNextToken","checkInteger","valueOffset","disallowSign","length","consumeB","offset_","sign","module","exports","anPlusB","i"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/lexer/generic-an-plus-b.js"],"sourcesContent":["var isDigit = require('../tokenizer').isDigit;\nvar cmpChar = require('../tokenizer').cmpChar;\nvar TYPE = require('../tokenizer').TYPE;\n\nvar DELIM = TYPE.Delim;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction isDelim(token, code) {\n    return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;\n}\n\nfunction skipSC(token, offset, getNextToken) {\n    while (token !== null && (token.type === WHITESPACE || token.type === COMMENT)) {\n        token = getNextToken(++offset);\n    }\n\n    return offset;\n}\n\nfunction checkInteger(token, valueOffset, disallowSign, offset) {\n    if (!token) {\n        return 0;\n    }\n\n    var code = token.value.charCodeAt(valueOffset);\n\n    if (code === PLUSSIGN || code === HYPHENMINUS) {\n        if (disallowSign) {\n            // Number sign is not allowed\n            return 0;\n        }\n        valueOffset++;\n    }\n\n    for (; valueOffset < token.value.length; valueOffset++) {\n        if (!isDigit(token.value.charCodeAt(valueOffset))) {\n            // Integer is expected\n            return 0;\n        }\n    }\n\n    return offset + 1;\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB(token, offset_, getNextToken) {\n    var sign = false;\n    var offset = skipSC(token, offset_, getNextToken);\n\n    token = getNextToken(offset);\n\n    if (token === null) {\n        return offset_;\n    }\n\n    if (token.type !== NUMBER) {\n        if (isDelim(token, PLUSSIGN) || isDelim(token, HYPHENMINUS)) {\n            sign = true;\n            offset = skipSC(getNextToken(++offset), offset, getNextToken);\n            token = getNextToken(offset);\n\n            if (token === null && token.type !== NUMBER) {\n                return 0;\n            }\n        } else {\n            return offset_;\n        }\n    }\n\n    if (!sign) {\n        var code = token.value.charCodeAt(0);\n        if (code !== PLUSSIGN && code !== HYPHENMINUS) {\n            // Number sign is expected\n            return 0;\n        }\n    }\n\n    return checkInteger(token, sign ? 0 : 1, sign, offset);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = function anPlusB(token, getNextToken) {\n    /* eslint-disable brace-style*/\n    var offset = 0;\n\n    if (!token) {\n        return 0;\n    }\n\n    // <integer>\n    if (token.type === NUMBER) {\n        return checkInteger(token, 0, ALLOW_SIGN, offset); // b\n    }\n\n    // -n\n    // -n <signed-integer>\n    // -n ['+' | '-'] <signless-integer>\n    // -n- <signless-integer>\n    // <dashndashdigit-ident>\n    else if (token.type === IDENT && token.value.charCodeAt(0) === HYPHENMINUS) {\n        // expect 1st char is N\n        if (!cmpChar(token.value, 1, N)) {\n            return 0;\n        }\n\n        switch (token.value.length) {\n            // -n\n            // -n <signed-integer>\n            // -n ['+' | '-'] <signless-integer>\n            case 2:\n                return consumeB(getNextToken(++offset), offset, getNextToken);\n\n            // -n- <signless-integer>\n            case 3:\n                if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                offset = skipSC(getNextToken(++offset), offset, getNextToken);\n                token = getNextToken(offset);\n\n                return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n            // <dashndashdigit-ident>\n            default:\n                if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                return checkInteger(token, 3, DISALLOW_SIGN, offset);\n        }\n    }\n\n    // '+'? n\n    // '+'? n <signed-integer>\n    // '+'? n ['+' | '-'] <signless-integer>\n    // '+'? n- <signless-integer>\n    // '+'? <ndashdigit-ident>\n    else if (token.type === IDENT || (isDelim(token, PLUSSIGN) && getNextToken(offset + 1).type === IDENT)) {\n        // just ignore a plus\n        if (token.type !== IDENT) {\n            token = getNextToken(++offset);\n        }\n\n        if (token === null || !cmpChar(token.value, 0, N)) {\n            return 0;\n        }\n\n        switch (token.value.length) {\n            // '+'? n\n            // '+'? n <signed-integer>\n            // '+'? n ['+' | '-'] <signless-integer>\n            case 1:\n                return consumeB(getNextToken(++offset), offset, getNextToken);\n\n            // '+'? n- <signless-integer>\n            case 2:\n                if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                offset = skipSC(getNextToken(++offset), offset, getNextToken);\n                token = getNextToken(offset);\n\n                return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n            // '+'? <ndashdigit-ident>\n            default:\n                if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                return checkInteger(token, 2, DISALLOW_SIGN, offset);\n        }\n    }\n\n    // <ndashdigit-dimension>\n    // <ndash-dimension> <signless-integer>\n    // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n    else if (token.type === DIMENSION) {\n        var code = token.value.charCodeAt(0);\n        var sign = code === PLUSSIGN || code === HYPHENMINUS ? 1 : 0;\n\n        for (var i = sign; i < token.value.length; i++) {\n            if (!isDigit(token.value.charCodeAt(i))) {\n                break;\n            }\n        }\n\n        if (i === sign) {\n            // Integer is expected\n            return 0;\n        }\n\n        if (!cmpChar(token.value, i, N)) {\n            return 0;\n        }\n\n        // <n-dimension>\n        // <n-dimension> <signed-integer>\n        // <n-dimension> ['+' | '-'] <signless-integer>\n        if (i + 1 === token.value.length) {\n            return consumeB(getNextToken(++offset), offset, getNextToken);\n        } else {\n            if (token.value.charCodeAt(i + 1) !== HYPHENMINUS) {\n                return 0;\n            }\n\n            // <ndash-dimension> <signless-integer>\n            if (i + 2 === token.value.length) {\n                offset = skipSC(getNextToken(++offset), offset, getNextToken);\n                token = getNextToken(offset);\n\n                return checkInteger(token, 0, DISALLOW_SIGN, offset);\n            }\n            // <ndashdigit-dimension>\n            else {\n                return checkInteger(token, i + 2, DISALLOW_SIGN, offset);\n            }\n        }\n    }\n\n    return 0;\n};\n"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC,CAACD,OAAO;AAC7C,IAAIE,OAAO,GAAGD,OAAO,CAAC,cAAc,CAAC,CAACC,OAAO;AAC7C,IAAIC,IAAI,GAAGF,OAAO,CAAC,cAAc,CAAC,CAACE,IAAI;AAEvC,IAAIC,KAAK,GAAGD,IAAI,CAACE,KAAK;AACtB,IAAIC,UAAU,GAAGH,IAAI,CAACI,UAAU;AAChC,IAAIC,OAAO,GAAGL,IAAI,CAACM,OAAO;AAC1B,IAAIC,KAAK,GAAGP,IAAI,CAACQ,KAAK;AACtB,IAAIC,MAAM,GAAGT,IAAI,CAACU,MAAM;AACxB,IAAIC,SAAS,GAAGX,IAAI,CAACY,SAAS;AAC9B,IAAIC,QAAQ,GAAG,MAAM,CAAC,CAAI;AAC1B,IAAIC,WAAW,GAAG,MAAM,CAAC,CAAC;AAC1B,IAAIC,CAAC,GAAG,MAAM,CAAC,CAAW;AAC1B,IAAIC,aAAa,GAAG,IAAI;AACxB,IAAIC,UAAU,GAAG,KAAK;AAEtB,SAASC,OAAOA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC1B,OAAOD,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACE,IAAI,KAAKpB,KAAK,IAAIkB,KAAK,CAACG,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKH,IAAI;AACvF;AAEA,SAASI,MAAMA,CAACL,KAAK,EAAEM,MAAM,EAAEC,YAAY,EAAE;EACzC,OAAOP,KAAK,KAAK,IAAI,KAAKA,KAAK,CAACE,IAAI,KAAKlB,UAAU,IAAIgB,KAAK,CAACE,IAAI,KAAKhB,OAAO,CAAC,EAAE;IAC5Ec,KAAK,GAAGO,YAAY,CAAC,EAAED,MAAM,CAAC;EAClC;EAEA,OAAOA,MAAM;AACjB;AAEA,SAASE,YAAYA,CAACR,KAAK,EAAES,WAAW,EAAEC,YAAY,EAAEJ,MAAM,EAAE;EAC5D,IAAI,CAACN,KAAK,EAAE;IACR,OAAO,CAAC;EACZ;EAEA,IAAIC,IAAI,GAAGD,KAAK,CAACG,KAAK,CAACC,UAAU,CAACK,WAAW,CAAC;EAE9C,IAAIR,IAAI,KAAKP,QAAQ,IAAIO,IAAI,KAAKN,WAAW,EAAE;IAC3C,IAAIe,YAAY,EAAE;MACd;MACA,OAAO,CAAC;IACZ;IACAD,WAAW,EAAE;EACjB;EAEA,OAAOA,WAAW,GAAGT,KAAK,CAACG,KAAK,CAACQ,MAAM,EAAEF,WAAW,EAAE,EAAE;IACpD,IAAI,CAAC/B,OAAO,CAACsB,KAAK,CAACG,KAAK,CAACC,UAAU,CAACK,WAAW,CAAC,CAAC,EAAE;MAC/C;MACA,OAAO,CAAC;IACZ;EACJ;EAEA,OAAOH,MAAM,GAAG,CAAC;AACrB;;AAEA;AACA;AACA,SAASM,QAAQA,CAACZ,KAAK,EAAEa,OAAO,EAAEN,YAAY,EAAE;EAC5C,IAAIO,IAAI,GAAG,KAAK;EAChB,IAAIR,MAAM,GAAGD,MAAM,CAACL,KAAK,EAAEa,OAAO,EAAEN,YAAY,CAAC;EAEjDP,KAAK,GAAGO,YAAY,CAACD,MAAM,CAAC;EAE5B,IAAIN,KAAK,KAAK,IAAI,EAAE;IAChB,OAAOa,OAAO;EAClB;EAEA,IAAIb,KAAK,CAACE,IAAI,KAAKZ,MAAM,EAAE;IACvB,IAAIS,OAAO,CAACC,KAAK,EAAEN,QAAQ,CAAC,IAAIK,OAAO,CAACC,KAAK,EAAEL,WAAW,CAAC,EAAE;MACzDmB,IAAI,GAAG,IAAI;MACXR,MAAM,GAAGD,MAAM,CAACE,YAAY,CAAC,EAAED,MAAM,CAAC,EAAEA,MAAM,EAAEC,YAAY,CAAC;MAC7DP,KAAK,GAAGO,YAAY,CAACD,MAAM,CAAC;MAE5B,IAAIN,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACE,IAAI,KAAKZ,MAAM,EAAE;QACzC,OAAO,CAAC;MACZ;IACJ,CAAC,MAAM;MACH,OAAOuB,OAAO;IAClB;EACJ;EAEA,IAAI,CAACC,IAAI,EAAE;IACP,IAAIb,IAAI,GAAGD,KAAK,CAACG,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC;IACpC,IAAIH,IAAI,KAAKP,QAAQ,IAAIO,IAAI,KAAKN,WAAW,EAAE;MAC3C;MACA,OAAO,CAAC;IACZ;EACJ;EAEA,OAAOa,YAAY,CAACR,KAAK,EAAEc,IAAI,GAAG,CAAC,GAAG,CAAC,EAAEA,IAAI,EAAER,MAAM,CAAC;AAC1D;;AAEA;AACAS,MAAM,CAACC,OAAO,GAAG,SAASC,OAAOA,CAACjB,KAAK,EAAEO,YAAY,EAAE;EACnD;EACA,IAAID,MAAM,GAAG,CAAC;EAEd,IAAI,CAACN,KAAK,EAAE;IACR,OAAO,CAAC;EACZ;;EAEA;EACA,IAAIA,KAAK,CAACE,IAAI,KAAKZ,MAAM,EAAE;IACvB,OAAOkB,YAAY,CAACR,KAAK,EAAE,CAAC,EAAEF,UAAU,EAAEQ,MAAM,CAAC,CAAC,CAAC;EACvD;;EAEA;EACA;EACA;EACA;EACA;EAAA,KACK,IAAIN,KAAK,CAACE,IAAI,KAAKd,KAAK,IAAIY,KAAK,CAACG,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKT,WAAW,EAAE;IACxE;IACA,IAAI,CAACf,OAAO,CAACoB,KAAK,CAACG,KAAK,EAAE,CAAC,EAAEP,CAAC,CAAC,EAAE;MAC7B,OAAO,CAAC;IACZ;IAEA,QAAQI,KAAK,CAACG,KAAK,CAACQ,MAAM;MACtB;MACA;MACA;MACA,KAAK,CAAC;QACF,OAAOC,QAAQ,CAACL,YAAY,CAAC,EAAED,MAAM,CAAC,EAAEA,MAAM,EAAEC,YAAY,CAAC;;MAEjE;MACA,KAAK,CAAC;QACF,IAAIP,KAAK,CAACG,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKT,WAAW,EAAE;UAC3C,OAAO,CAAC;QACZ;QAEAW,MAAM,GAAGD,MAAM,CAACE,YAAY,CAAC,EAAED,MAAM,CAAC,EAAEA,MAAM,EAAEC,YAAY,CAAC;QAC7DP,KAAK,GAAGO,YAAY,CAACD,MAAM,CAAC;QAE5B,OAAOE,YAAY,CAACR,KAAK,EAAE,CAAC,EAAEH,aAAa,EAAES,MAAM,CAAC;;MAExD;MACA;QACI,IAAIN,KAAK,CAACG,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKT,WAAW,EAAE;UAC3C,OAAO,CAAC;QACZ;QAEA,OAAOa,YAAY,CAACR,KAAK,EAAE,CAAC,EAAEH,aAAa,EAAES,MAAM,CAAC;IAC5D;EACJ;;EAEA;EACA;EACA;EACA;EACA;EAAA,KACK,IAAIN,KAAK,CAACE,IAAI,KAAKd,KAAK,IAAKW,OAAO,CAACC,KAAK,EAAEN,QAAQ,CAAC,IAAIa,YAAY,CAACD,MAAM,GAAG,CAAC,CAAC,CAACJ,IAAI,KAAKd,KAAM,EAAE;IACpG;IACA,IAAIY,KAAK,CAACE,IAAI,KAAKd,KAAK,EAAE;MACtBY,KAAK,GAAGO,YAAY,CAAC,EAAED,MAAM,CAAC;IAClC;IAEA,IAAIN,KAAK,KAAK,IAAI,IAAI,CAACpB,OAAO,CAACoB,KAAK,CAACG,KAAK,EAAE,CAAC,EAAEP,CAAC,CAAC,EAAE;MAC/C,OAAO,CAAC;IACZ;IAEA,QAAQI,KAAK,CAACG,KAAK,CAACQ,MAAM;MACtB;MACA;MACA;MACA,KAAK,CAAC;QACF,OAAOC,QAAQ,CAACL,YAAY,CAAC,EAAED,MAAM,CAAC,EAAEA,MAAM,EAAEC,YAAY,CAAC;;MAEjE;MACA,KAAK,CAAC;QACF,IAAIP,KAAK,CAACG,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKT,WAAW,EAAE;UAC3C,OAAO,CAAC;QACZ;QAEAW,MAAM,GAAGD,MAAM,CAACE,YAAY,CAAC,EAAED,MAAM,CAAC,EAAEA,MAAM,EAAEC,YAAY,CAAC;QAC7DP,KAAK,GAAGO,YAAY,CAACD,MAAM,CAAC;QAE5B,OAAOE,YAAY,CAACR,KAAK,EAAE,CAAC,EAAEH,aAAa,EAAES,MAAM,CAAC;;MAExD;MACA;QACI,IAAIN,KAAK,CAACG,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,KAAKT,WAAW,EAAE;UAC3C,OAAO,CAAC;QACZ;QAEA,OAAOa,YAAY,CAACR,KAAK,EAAE,CAAC,EAAEH,aAAa,EAAES,MAAM,CAAC;IAC5D;EACJ;;EAEA;EACA;EACA;EACA;EACA;EAAA,KACK,IAAIN,KAAK,CAACE,IAAI,KAAKV,SAAS,EAAE;IAC/B,IAAIS,IAAI,GAAGD,KAAK,CAACG,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC;IACpC,IAAIU,IAAI,GAAGb,IAAI,KAAKP,QAAQ,IAAIO,IAAI,KAAKN,WAAW,GAAG,CAAC,GAAG,CAAC;IAE5D,KAAK,IAAIuB,CAAC,GAAGJ,IAAI,EAAEI,CAAC,GAAGlB,KAAK,CAACG,KAAK,CAACQ,MAAM,EAAEO,CAAC,EAAE,EAAE;MAC5C,IAAI,CAACxC,OAAO,CAACsB,KAAK,CAACG,KAAK,CAACC,UAAU,CAACc,CAAC,CAAC,CAAC,EAAE;QACrC;MACJ;IACJ;IAEA,IAAIA,CAAC,KAAKJ,IAAI,EAAE;MACZ;MACA,OAAO,CAAC;IACZ;IAEA,IAAI,CAAClC,OAAO,CAACoB,KAAK,CAACG,KAAK,EAAEe,CAAC,EAAEtB,CAAC,CAAC,EAAE;MAC7B,OAAO,CAAC;IACZ;;IAEA;IACA;IACA;IACA,IAAIsB,CAAC,GAAG,CAAC,KAAKlB,KAAK,CAACG,KAAK,CAACQ,MAAM,EAAE;MAC9B,OAAOC,QAAQ,CAACL,YAAY,CAAC,EAAED,MAAM,CAAC,EAAEA,MAAM,EAAEC,YAAY,CAAC;IACjE,CAAC,MAAM;MACH,IAAIP,KAAK,CAACG,KAAK,CAACC,UAAU,CAACc,CAAC,GAAG,CAAC,CAAC,KAAKvB,WAAW,EAAE;QAC/C,OAAO,CAAC;MACZ;;MAEA;MACA,IAAIuB,CAAC,GAAG,CAAC,KAAKlB,KAAK,CAACG,KAAK,CAACQ,MAAM,EAAE;QAC9BL,MAAM,GAAGD,MAAM,CAACE,YAAY,CAAC,EAAED,MAAM,CAAC,EAAEA,MAAM,EAAEC,YAAY,CAAC;QAC7DP,KAAK,GAAGO,YAAY,CAACD,MAAM,CAAC;QAE5B,OAAOE,YAAY,CAACR,KAAK,EAAE,CAAC,EAAEH,aAAa,EAAES,MAAM,CAAC;MACxD;MACA;MAAA,KACK;QACD,OAAOE,YAAY,CAACR,KAAK,EAAEkB,CAAC,GAAG,CAAC,EAAErB,aAAa,EAAES,MAAM,CAAC;MAC5D;IACJ;EACJ;EAEA,OAAO,CAAC;AACZ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}