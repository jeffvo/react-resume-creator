{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Target, TargetType } from '../api/Target.js';\nimport { debugError } from '../common/util.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { CdpCDPSession } from './CDPSession.js';\nimport { CdpPage } from './Page.js';\nimport { CdpWebWorker } from './WebWorker.js';\n/**\n * @internal\n */\nexport var InitializationStatus;\n(function (InitializationStatus) {\n  InitializationStatus[\"SUCCESS\"] = \"success\";\n  InitializationStatus[\"ABORTED\"] = \"aborted\";\n})(InitializationStatus || (InitializationStatus = {}));\n/**\n * @internal\n */\nexport class CdpTarget extends Target {\n  #browserContext;\n  #session;\n  #targetInfo;\n  #targetManager;\n  #sessionFactory;\n  _initializedDeferred = Deferred.create();\n  _isClosedDeferred = Deferred.create();\n  _targetId;\n  /**\n   * To initialize the target for use, call initialize.\n   *\n   * @internal\n   */\n  constructor(targetInfo, session, browserContext, targetManager, sessionFactory) {\n    super();\n    this.#session = session;\n    this.#targetManager = targetManager;\n    this.#targetInfo = targetInfo;\n    this.#browserContext = browserContext;\n    this._targetId = targetInfo.targetId;\n    this.#sessionFactory = sessionFactory;\n    if (this.#session && this.#session instanceof CdpCDPSession) {\n      this.#session._setTarget(this);\n    }\n  }\n  async asPage() {\n    const session = this._session();\n    if (!session) {\n      return await this.createCDPSession().then(client => {\n        return CdpPage._create(client, this, false, null);\n      });\n    }\n    return await CdpPage._create(session, this, false, null);\n  }\n  _subtype() {\n    return this.#targetInfo.subtype;\n  }\n  _session() {\n    return this.#session;\n  }\n  _sessionFactory() {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory;\n  }\n  createCDPSession() {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory(false).then(session => {\n      session._setTarget(this);\n      return session;\n    });\n  }\n  url() {\n    return this.#targetInfo.url;\n  }\n  type() {\n    const type = this.#targetInfo.type;\n    switch (type) {\n      case 'page':\n        return TargetType.PAGE;\n      case 'background_page':\n        return TargetType.BACKGROUND_PAGE;\n      case 'service_worker':\n        return TargetType.SERVICE_WORKER;\n      case 'shared_worker':\n        return TargetType.SHARED_WORKER;\n      case 'browser':\n        return TargetType.BROWSER;\n      case 'webview':\n        return TargetType.WEBVIEW;\n      case 'tab':\n        return TargetType.TAB;\n      default:\n        return TargetType.OTHER;\n    }\n  }\n  _targetManager() {\n    if (!this.#targetManager) {\n      throw new Error('targetManager is not initialized');\n    }\n    return this.#targetManager;\n  }\n  _getTargetInfo() {\n    return this.#targetInfo;\n  }\n  browser() {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialized');\n    }\n    return this.#browserContext.browser();\n  }\n  browserContext() {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialized');\n    }\n    return this.#browserContext;\n  }\n  opener() {\n    const {\n      openerId\n    } = this.#targetInfo;\n    if (!openerId) {\n      return;\n    }\n    return this.browser().targets().find(target => {\n      return target._targetId === openerId;\n    });\n  }\n  _targetInfoChanged(targetInfo) {\n    this.#targetInfo = targetInfo;\n    this._checkIfInitialized();\n  }\n  _initialize() {\n    this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n  }\n  _isTargetExposed() {\n    return this.type() !== TargetType.TAB && !this._subtype();\n  }\n  _checkIfInitialized() {\n    if (!this._initializedDeferred.resolved()) {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n/**\n * @internal\n */\nexport class PageTarget extends CdpTarget {\n  #defaultViewport;\n  pagePromise;\n  #ignoreHTTPSErrors;\n  constructor(targetInfo, session, browserContext, targetManager, sessionFactory, ignoreHTTPSErrors, defaultViewport) {\n    super(targetInfo, session, browserContext, targetManager, sessionFactory);\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#defaultViewport = defaultViewport ?? undefined;\n  }\n  _initialize() {\n    this._initializedDeferred.valueOrThrow().then(async result => {\n      if (result === InitializationStatus.ABORTED) {\n        return;\n      }\n      const opener = this.opener();\n      if (!(opener instanceof PageTarget)) {\n        return;\n      }\n      if (!opener || !opener.pagePromise || this.type() !== 'page') {\n        return true;\n      }\n      const openerPage = await opener.pagePromise;\n      if (!openerPage.listenerCount(\"popup\" /* PageEvent.Popup */)) {\n        return true;\n      }\n      const popupPage = await this.page();\n      openerPage.emit(\"popup\" /* PageEvent.Popup */, popupPage);\n      return true;\n    }).catch(debugError);\n    this._checkIfInitialized();\n  }\n  async page() {\n    if (!this.pagePromise) {\n      const session = this._session();\n      this.pagePromise = (session ? Promise.resolve(session) : this._sessionFactory()( /* isAutoAttachEmulated=*/false)).then(client => {\n        return CdpPage._create(client, this, this.#ignoreHTTPSErrors, this.#defaultViewport ?? null);\n      });\n    }\n    return (await this.pagePromise) ?? null;\n  }\n  _checkIfInitialized() {\n    if (this._initializedDeferred.resolved()) {\n      return;\n    }\n    if (this._getTargetInfo().url !== '') {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n/**\n * @internal\n */\nexport class DevToolsTarget extends PageTarget {}\n/**\n * @internal\n */\nexport class WorkerTarget extends CdpTarget {\n  #workerPromise;\n  async worker() {\n    if (!this.#workerPromise) {\n      const session = this._session();\n      // TODO(einbinder): Make workers send their console logs.\n      this.#workerPromise = (session ? Promise.resolve(session) : this._sessionFactory()( /* isAutoAttachEmulated=*/false)).then(client => {\n        return new CdpWebWorker(client, this._getTargetInfo().url, this._targetId, this.type(), () => {} /* consoleAPICalled */, () => {} /* exceptionThrown */);\n      });\n    }\n    return await this.#workerPromise;\n  }\n}\n/**\n * @internal\n */\nexport class OtherTarget extends CdpTarget {}","map":{"version":3,"names":["Target","TargetType","debugError","Deferred","CdpCDPSession","CdpPage","CdpWebWorker","InitializationStatus","CdpTarget","browserContext","session","targetInfo","targetManager","sessionFactory","_initializedDeferred","create","_isClosedDeferred","_targetId","constructor","targetId","_setTarget","asPage","_session","createCDPSession","then","client","_create","_subtype","subtype","_sessionFactory","Error","url","type","PAGE","BACKGROUND_PAGE","SERVICE_WORKER","SHARED_WORKER","BROWSER","WEBVIEW","TAB","OTHER","_targetManager","_getTargetInfo","browser","opener","openerId","targets","find","target","_targetInfoChanged","_checkIfInitialized","_initialize","resolve","SUCCESS","_isTargetExposed","resolved","PageTarget","defaultViewport","pagePromise","ignoreHTTPSErrors","undefined","valueOrThrow","result","ABORTED","openerPage","listenerCount","popupPage","page","emit","catch","Promise","DevToolsTarget","WorkerTarget","workerPromise","worker","OtherTarget"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/puppeteer-core/src/cdp/Target.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {Browser} from '../api/Browser.js';\nimport type {BrowserContext} from '../api/BrowserContext.js';\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {PageEvent, type Page} from '../api/Page.js';\nimport {Target, TargetType} from '../api/Target.js';\nimport {debugError} from '../common/util.js';\nimport type {Viewport} from '../common/Viewport.js';\nimport {Deferred} from '../util/Deferred.js';\n\nimport {CdpCDPSession} from './CDPSession.js';\nimport {CdpPage} from './Page.js';\nimport type {TargetManager} from './TargetManager.js';\nimport {CdpWebWorker} from './WebWorker.js';\n\n/**\n * @internal\n */\nexport enum InitializationStatus {\n  SUCCESS = 'success',\n  ABORTED = 'aborted',\n}\n\n/**\n * @internal\n */\nexport class CdpTarget extends Target {\n  #browserContext?: BrowserContext;\n  #session?: CDPSession;\n  #targetInfo: Protocol.Target.TargetInfo;\n  #targetManager?: TargetManager;\n  #sessionFactory:\n    | ((isAutoAttachEmulated: boolean) => Promise<CDPSession>)\n    | undefined;\n\n  _initializedDeferred = Deferred.create<InitializationStatus>();\n  _isClosedDeferred = Deferred.create<void>();\n  _targetId: string;\n\n  /**\n   * To initialize the target for use, call initialize.\n   *\n   * @internal\n   */\n  constructor(\n    targetInfo: Protocol.Target.TargetInfo,\n    session: CDPSession | undefined,\n    browserContext: BrowserContext | undefined,\n    targetManager: TargetManager | undefined,\n    sessionFactory:\n      | ((isAutoAttachEmulated: boolean) => Promise<CDPSession>)\n      | undefined\n  ) {\n    super();\n    this.#session = session;\n    this.#targetManager = targetManager;\n    this.#targetInfo = targetInfo;\n    this.#browserContext = browserContext;\n    this._targetId = targetInfo.targetId;\n    this.#sessionFactory = sessionFactory;\n    if (this.#session && this.#session instanceof CdpCDPSession) {\n      this.#session._setTarget(this);\n    }\n  }\n\n  override async asPage(): Promise<Page> {\n    const session = this._session();\n    if (!session) {\n      return await this.createCDPSession().then(client => {\n        return CdpPage._create(client, this, false, null);\n      });\n    }\n    return await CdpPage._create(session, this, false, null);\n  }\n\n  _subtype(): string | undefined {\n    return this.#targetInfo.subtype;\n  }\n\n  _session(): CDPSession | undefined {\n    return this.#session;\n  }\n\n  protected _sessionFactory(): (\n    isAutoAttachEmulated: boolean\n  ) => Promise<CDPSession> {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory;\n  }\n\n  override createCDPSession(): Promise<CDPSession> {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory(false).then(session => {\n      (session as CdpCDPSession)._setTarget(this);\n      return session;\n    });\n  }\n\n  override url(): string {\n    return this.#targetInfo.url;\n  }\n\n  override type(): TargetType {\n    const type = this.#targetInfo.type;\n    switch (type) {\n      case 'page':\n        return TargetType.PAGE;\n      case 'background_page':\n        return TargetType.BACKGROUND_PAGE;\n      case 'service_worker':\n        return TargetType.SERVICE_WORKER;\n      case 'shared_worker':\n        return TargetType.SHARED_WORKER;\n      case 'browser':\n        return TargetType.BROWSER;\n      case 'webview':\n        return TargetType.WEBVIEW;\n      case 'tab':\n        return TargetType.TAB;\n      default:\n        return TargetType.OTHER;\n    }\n  }\n\n  _targetManager(): TargetManager {\n    if (!this.#targetManager) {\n      throw new Error('targetManager is not initialized');\n    }\n    return this.#targetManager;\n  }\n\n  _getTargetInfo(): Protocol.Target.TargetInfo {\n    return this.#targetInfo;\n  }\n\n  override browser(): Browser {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialized');\n    }\n    return this.#browserContext.browser();\n  }\n\n  override browserContext(): BrowserContext {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialized');\n    }\n    return this.#browserContext;\n  }\n\n  override opener(): Target | undefined {\n    const {openerId} = this.#targetInfo;\n    if (!openerId) {\n      return;\n    }\n    return this.browser()\n      .targets()\n      .find(target => {\n        return (target as CdpTarget)._targetId === openerId;\n      });\n  }\n\n  _targetInfoChanged(targetInfo: Protocol.Target.TargetInfo): void {\n    this.#targetInfo = targetInfo;\n    this._checkIfInitialized();\n  }\n\n  _initialize(): void {\n    this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n  }\n\n  _isTargetExposed(): boolean {\n    return this.type() !== TargetType.TAB && !this._subtype();\n  }\n\n  protected _checkIfInitialized(): void {\n    if (!this._initializedDeferred.resolved()) {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport class PageTarget extends CdpTarget {\n  #defaultViewport?: Viewport;\n  protected pagePromise?: Promise<Page>;\n  #ignoreHTTPSErrors: boolean;\n\n  constructor(\n    targetInfo: Protocol.Target.TargetInfo,\n    session: CDPSession | undefined,\n    browserContext: BrowserContext,\n    targetManager: TargetManager,\n    sessionFactory: (isAutoAttachEmulated: boolean) => Promise<CDPSession>,\n    ignoreHTTPSErrors: boolean,\n    defaultViewport: Viewport | null\n  ) {\n    super(targetInfo, session, browserContext, targetManager, sessionFactory);\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#defaultViewport = defaultViewport ?? undefined;\n  }\n\n  override _initialize(): void {\n    this._initializedDeferred\n      .valueOrThrow()\n      .then(async result => {\n        if (result === InitializationStatus.ABORTED) {\n          return;\n        }\n        const opener = this.opener();\n        if (!(opener instanceof PageTarget)) {\n          return;\n        }\n        if (!opener || !opener.pagePromise || this.type() !== 'page') {\n          return true;\n        }\n        const openerPage = await opener.pagePromise;\n        if (!openerPage.listenerCount(PageEvent.Popup)) {\n          return true;\n        }\n        const popupPage = await this.page();\n        openerPage.emit(PageEvent.Popup, popupPage);\n        return true;\n      })\n      .catch(debugError);\n    this._checkIfInitialized();\n  }\n\n  override async page(): Promise<Page | null> {\n    if (!this.pagePromise) {\n      const session = this._session();\n      this.pagePromise = (\n        session\n          ? Promise.resolve(session)\n          : this._sessionFactory()(/* isAutoAttachEmulated=*/ false)\n      ).then(client => {\n        return CdpPage._create(\n          client,\n          this,\n          this.#ignoreHTTPSErrors,\n          this.#defaultViewport ?? null\n        );\n      });\n    }\n    return (await this.pagePromise) ?? null;\n  }\n\n  override _checkIfInitialized(): void {\n    if (this._initializedDeferred.resolved()) {\n      return;\n    }\n    if (this._getTargetInfo().url !== '') {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport class DevToolsTarget extends PageTarget {}\n\n/**\n * @internal\n */\nexport class WorkerTarget extends CdpTarget {\n  #workerPromise?: Promise<CdpWebWorker>;\n\n  override async worker(): Promise<CdpWebWorker | null> {\n    if (!this.#workerPromise) {\n      const session = this._session();\n      // TODO(einbinder): Make workers send their console logs.\n      this.#workerPromise = (\n        session\n          ? Promise.resolve(session)\n          : this._sessionFactory()(/* isAutoAttachEmulated=*/ false)\n      ).then(client => {\n        return new CdpWebWorker(\n          client,\n          this._getTargetInfo().url,\n          this._targetId,\n          this.type(),\n          () => {} /* consoleAPICalled */,\n          () => {} /* exceptionThrown */\n        );\n      });\n    }\n    return await this.#workerPromise;\n  }\n}\n\n/**\n * @internal\n */\nexport class OtherTarget extends CdpTarget {}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}