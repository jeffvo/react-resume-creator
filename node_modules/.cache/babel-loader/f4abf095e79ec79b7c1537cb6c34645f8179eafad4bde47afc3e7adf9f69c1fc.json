{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar IDENT = TYPE.Ident;\nvar STRING = TYPE.String;\nvar COLON = TYPE.Colon;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\nvar DOLLARSIGN = 0x0024; // U+0024 DOLLAR SIGN ($)\nvar ASTERISK = 0x002A; // U+002A ASTERISK (*)\nvar EQUALSSIGN = 0x003D; // U+003D EQUALS SIGN (=)\nvar CIRCUMFLEXACCENT = 0x005E; // U+005E (^)\nvar VERTICALLINE = 0x007C; // U+007C VERTICAL LINE (|)\nvar TILDE = 0x007E; // U+007E TILDE (~)\n\nfunction getAttributeName() {\n  if (this.scanner.eof) {\n    this.error('Unexpected end of input');\n  }\n  var start = this.scanner.tokenStart;\n  var expectIdent = false;\n  var checkColon = true;\n  if (this.scanner.isDelim(ASTERISK)) {\n    expectIdent = true;\n    checkColon = false;\n    this.scanner.next();\n  } else if (!this.scanner.isDelim(VERTICALLINE)) {\n    this.eat(IDENT);\n  }\n  if (this.scanner.isDelim(VERTICALLINE)) {\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 1) !== EQUALSSIGN) {\n      this.scanner.next();\n      this.eat(IDENT);\n    } else if (expectIdent) {\n      this.error('Identifier is expected', this.scanner.tokenEnd);\n    }\n  } else if (expectIdent) {\n    this.error('Vertical line is expected');\n  }\n  if (checkColon && this.scanner.tokenType === COLON) {\n    this.scanner.next();\n    this.eat(IDENT);\n  }\n  return {\n    type: 'Identifier',\n    loc: this.getLocation(start, this.scanner.tokenStart),\n    name: this.scanner.substrToCursor(start)\n  };\n}\nfunction getOperator() {\n  var start = this.scanner.tokenStart;\n  var code = this.scanner.source.charCodeAt(start);\n  if (code !== EQUALSSIGN &&\n  // =\n  code !== TILDE &&\n  // ~=\n  code !== CIRCUMFLEXACCENT &&\n  // ^=\n  code !== DOLLARSIGN &&\n  // $=\n  code !== ASTERISK &&\n  // *=\n  code !== VERTICALLINE // |=\n  ) {\n    this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n  }\n  this.scanner.next();\n  if (code !== EQUALSSIGN) {\n    if (!this.scanner.isDelim(EQUALSSIGN)) {\n      this.error('Equal sign is expected');\n    }\n    this.scanner.next();\n  }\n  return this.scanner.substrToCursor(start);\n}\n\n// '[' <wq-name> ']'\n// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\nmodule.exports = {\n  name: 'AttributeSelector',\n  structure: {\n    name: 'Identifier',\n    matcher: [String, null],\n    value: ['String', 'Identifier', null],\n    flags: [String, null]\n  },\n  parse: function () {\n    var start = this.scanner.tokenStart;\n    var name;\n    var matcher = null;\n    var value = null;\n    var flags = null;\n    this.eat(LEFTSQUAREBRACKET);\n    this.scanner.skipSC();\n    name = getAttributeName.call(this);\n    this.scanner.skipSC();\n    if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {\n      // avoid case `[name i]`\n      if (this.scanner.tokenType !== IDENT) {\n        matcher = getOperator.call(this);\n        this.scanner.skipSC();\n        value = this.scanner.tokenType === STRING ? this.String() : this.Identifier();\n        this.scanner.skipSC();\n      }\n\n      // attribute flags\n      if (this.scanner.tokenType === IDENT) {\n        flags = this.scanner.getTokenValue();\n        this.scanner.next();\n        this.scanner.skipSC();\n      }\n    }\n    this.eat(RIGHTSQUAREBRACKET);\n    return {\n      type: 'AttributeSelector',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      name: name,\n      matcher: matcher,\n      value: value,\n      flags: flags\n    };\n  },\n  generate: function (node) {\n    var flagsPrefix = ' ';\n    this.chunk('[');\n    this.node(node.name);\n    if (node.matcher !== null) {\n      this.chunk(node.matcher);\n      if (node.value !== null) {\n        this.node(node.value);\n\n        // space between string and flags is not required\n        if (node.value.type === 'String') {\n          flagsPrefix = '';\n        }\n      }\n    }\n    if (node.flags !== null) {\n      this.chunk(flagsPrefix);\n      this.chunk(node.flags);\n    }\n    this.chunk(']');\n  }\n};","map":{"version":3,"names":["TYPE","require","IDENT","Ident","STRING","String","COLON","Colon","LEFTSQUAREBRACKET","LeftSquareBracket","RIGHTSQUAREBRACKET","RightSquareBracket","DOLLARSIGN","ASTERISK","EQUALSSIGN","CIRCUMFLEXACCENT","VERTICALLINE","TILDE","getAttributeName","scanner","eof","error","start","tokenStart","expectIdent","checkColon","isDelim","next","eat","source","charCodeAt","tokenEnd","tokenType","type","loc","getLocation","name","substrToCursor","getOperator","code","module","exports","structure","matcher","value","flags","parse","skipSC","call","Identifier","getTokenValue","generate","node","flagsPrefix","chunk"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/AttributeSelector.js"],"sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar STRING = TYPE.String;\nvar COLON = TYPE.Colon;\nvar LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;\nvar DOLLARSIGN = 0x0024;       // U+0024 DOLLAR SIGN ($)\nvar ASTERISK = 0x002A;         // U+002A ASTERISK (*)\nvar EQUALSSIGN = 0x003D;       // U+003D EQUALS SIGN (=)\nvar CIRCUMFLEXACCENT = 0x005E; // U+005E (^)\nvar VERTICALLINE = 0x007C;     // U+007C VERTICAL LINE (|)\nvar TILDE = 0x007E;            // U+007E TILDE (~)\n\nfunction getAttributeName() {\n    if (this.scanner.eof) {\n        this.error('Unexpected end of input');\n    }\n\n    var start = this.scanner.tokenStart;\n    var expectIdent = false;\n    var checkColon = true;\n\n    if (this.scanner.isDelim(ASTERISK)) {\n        expectIdent = true;\n        checkColon = false;\n        this.scanner.next();\n    } else if (!this.scanner.isDelim(VERTICALLINE)) {\n        this.eat(IDENT);\n    }\n\n    if (this.scanner.isDelim(VERTICALLINE)) {\n        if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 1) !== EQUALSSIGN) {\n            this.scanner.next();\n            this.eat(IDENT);\n        } else if (expectIdent) {\n            this.error('Identifier is expected', this.scanner.tokenEnd);\n        }\n    } else if (expectIdent) {\n        this.error('Vertical line is expected');\n    }\n\n    if (checkColon && this.scanner.tokenType === COLON) {\n        this.scanner.next();\n        this.eat(IDENT);\n    }\n\n    return {\n        type: 'Identifier',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(start)\n    };\n}\n\nfunction getOperator() {\n    var start = this.scanner.tokenStart;\n    var code = this.scanner.source.charCodeAt(start);\n\n    if (code !== EQUALSSIGN &&        // =\n        code !== TILDE &&             // ~=\n        code !== CIRCUMFLEXACCENT &&  // ^=\n        code !== DOLLARSIGN &&        // $=\n        code !== ASTERISK &&          // *=\n        code !== VERTICALLINE         // |=\n    ) {\n        this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n    }\n\n    this.scanner.next();\n\n    if (code !== EQUALSSIGN) {\n        if (!this.scanner.isDelim(EQUALSSIGN)) {\n            this.error('Equal sign is expected');\n        }\n\n        this.scanner.next();\n    }\n\n    return this.scanner.substrToCursor(start);\n}\n\n// '[' <wq-name> ']'\n// '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'\nmodule.exports = {\n    name: 'AttributeSelector',\n    structure: {\n        name: 'Identifier',\n        matcher: [String, null],\n        value: ['String', 'Identifier', null],\n        flags: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var matcher = null;\n        var value = null;\n        var flags = null;\n\n        this.eat(LEFTSQUAREBRACKET);\n        this.scanner.skipSC();\n\n        name = getAttributeName.call(this);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {\n            // avoid case `[name i]`\n            if (this.scanner.tokenType !== IDENT) {\n                matcher = getOperator.call(this);\n\n                this.scanner.skipSC();\n\n                value = this.scanner.tokenType === STRING\n                    ? this.String()\n                    : this.Identifier();\n\n                this.scanner.skipSC();\n            }\n\n            // attribute flags\n            if (this.scanner.tokenType === IDENT) {\n                flags = this.scanner.getTokenValue();\n                this.scanner.next();\n\n                this.scanner.skipSC();\n            }\n        }\n\n        this.eat(RIGHTSQUAREBRACKET);\n\n        return {\n            type: 'AttributeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            matcher: matcher,\n            value: value,\n            flags: flags\n        };\n    },\n    generate: function(node) {\n        var flagsPrefix = ' ';\n\n        this.chunk('[');\n        this.node(node.name);\n\n        if (node.matcher !== null) {\n            this.chunk(node.matcher);\n\n            if (node.value !== null) {\n                this.node(node.value);\n\n                // space between string and flags is not required\n                if (node.value.type === 'String') {\n                    flagsPrefix = '';\n                }\n            }\n        }\n\n        if (node.flags !== null) {\n            this.chunk(flagsPrefix);\n            this.chunk(node.flags);\n        }\n\n        this.chunk(']');\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}