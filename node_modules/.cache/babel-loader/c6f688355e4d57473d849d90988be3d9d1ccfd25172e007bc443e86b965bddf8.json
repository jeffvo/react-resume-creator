{"ast":null,"code":"var cmpChar = require('../../tokenizer').cmpChar;\nvar isDigit = require('../../tokenizer').isDigit;\nvar TYPE = require('../../tokenizer').TYPE;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar N = 0x006E; // U+006E LATIN SMALL LETTER N (n)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\nfunction checkInteger(offset, disallowSign) {\n  var pos = this.scanner.tokenStart + offset;\n  var code = this.scanner.source.charCodeAt(pos);\n  if (code === PLUSSIGN || code === HYPHENMINUS) {\n    if (disallowSign) {\n      this.error('Number sign is not allowed');\n    }\n    pos++;\n  }\n  for (; pos < this.scanner.tokenEnd; pos++) {\n    if (!isDigit(this.scanner.source.charCodeAt(pos))) {\n      this.error('Integer is expected', pos);\n    }\n  }\n}\nfunction checkTokenIsInteger(disallowSign) {\n  return checkInteger.call(this, 0, disallowSign);\n}\nfunction expectCharCode(offset, code) {\n  if (!cmpChar(this.scanner.source, this.scanner.tokenStart + offset, code)) {\n    var msg = '';\n    switch (code) {\n      case N:\n        msg = 'N is expected';\n        break;\n      case HYPHENMINUS:\n        msg = 'HyphenMinus is expected';\n        break;\n    }\n    this.error(msg, this.scanner.tokenStart + offset);\n  }\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB() {\n  var offset = 0;\n  var sign = 0;\n  var type = this.scanner.tokenType;\n  while (type === WHITESPACE || type === COMMENT) {\n    type = this.scanner.lookupType(++offset);\n  }\n  if (type !== NUMBER) {\n    if (this.scanner.isDelim(PLUSSIGN, offset) || this.scanner.isDelim(HYPHENMINUS, offset)) {\n      sign = this.scanner.isDelim(PLUSSIGN, offset) ? PLUSSIGN : HYPHENMINUS;\n      do {\n        type = this.scanner.lookupType(++offset);\n      } while (type === WHITESPACE || type === COMMENT);\n      if (type !== NUMBER) {\n        this.scanner.skip(offset);\n        checkTokenIsInteger.call(this, DISALLOW_SIGN);\n      }\n    } else {\n      return null;\n    }\n  }\n  if (offset > 0) {\n    this.scanner.skip(offset);\n  }\n  if (sign === 0) {\n    type = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n    if (type !== PLUSSIGN && type !== HYPHENMINUS) {\n      this.error('Number sign is expected');\n    }\n  }\n  checkTokenIsInteger.call(this, sign !== 0);\n  return sign === HYPHENMINUS ? '-' + this.consume(NUMBER) : this.consume(NUMBER);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = {\n  name: 'AnPlusB',\n  structure: {\n    a: [String, null],\n    b: [String, null]\n  },\n  parse: function () {\n    /* eslint-disable brace-style*/\n    var start = this.scanner.tokenStart;\n    var a = null;\n    var b = null;\n\n    // <integer>\n    if (this.scanner.tokenType === NUMBER) {\n      checkTokenIsInteger.call(this, ALLOW_SIGN);\n      b = this.consume(NUMBER);\n    }\n\n    // -n\n    // -n <signed-integer>\n    // -n ['+' | '-'] <signless-integer>\n    // -n- <signless-integer>\n    // <dashndashdigit-ident>\n    else if (this.scanner.tokenType === IDENT && cmpChar(this.scanner.source, this.scanner.tokenStart, HYPHENMINUS)) {\n      a = '-1';\n      expectCharCode.call(this, 1, N);\n      switch (this.scanner.getTokenLength()) {\n        // -n\n        // -n <signed-integer>\n        // -n ['+' | '-'] <signless-integer>\n        case 2:\n          this.scanner.next();\n          b = consumeB.call(this);\n          break;\n\n        // -n- <signless-integer>\n        case 3:\n          expectCharCode.call(this, 2, HYPHENMINUS);\n          this.scanner.next();\n          this.scanner.skipSC();\n          checkTokenIsInteger.call(this, DISALLOW_SIGN);\n          b = '-' + this.consume(NUMBER);\n          break;\n\n        // <dashndashdigit-ident>\n        default:\n          expectCharCode.call(this, 2, HYPHENMINUS);\n          checkInteger.call(this, 3, DISALLOW_SIGN);\n          this.scanner.next();\n          b = this.scanner.substrToCursor(start + 2);\n      }\n    }\n\n    // '+'? n\n    // '+'? n <signed-integer>\n    // '+'? n ['+' | '-'] <signless-integer>\n    // '+'? n- <signless-integer>\n    // '+'? <ndashdigit-ident>\n    else if (this.scanner.tokenType === IDENT || this.scanner.isDelim(PLUSSIGN) && this.scanner.lookupType(1) === IDENT) {\n      var sign = 0;\n      a = '1';\n\n      // just ignore a plus\n      if (this.scanner.isDelim(PLUSSIGN)) {\n        sign = 1;\n        this.scanner.next();\n      }\n      expectCharCode.call(this, 0, N);\n      switch (this.scanner.getTokenLength()) {\n        // '+'? n\n        // '+'? n <signed-integer>\n        // '+'? n ['+' | '-'] <signless-integer>\n        case 1:\n          this.scanner.next();\n          b = consumeB.call(this);\n          break;\n\n        // '+'? n- <signless-integer>\n        case 2:\n          expectCharCode.call(this, 1, HYPHENMINUS);\n          this.scanner.next();\n          this.scanner.skipSC();\n          checkTokenIsInteger.call(this, DISALLOW_SIGN);\n          b = '-' + this.consume(NUMBER);\n          break;\n\n        // '+'? <ndashdigit-ident>\n        default:\n          expectCharCode.call(this, 1, HYPHENMINUS);\n          checkInteger.call(this, 2, DISALLOW_SIGN);\n          this.scanner.next();\n          b = this.scanner.substrToCursor(start + sign + 1);\n      }\n    }\n\n    // <ndashdigit-dimension>\n    // <ndash-dimension> <signless-integer>\n    // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n    else if (this.scanner.tokenType === DIMENSION) {\n      var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n      var sign = code === PLUSSIGN || code === HYPHENMINUS;\n      for (var i = this.scanner.tokenStart + sign; i < this.scanner.tokenEnd; i++) {\n        if (!isDigit(this.scanner.source.charCodeAt(i))) {\n          break;\n        }\n      }\n      if (i === this.scanner.tokenStart + sign) {\n        this.error('Integer is expected', this.scanner.tokenStart + sign);\n      }\n      expectCharCode.call(this, i - this.scanner.tokenStart, N);\n      a = this.scanner.source.substring(start, i);\n\n      // <n-dimension>\n      // <n-dimension> <signed-integer>\n      // <n-dimension> ['+' | '-'] <signless-integer>\n      if (i + 1 === this.scanner.tokenEnd) {\n        this.scanner.next();\n        b = consumeB.call(this);\n      } else {\n        expectCharCode.call(this, i - this.scanner.tokenStart + 1, HYPHENMINUS);\n\n        // <ndash-dimension> <signless-integer>\n        if (i + 2 === this.scanner.tokenEnd) {\n          this.scanner.next();\n          this.scanner.skipSC();\n          checkTokenIsInteger.call(this, DISALLOW_SIGN);\n          b = '-' + this.consume(NUMBER);\n        }\n        // <ndashdigit-dimension>\n        else {\n          checkInteger.call(this, i - this.scanner.tokenStart + 2, DISALLOW_SIGN);\n          this.scanner.next();\n          b = this.scanner.substrToCursor(i + 1);\n        }\n      }\n    } else {\n      this.error();\n    }\n    if (a !== null && a.charCodeAt(0) === PLUSSIGN) {\n      a = a.substr(1);\n    }\n    if (b !== null && b.charCodeAt(0) === PLUSSIGN) {\n      b = b.substr(1);\n    }\n    return {\n      type: 'AnPlusB',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      a: a,\n      b: b\n    };\n  },\n  generate: function (node) {\n    var a = node.a !== null && node.a !== undefined;\n    var b = node.b !== null && node.b !== undefined;\n    if (a) {\n      this.chunk(node.a === '+1' ? '+n' :\n      // eslint-disable-line operator-linebreak, indent\n      node.a === '1' ? 'n' :\n      // eslint-disable-line operator-linebreak, indent\n      node.a === '-1' ? '-n' :\n      // eslint-disable-line operator-linebreak, indent\n      node.a + 'n' // eslint-disable-line operator-linebreak, indent\n      );\n      if (b) {\n        b = String(node.b);\n        if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n          this.chunk(b.charAt(0));\n          this.chunk(b.substr(1));\n        } else {\n          this.chunk('+');\n          this.chunk(b);\n        }\n      }\n    } else {\n      this.chunk(String(node.b));\n    }\n  }\n};","map":{"version":3,"names":["cmpChar","require","isDigit","TYPE","WHITESPACE","WhiteSpace","COMMENT","Comment","IDENT","Ident","NUMBER","Number","DIMENSION","Dimension","PLUSSIGN","HYPHENMINUS","N","DISALLOW_SIGN","ALLOW_SIGN","checkInteger","offset","disallowSign","pos","scanner","tokenStart","code","source","charCodeAt","error","tokenEnd","checkTokenIsInteger","call","expectCharCode","msg","consumeB","sign","type","tokenType","lookupType","isDelim","skip","consume","module","exports","name","structure","a","String","b","parse","start","getTokenLength","next","skipSC","substrToCursor","i","substring","substr","loc","getLocation","generate","node","undefined","chunk","charAt"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/AnPlusB.js"],"sourcesContent":["var cmpChar = require('../../tokenizer').cmpChar;\nvar isDigit = require('../../tokenizer').isDigit;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction checkInteger(offset, disallowSign) {\n    var pos = this.scanner.tokenStart + offset;\n    var code = this.scanner.source.charCodeAt(pos);\n\n    if (code === PLUSSIGN || code === HYPHENMINUS) {\n        if (disallowSign) {\n            this.error('Number sign is not allowed');\n        }\n        pos++;\n    }\n\n    for (; pos < this.scanner.tokenEnd; pos++) {\n        if (!isDigit(this.scanner.source.charCodeAt(pos))) {\n            this.error('Integer is expected', pos);\n        }\n    }\n}\n\nfunction checkTokenIsInteger(disallowSign) {\n    return checkInteger.call(this, 0, disallowSign);\n}\n\nfunction expectCharCode(offset, code) {\n    if (!cmpChar(this.scanner.source, this.scanner.tokenStart + offset, code)) {\n        var msg = '';\n\n        switch (code) {\n            case N:\n                msg = 'N is expected';\n                break;\n            case HYPHENMINUS:\n                msg = 'HyphenMinus is expected';\n                break;\n        }\n\n        this.error(msg, this.scanner.tokenStart + offset);\n    }\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB() {\n    var offset = 0;\n    var sign = 0;\n    var type = this.scanner.tokenType;\n\n    while (type === WHITESPACE || type === COMMENT) {\n        type = this.scanner.lookupType(++offset);\n    }\n\n    if (type !== NUMBER) {\n        if (this.scanner.isDelim(PLUSSIGN, offset) ||\n            this.scanner.isDelim(HYPHENMINUS, offset)) {\n            sign = this.scanner.isDelim(PLUSSIGN, offset) ? PLUSSIGN : HYPHENMINUS;\n\n            do {\n                type = this.scanner.lookupType(++offset);\n            } while (type === WHITESPACE || type === COMMENT);\n\n            if (type !== NUMBER) {\n                this.scanner.skip(offset);\n                checkTokenIsInteger.call(this, DISALLOW_SIGN);\n            }\n        } else {\n            return null;\n        }\n    }\n\n    if (offset > 0) {\n        this.scanner.skip(offset);\n    }\n\n    if (sign === 0) {\n        type = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n        if (type !== PLUSSIGN && type !== HYPHENMINUS) {\n            this.error('Number sign is expected');\n        }\n    }\n\n    checkTokenIsInteger.call(this, sign !== 0);\n    return sign === HYPHENMINUS ? '-' + this.consume(NUMBER) : this.consume(NUMBER);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = {\n    name: 'AnPlusB',\n    structure: {\n        a: [String, null],\n        b: [String, null]\n    },\n    parse: function() {\n        /* eslint-disable brace-style*/\n        var start = this.scanner.tokenStart;\n        var a = null;\n        var b = null;\n\n        // <integer>\n        if (this.scanner.tokenType === NUMBER) {\n            checkTokenIsInteger.call(this, ALLOW_SIGN);\n            b = this.consume(NUMBER);\n        }\n\n        // -n\n        // -n <signed-integer>\n        // -n ['+' | '-'] <signless-integer>\n        // -n- <signless-integer>\n        // <dashndashdigit-ident>\n        else if (this.scanner.tokenType === IDENT && cmpChar(this.scanner.source, this.scanner.tokenStart, HYPHENMINUS)) {\n            a = '-1';\n\n            expectCharCode.call(this, 1, N);\n\n            switch (this.scanner.getTokenLength()) {\n                // -n\n                // -n <signed-integer>\n                // -n ['+' | '-'] <signless-integer>\n                case 2:\n                    this.scanner.next();\n                    b = consumeB.call(this);\n                    break;\n\n                // -n- <signless-integer>\n                case 3:\n                    expectCharCode.call(this, 2, HYPHENMINUS);\n\n                    this.scanner.next();\n                    this.scanner.skipSC();\n\n                    checkTokenIsInteger.call(this, DISALLOW_SIGN);\n\n                    b = '-' + this.consume(NUMBER);\n                    break;\n\n                // <dashndashdigit-ident>\n                default:\n                    expectCharCode.call(this, 2, HYPHENMINUS);\n                    checkInteger.call(this, 3, DISALLOW_SIGN);\n                    this.scanner.next();\n\n                    b = this.scanner.substrToCursor(start + 2);\n            }\n        }\n\n        // '+'? n\n        // '+'? n <signed-integer>\n        // '+'? n ['+' | '-'] <signless-integer>\n        // '+'? n- <signless-integer>\n        // '+'? <ndashdigit-ident>\n        else if (this.scanner.tokenType === IDENT || (this.scanner.isDelim(PLUSSIGN) && this.scanner.lookupType(1) === IDENT)) {\n            var sign = 0;\n            a = '1';\n\n            // just ignore a plus\n            if (this.scanner.isDelim(PLUSSIGN)) {\n                sign = 1;\n                this.scanner.next();\n            }\n\n            expectCharCode.call(this, 0, N);\n\n            switch (this.scanner.getTokenLength()) {\n                // '+'? n\n                // '+'? n <signed-integer>\n                // '+'? n ['+' | '-'] <signless-integer>\n                case 1:\n                    this.scanner.next();\n                    b = consumeB.call(this);\n                    break;\n\n                // '+'? n- <signless-integer>\n                case 2:\n                    expectCharCode.call(this, 1, HYPHENMINUS);\n\n                    this.scanner.next();\n                    this.scanner.skipSC();\n\n                    checkTokenIsInteger.call(this, DISALLOW_SIGN);\n\n                    b = '-' + this.consume(NUMBER);\n                    break;\n\n                // '+'? <ndashdigit-ident>\n                default:\n                    expectCharCode.call(this, 1, HYPHENMINUS);\n                    checkInteger.call(this, 2, DISALLOW_SIGN);\n                    this.scanner.next();\n\n                    b = this.scanner.substrToCursor(start + sign + 1);\n            }\n        }\n\n        // <ndashdigit-dimension>\n        // <ndash-dimension> <signless-integer>\n        // <n-dimension>\n        // <n-dimension> <signed-integer>\n        // <n-dimension> ['+' | '-'] <signless-integer>\n        else if (this.scanner.tokenType === DIMENSION) {\n            var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n            var sign = code === PLUSSIGN || code === HYPHENMINUS;\n\n            for (var i = this.scanner.tokenStart + sign; i < this.scanner.tokenEnd; i++) {\n                if (!isDigit(this.scanner.source.charCodeAt(i))) {\n                    break;\n                }\n            }\n\n            if (i === this.scanner.tokenStart + sign) {\n                this.error('Integer is expected', this.scanner.tokenStart + sign);\n            }\n\n            expectCharCode.call(this, i - this.scanner.tokenStart, N);\n            a = this.scanner.source.substring(start, i);\n\n            // <n-dimension>\n            // <n-dimension> <signed-integer>\n            // <n-dimension> ['+' | '-'] <signless-integer>\n            if (i + 1 === this.scanner.tokenEnd) {\n                this.scanner.next();\n                b = consumeB.call(this);\n            } else {\n                expectCharCode.call(this, i - this.scanner.tokenStart + 1, HYPHENMINUS);\n\n                // <ndash-dimension> <signless-integer>\n                if (i + 2 === this.scanner.tokenEnd) {\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                    checkTokenIsInteger.call(this, DISALLOW_SIGN);\n                    b = '-' + this.consume(NUMBER);\n                }\n                // <ndashdigit-dimension>\n                else {\n                    checkInteger.call(this, i - this.scanner.tokenStart + 2, DISALLOW_SIGN);\n                    this.scanner.next();\n                    b = this.scanner.substrToCursor(i + 1);\n                }\n            }\n        } else {\n            this.error();\n        }\n\n        if (a !== null && a.charCodeAt(0) === PLUSSIGN) {\n            a = a.substr(1);\n        }\n\n        if (b !== null && b.charCodeAt(0) === PLUSSIGN) {\n            b = b.substr(1);\n        }\n\n        return {\n            type: 'AnPlusB',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            a: a,\n            b: b\n        };\n    },\n    generate: function(node) {\n        var a = node.a !== null && node.a !== undefined;\n        var b = node.b !== null && node.b !== undefined;\n\n        if (a) {\n            this.chunk(\n                node.a === '+1' ? '+n' : // eslint-disable-line operator-linebreak, indent\n                node.a ===  '1' ?  'n' : // eslint-disable-line operator-linebreak, indent\n                node.a === '-1' ? '-n' : // eslint-disable-line operator-linebreak, indent\n                node.a + 'n'             // eslint-disable-line operator-linebreak, indent\n            );\n\n            if (b) {\n                b = String(node.b);\n                if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n                    this.chunk(b.charAt(0));\n                    this.chunk(b.substr(1));\n                } else {\n                    this.chunk('+');\n                    this.chunk(b);\n                }\n            }\n        } else {\n            this.chunk(String(node.b));\n        }\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}