{"ast":null,"code":"var TokenStream = require('../common/TokenStream');\nvar adoptBuffer = require('../common/adopt-buffer');\nvar constants = require('./const');\nvar TYPE = constants.TYPE;\nvar charCodeDefinitions = require('./char-code-definitions');\nvar isNewline = charCodeDefinitions.isNewline;\nvar isName = charCodeDefinitions.isName;\nvar isValidEscape = charCodeDefinitions.isValidEscape;\nvar isNumberStart = charCodeDefinitions.isNumberStart;\nvar isIdentifierStart = charCodeDefinitions.isIdentifierStart;\nvar charCodeCategory = charCodeDefinitions.charCodeCategory;\nvar isBOM = charCodeDefinitions.isBOM;\nvar utils = require('./utils');\nvar cmpStr = utils.cmpStr;\nvar getNewlineLength = utils.getNewlineLength;\nvar findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\nvar consumeEscaped = utils.consumeEscaped;\nvar consumeName = utils.consumeName;\nvar consumeNumber = utils.consumeNumber;\nvar consumeBadUrlRemnants = utils.consumeBadUrlRemnants;\nvar OFFSET_MASK = 0x00FFFFFF;\nvar TYPE_SHIFT = 24;\nfunction tokenize(source, stream) {\n  function getCharCode(offset) {\n    return offset < sourceLength ? source.charCodeAt(offset) : 0;\n  }\n\n  // § 4.3.3. Consume a numeric token\n  function consumeNumericToken() {\n    // Consume a number and let number be the result.\n    offset = consumeNumber(source, offset);\n\n    // If the next 3 input code points would start an identifier, then:\n    if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n      // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n      // Consume a name. Set the <dimension-token>’s unit to the returned value.\n      // Return the <dimension-token>.\n      type = TYPE.Dimension;\n      offset = consumeName(source, offset);\n      return;\n    }\n\n    // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n    if (getCharCode(offset) === 0x0025) {\n      // Create a <percentage-token> with the same value as number, and return it.\n      type = TYPE.Percentage;\n      offset++;\n      return;\n    }\n\n    // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n    type = TYPE.Number;\n  }\n\n  // § 4.3.4. Consume an ident-like token\n  function consumeIdentLikeToken() {\n    const nameStartOffset = offset;\n\n    // Consume a name, and let string be the result.\n    offset = consumeName(source, offset);\n\n    // If string’s value is an ASCII case-insensitive match for \"url\",\n    // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n    if (cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {\n      // While the next two input code points are whitespace, consume the next input code point.\n      offset = findWhiteSpaceEnd(source, offset + 1);\n\n      // If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n      // or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n      // then create a <function-token> with its value set to string and return it.\n      if (getCharCode(offset) === 0x0022 || getCharCode(offset) === 0x0027) {\n        type = TYPE.Function;\n        offset = nameStartOffset + 4;\n        return;\n      }\n\n      // Otherwise, consume a url token, and return it.\n      consumeUrlToken();\n      return;\n    }\n\n    // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n    // Create a <function-token> with its value set to string and return it.\n    if (getCharCode(offset) === 0x0028) {\n      type = TYPE.Function;\n      offset++;\n      return;\n    }\n\n    // Otherwise, create an <ident-token> with its value set to string and return it.\n    type = TYPE.Ident;\n  }\n\n  // § 4.3.5. Consume a string token\n  function consumeStringToken(endingCodePoint) {\n    // This algorithm may be called with an ending code point, which denotes the code point\n    // that ends the string. If an ending code point is not specified,\n    // the current input code point is used.\n    if (!endingCodePoint) {\n      endingCodePoint = getCharCode(offset++);\n    }\n\n    // Initially create a <string-token> with its value set to the empty string.\n    type = TYPE.String;\n\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n      var code = source.charCodeAt(offset);\n      switch (charCodeCategory(code)) {\n        // ending code point\n        case endingCodePoint:\n          // Return the <string-token>.\n          offset++;\n          return;\n\n        // EOF\n        case charCodeCategory.Eof:\n          // This is a parse error. Return the <string-token>.\n          return;\n\n        // newline\n        case charCodeCategory.WhiteSpace:\n          if (isNewline(code)) {\n            // This is a parse error. Reconsume the current input code point,\n            // create a <bad-string-token>, and return it.\n            offset += getNewlineLength(source, offset, code);\n            type = TYPE.BadString;\n            return;\n          }\n          break;\n\n        // U+005C REVERSE SOLIDUS (\\)\n        case 0x005C:\n          // If the next input code point is EOF, do nothing.\n          if (offset === source.length - 1) {\n            break;\n          }\n          var nextCode = getCharCode(offset + 1);\n\n          // Otherwise, if the next input code point is a newline, consume it.\n          if (isNewline(nextCode)) {\n            offset += getNewlineLength(source, offset + 1, nextCode);\n          } else if (isValidEscape(code, nextCode)) {\n            // Otherwise, (the stream starts with a valid escape) consume\n            // an escaped code point and append the returned code point to\n            // the <string-token>’s value.\n            offset = consumeEscaped(source, offset) - 1;\n          }\n          break;\n\n        // anything else\n        // Append the current input code point to the <string-token>’s value.\n      }\n    }\n  }\n\n  // § 4.3.6. Consume a url token\n  // Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n  // This algorithm also assumes that it’s being called to consume an \"unquoted\" value, like url(foo).\n  // A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n  // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\n  function consumeUrlToken() {\n    // Initially create a <url-token> with its value set to the empty string.\n    type = TYPE.Url;\n\n    // Consume as much whitespace as possible.\n    offset = findWhiteSpaceEnd(source, offset);\n\n    // Repeatedly consume the next input code point from the stream:\n    for (; offset < source.length; offset++) {\n      var code = source.charCodeAt(offset);\n      switch (charCodeCategory(code)) {\n        // U+0029 RIGHT PARENTHESIS ())\n        case 0x0029:\n          // Return the <url-token>.\n          offset++;\n          return;\n\n        // EOF\n        case charCodeCategory.Eof:\n          // This is a parse error. Return the <url-token>.\n          return;\n\n        // whitespace\n        case charCodeCategory.WhiteSpace:\n          // Consume as much whitespace as possible.\n          offset = findWhiteSpaceEnd(source, offset);\n\n          // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n          // consume it and return the <url-token>\n          // (if EOF was encountered, this is a parse error);\n          if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n            if (offset < source.length) {\n              offset++;\n            }\n            return;\n          }\n\n          // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n          // and return it.\n          offset = consumeBadUrlRemnants(source, offset);\n          type = TYPE.BadUrl;\n          return;\n\n        // U+0022 QUOTATION MARK (\")\n        // U+0027 APOSTROPHE (')\n        // U+0028 LEFT PARENTHESIS (()\n        // non-printable code point\n        case 0x0022:\n        case 0x0027:\n        case 0x0028:\n        case charCodeCategory.NonPrintable:\n          // This is a parse error. Consume the remnants of a bad url,\n          // create a <bad-url-token>, and return it.\n          offset = consumeBadUrlRemnants(source, offset);\n          type = TYPE.BadUrl;\n          return;\n\n        // U+005C REVERSE SOLIDUS (\\)\n        case 0x005C:\n          // If the stream starts with a valid escape, consume an escaped code point and\n          // append the returned code point to the <url-token>’s value.\n          if (isValidEscape(code, getCharCode(offset + 1))) {\n            offset = consumeEscaped(source, offset) - 1;\n            break;\n          }\n\n          // Otherwise, this is a parse error. Consume the remnants of a bad url,\n          // create a <bad-url-token>, and return it.\n          offset = consumeBadUrlRemnants(source, offset);\n          type = TYPE.BadUrl;\n          return;\n\n        // anything else\n        // Append the current input code point to the <url-token>’s value.\n      }\n    }\n  }\n  if (!stream) {\n    stream = new TokenStream();\n  }\n\n  // ensure source is a string\n  source = String(source || '');\n  var sourceLength = source.length;\n  var offsetAndType = adoptBuffer(stream.offsetAndType, sourceLength + 1); // +1 because of eof-token\n  var balance = adoptBuffer(stream.balance, sourceLength + 1);\n  var tokenCount = 0;\n  var start = isBOM(getCharCode(0));\n  var offset = start;\n  var balanceCloseType = 0;\n  var balanceStart = 0;\n  var balancePrev = 0;\n\n  // https://drafts.csswg.org/css-syntax-3/#consume-token\n  // § 4.3.1. Consume a token\n  while (offset < sourceLength) {\n    var code = source.charCodeAt(offset);\n    var type = 0;\n    balance[tokenCount] = sourceLength;\n    switch (charCodeCategory(code)) {\n      // whitespace\n      case charCodeCategory.WhiteSpace:\n        // Consume as much whitespace as possible. Return a <whitespace-token>.\n        type = TYPE.WhiteSpace;\n        offset = findWhiteSpaceEnd(source, offset + 1);\n        break;\n\n      // U+0022 QUOTATION MARK (\")\n      case 0x0022:\n        // Consume a string token and return it.\n        consumeStringToken();\n        break;\n\n      // U+0023 NUMBER SIGN (#)\n      case 0x0023:\n        // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n        if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {\n          // Create a <hash-token>.\n          type = TYPE.Hash;\n\n          // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to \"id\".\n          // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n          //     // TODO: set id flag\n          // }\n\n          // Consume a name, and set the <hash-token>’s value to the returned string.\n          offset = consumeName(source, offset + 1);\n\n          // Return the <hash-token>.\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n        break;\n\n      // U+0027 APOSTROPHE (')\n      case 0x0027:\n        // Consume a string token and return it.\n        consumeStringToken();\n        break;\n\n      // U+0028 LEFT PARENTHESIS (()\n      case 0x0028:\n        // Return a <(-token>.\n        type = TYPE.LeftParenthesis;\n        offset++;\n        break;\n\n      // U+0029 RIGHT PARENTHESIS ())\n      case 0x0029:\n        // Return a <)-token>.\n        type = TYPE.RightParenthesis;\n        offset++;\n        break;\n\n      // U+002B PLUS SIGN (+)\n      case 0x002B:\n        // If the input stream starts with a number, ...\n        if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n          // ... reconsume the current input code point, consume a numeric token, and return it.\n          consumeNumericToken();\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n        break;\n\n      // U+002C COMMA (,)\n      case 0x002C:\n        // Return a <comma-token>.\n        type = TYPE.Comma;\n        offset++;\n        break;\n\n      // U+002D HYPHEN-MINUS (-)\n      case 0x002D:\n        // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n        if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n          consumeNumericToken();\n        } else {\n          // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n          if (getCharCode(offset + 1) === 0x002D && getCharCode(offset + 2) === 0x003E) {\n            type = TYPE.CDC;\n            offset = offset + 3;\n          } else {\n            // Otherwise, if the input stream starts with an identifier, ...\n            if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n              // ... reconsume the current input code point, consume an ident-like token, and return it.\n              consumeIdentLikeToken();\n            } else {\n              // Otherwise, return a <delim-token> with its value set to the current input code point.\n              type = TYPE.Delim;\n              offset++;\n            }\n          }\n        }\n        break;\n\n      // U+002E FULL STOP (.)\n      case 0x002E:\n        // If the input stream starts with a number, ...\n        if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n          // ... reconsume the current input code point, consume a numeric token, and return it.\n          consumeNumericToken();\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n        break;\n\n      // U+002F SOLIDUS (/)\n      case 0x002F:\n        // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n        if (getCharCode(offset + 1) === 0x002A) {\n          // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n          // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n          type = TYPE.Comment;\n          offset = source.indexOf('*/', offset + 2) + 2;\n          if (offset === 1) {\n            offset = source.length;\n          }\n        } else {\n          type = TYPE.Delim;\n          offset++;\n        }\n        break;\n\n      // U+003A COLON (:)\n      case 0x003A:\n        // Return a <colon-token>.\n        type = TYPE.Colon;\n        offset++;\n        break;\n\n      // U+003B SEMICOLON (;)\n      case 0x003B:\n        // Return a <semicolon-token>.\n        type = TYPE.Semicolon;\n        offset++;\n        break;\n\n      // U+003C LESS-THAN SIGN (<)\n      case 0x003C:\n        // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n        if (getCharCode(offset + 1) === 0x0021 && getCharCode(offset + 2) === 0x002D && getCharCode(offset + 3) === 0x002D) {\n          // ... consume them and return a <CDO-token>.\n          type = TYPE.CDO;\n          offset = offset + 4;\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n        break;\n\n      // U+0040 COMMERCIAL AT (@)\n      case 0x0040:\n        // If the next 3 input code points would start an identifier, ...\n        if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n          // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n          type = TYPE.AtKeyword;\n          offset = consumeName(source, offset + 1);\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n        break;\n\n      // U+005B LEFT SQUARE BRACKET ([)\n      case 0x005B:\n        // Return a <[-token>.\n        type = TYPE.LeftSquareBracket;\n        offset++;\n        break;\n\n      // U+005C REVERSE SOLIDUS (\\)\n      case 0x005C:\n        // If the input stream starts with a valid escape, ...\n        if (isValidEscape(code, getCharCode(offset + 1))) {\n          // ... reconsume the current input code point, consume an ident-like token, and return it.\n          consumeIdentLikeToken();\n        } else {\n          // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n        break;\n\n      // U+005D RIGHT SQUARE BRACKET (])\n      case 0x005D:\n        // Return a <]-token>.\n        type = TYPE.RightSquareBracket;\n        offset++;\n        break;\n\n      // U+007B LEFT CURLY BRACKET ({)\n      case 0x007B:\n        // Return a <{-token>.\n        type = TYPE.LeftCurlyBracket;\n        offset++;\n        break;\n\n      // U+007D RIGHT CURLY BRACKET (})\n      case 0x007D:\n        // Return a <}-token>.\n        type = TYPE.RightCurlyBracket;\n        offset++;\n        break;\n\n      // digit\n      case charCodeCategory.Digit:\n        // Reconsume the current input code point, consume a numeric token, and return it.\n        consumeNumericToken();\n        break;\n\n      // name-start code point\n      case charCodeCategory.NameStart:\n        // Reconsume the current input code point, consume an ident-like token, and return it.\n        consumeIdentLikeToken();\n        break;\n\n      // EOF\n      case charCodeCategory.Eof:\n        // Return an <EOF-token>.\n        break;\n\n      // anything else\n      default:\n        // Return a <delim-token> with its value set to the current input code point.\n        type = TYPE.Delim;\n        offset++;\n    }\n    switch (type) {\n      case balanceCloseType:\n        balancePrev = balanceStart & OFFSET_MASK;\n        balanceStart = balance[balancePrev];\n        balanceCloseType = balanceStart >> TYPE_SHIFT;\n        balance[tokenCount] = balancePrev;\n        balance[balancePrev++] = tokenCount;\n        for (; balancePrev < tokenCount; balancePrev++) {\n          if (balance[balancePrev] === sourceLength) {\n            balance[balancePrev] = tokenCount;\n          }\n        }\n        break;\n      case TYPE.LeftParenthesis:\n      case TYPE.Function:\n        balance[tokenCount] = balanceStart;\n        balanceCloseType = TYPE.RightParenthesis;\n        balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n        break;\n      case TYPE.LeftSquareBracket:\n        balance[tokenCount] = balanceStart;\n        balanceCloseType = TYPE.RightSquareBracket;\n        balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n        break;\n      case TYPE.LeftCurlyBracket:\n        balance[tokenCount] = balanceStart;\n        balanceCloseType = TYPE.RightCurlyBracket;\n        balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n        break;\n    }\n    offsetAndType[tokenCount++] = type << TYPE_SHIFT | offset;\n  }\n\n  // finalize buffers\n  offsetAndType[tokenCount] = TYPE.EOF << TYPE_SHIFT | offset; // <EOF-token>\n  balance[tokenCount] = sourceLength;\n  balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n  while (balanceStart !== 0) {\n    balancePrev = balanceStart & OFFSET_MASK;\n    balanceStart = balance[balancePrev];\n    balance[balancePrev] = sourceLength;\n  }\n\n  // update stream\n  stream.source = source;\n  stream.firstCharOffset = start;\n  stream.offsetAndType = offsetAndType;\n  stream.tokenCount = tokenCount;\n  stream.balance = balance;\n  stream.reset();\n  stream.next();\n  return stream;\n}\n\n// extend tokenizer with constants\nObject.keys(constants).forEach(function (key) {\n  tokenize[key] = constants[key];\n});\n\n// extend tokenizer with static methods from utils\nObject.keys(charCodeDefinitions).forEach(function (key) {\n  tokenize[key] = charCodeDefinitions[key];\n});\nObject.keys(utils).forEach(function (key) {\n  tokenize[key] = utils[key];\n});\nmodule.exports = tokenize;","map":{"version":3,"names":["TokenStream","require","adoptBuffer","constants","TYPE","charCodeDefinitions","isNewline","isName","isValidEscape","isNumberStart","isIdentifierStart","charCodeCategory","isBOM","utils","cmpStr","getNewlineLength","findWhiteSpaceEnd","consumeEscaped","consumeName","consumeNumber","consumeBadUrlRemnants","OFFSET_MASK","TYPE_SHIFT","tokenize","source","stream","getCharCode","offset","sourceLength","charCodeAt","consumeNumericToken","type","Dimension","Percentage","Number","consumeIdentLikeToken","nameStartOffset","Function","consumeUrlToken","Ident","consumeStringToken","endingCodePoint","String","length","code","Eof","WhiteSpace","BadString","nextCode","Url","BadUrl","NonPrintable","offsetAndType","balance","tokenCount","start","balanceCloseType","balanceStart","balancePrev","Hash","Delim","LeftParenthesis","RightParenthesis","Comma","CDC","Comment","indexOf","Colon","Semicolon","CDO","AtKeyword","LeftSquareBracket","RightSquareBracket","LeftCurlyBracket","RightCurlyBracket","Digit","NameStart","EOF","firstCharOffset","reset","next","Object","keys","forEach","key","module","exports"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/tokenizer/index.js"],"sourcesContent":["var TokenStream = require('../common/TokenStream');\nvar adoptBuffer = require('../common/adopt-buffer');\n\nvar constants = require('./const');\nvar TYPE = constants.TYPE;\n\nvar charCodeDefinitions = require('./char-code-definitions');\nvar isNewline = charCodeDefinitions.isNewline;\nvar isName = charCodeDefinitions.isName;\nvar isValidEscape = charCodeDefinitions.isValidEscape;\nvar isNumberStart = charCodeDefinitions.isNumberStart;\nvar isIdentifierStart = charCodeDefinitions.isIdentifierStart;\nvar charCodeCategory = charCodeDefinitions.charCodeCategory;\nvar isBOM = charCodeDefinitions.isBOM;\n\nvar utils = require('./utils');\nvar cmpStr = utils.cmpStr;\nvar getNewlineLength = utils.getNewlineLength;\nvar findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\nvar consumeEscaped = utils.consumeEscaped;\nvar consumeName = utils.consumeName;\nvar consumeNumber = utils.consumeNumber;\nvar consumeBadUrlRemnants = utils.consumeBadUrlRemnants;\n\nvar OFFSET_MASK = 0x00FFFFFF;\nvar TYPE_SHIFT = 24;\n\nfunction tokenize(source, stream) {\n    function getCharCode(offset) {\n        return offset < sourceLength ? source.charCodeAt(offset) : 0;\n    }\n\n    // § 4.3.3. Consume a numeric token\n    function consumeNumericToken() {\n        // Consume a number and let number be the result.\n        offset = consumeNumber(source, offset);\n\n        // If the next 3 input code points would start an identifier, then:\n        if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n            // Consume a name. Set the <dimension-token>’s unit to the returned value.\n            // Return the <dimension-token>.\n            type = TYPE.Dimension;\n            offset = consumeName(source, offset);\n            return;\n        }\n\n        // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n        if (getCharCode(offset) === 0x0025) {\n            // Create a <percentage-token> with the same value as number, and return it.\n            type = TYPE.Percentage;\n            offset++;\n            return;\n        }\n\n        // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n        type = TYPE.Number;\n    }\n\n    // § 4.3.4. Consume an ident-like token\n    function consumeIdentLikeToken() {\n        const nameStartOffset = offset;\n\n        // Consume a name, and let string be the result.\n        offset = consumeName(source, offset);\n\n        // If string’s value is an ASCII case-insensitive match for \"url\",\n        // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n        if (cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {\n            // While the next two input code points are whitespace, consume the next input code point.\n            offset = findWhiteSpaceEnd(source, offset + 1);\n\n            // If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n            // or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n            // then create a <function-token> with its value set to string and return it.\n            if (getCharCode(offset) === 0x0022 ||\n                getCharCode(offset) === 0x0027) {\n                type = TYPE.Function;\n                offset = nameStartOffset + 4;\n                return;\n            }\n\n            // Otherwise, consume a url token, and return it.\n            consumeUrlToken();\n            return;\n        }\n\n        // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n        // Create a <function-token> with its value set to string and return it.\n        if (getCharCode(offset) === 0x0028) {\n            type = TYPE.Function;\n            offset++;\n            return;\n        }\n\n        // Otherwise, create an <ident-token> with its value set to string and return it.\n        type = TYPE.Ident;\n    }\n\n    // § 4.3.5. Consume a string token\n    function consumeStringToken(endingCodePoint) {\n        // This algorithm may be called with an ending code point, which denotes the code point\n        // that ends the string. If an ending code point is not specified,\n        // the current input code point is used.\n        if (!endingCodePoint) {\n            endingCodePoint = getCharCode(offset++);\n        }\n\n        // Initially create a <string-token> with its value set to the empty string.\n        type = TYPE.String;\n\n        // Repeatedly consume the next input code point from the stream:\n        for (; offset < source.length; offset++) {\n            var code = source.charCodeAt(offset);\n\n            switch (charCodeCategory(code)) {\n                // ending code point\n                case endingCodePoint:\n                    // Return the <string-token>.\n                    offset++;\n                    return;\n\n                // EOF\n                case charCodeCategory.Eof:\n                    // This is a parse error. Return the <string-token>.\n                    return;\n\n                // newline\n                case charCodeCategory.WhiteSpace:\n                    if (isNewline(code)) {\n                        // This is a parse error. Reconsume the current input code point,\n                        // create a <bad-string-token>, and return it.\n                        offset += getNewlineLength(source, offset, code);\n                        type = TYPE.BadString;\n                        return;\n                    }\n                    break;\n\n                // U+005C REVERSE SOLIDUS (\\)\n                case 0x005C:\n                    // If the next input code point is EOF, do nothing.\n                    if (offset === source.length - 1) {\n                        break;\n                    }\n\n                    var nextCode = getCharCode(offset + 1);\n\n                    // Otherwise, if the next input code point is a newline, consume it.\n                    if (isNewline(nextCode)) {\n                        offset += getNewlineLength(source, offset + 1, nextCode);\n                    } else if (isValidEscape(code, nextCode)) {\n                        // Otherwise, (the stream starts with a valid escape) consume\n                        // an escaped code point and append the returned code point to\n                        // the <string-token>’s value.\n                        offset = consumeEscaped(source, offset) - 1;\n                    }\n                    break;\n\n                // anything else\n                // Append the current input code point to the <string-token>’s value.\n            }\n        }\n    }\n\n    // § 4.3.6. Consume a url token\n    // Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n    // This algorithm also assumes that it’s being called to consume an \"unquoted\" value, like url(foo).\n    // A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n    // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\n    function consumeUrlToken() {\n        // Initially create a <url-token> with its value set to the empty string.\n        type = TYPE.Url;\n\n        // Consume as much whitespace as possible.\n        offset = findWhiteSpaceEnd(source, offset);\n\n        // Repeatedly consume the next input code point from the stream:\n        for (; offset < source.length; offset++) {\n            var code = source.charCodeAt(offset);\n\n            switch (charCodeCategory(code)) {\n                // U+0029 RIGHT PARENTHESIS ())\n                case 0x0029:\n                    // Return the <url-token>.\n                    offset++;\n                    return;\n\n                // EOF\n                case charCodeCategory.Eof:\n                    // This is a parse error. Return the <url-token>.\n                    return;\n\n                // whitespace\n                case charCodeCategory.WhiteSpace:\n                    // Consume as much whitespace as possible.\n                    offset = findWhiteSpaceEnd(source, offset);\n\n                    // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n                    // consume it and return the <url-token>\n                    // (if EOF was encountered, this is a parse error);\n                    if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n                        if (offset < source.length) {\n                            offset++;\n                        }\n                        return;\n                    }\n\n                    // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n                    // and return it.\n                    offset = consumeBadUrlRemnants(source, offset);\n                    type = TYPE.BadUrl;\n                    return;\n\n                // U+0022 QUOTATION MARK (\")\n                // U+0027 APOSTROPHE (')\n                // U+0028 LEFT PARENTHESIS (()\n                // non-printable code point\n                case 0x0022:\n                case 0x0027:\n                case 0x0028:\n                case charCodeCategory.NonPrintable:\n                    // This is a parse error. Consume the remnants of a bad url,\n                    // create a <bad-url-token>, and return it.\n                    offset = consumeBadUrlRemnants(source, offset);\n                    type = TYPE.BadUrl;\n                    return;\n\n                // U+005C REVERSE SOLIDUS (\\)\n                case 0x005C:\n                    // If the stream starts with a valid escape, consume an escaped code point and\n                    // append the returned code point to the <url-token>’s value.\n                    if (isValidEscape(code, getCharCode(offset + 1))) {\n                        offset = consumeEscaped(source, offset) - 1;\n                        break;\n                    }\n\n                    // Otherwise, this is a parse error. Consume the remnants of a bad url,\n                    // create a <bad-url-token>, and return it.\n                    offset = consumeBadUrlRemnants(source, offset);\n                    type = TYPE.BadUrl;\n                    return;\n\n                // anything else\n                // Append the current input code point to the <url-token>’s value.\n            }\n        }\n    }\n\n    if (!stream) {\n        stream = new TokenStream();\n    }\n\n    // ensure source is a string\n    source = String(source || '');\n\n    var sourceLength = source.length;\n    var offsetAndType = adoptBuffer(stream.offsetAndType, sourceLength + 1); // +1 because of eof-token\n    var balance = adoptBuffer(stream.balance, sourceLength + 1);\n    var tokenCount = 0;\n    var start = isBOM(getCharCode(0));\n    var offset = start;\n    var balanceCloseType = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    // https://drafts.csswg.org/css-syntax-3/#consume-token\n    // § 4.3.1. Consume a token\n    while (offset < sourceLength) {\n        var code = source.charCodeAt(offset);\n        var type = 0;\n\n        balance[tokenCount] = sourceLength;\n\n        switch (charCodeCategory(code)) {\n            // whitespace\n            case charCodeCategory.WhiteSpace:\n                // Consume as much whitespace as possible. Return a <whitespace-token>.\n                type = TYPE.WhiteSpace;\n                offset = findWhiteSpaceEnd(source, offset + 1);\n                break;\n\n            // U+0022 QUOTATION MARK (\")\n            case 0x0022:\n                // Consume a string token and return it.\n                consumeStringToken();\n                break;\n\n            // U+0023 NUMBER SIGN (#)\n            case 0x0023:\n                // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n                if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // Create a <hash-token>.\n                    type = TYPE.Hash;\n\n                    // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to \"id\".\n                    // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n                    //     // TODO: set id flag\n                    // }\n\n                    // Consume a name, and set the <hash-token>’s value to the returned string.\n                    offset = consumeName(source, offset + 1);\n\n                    // Return the <hash-token>.\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+0027 APOSTROPHE (')\n            case 0x0027:\n                // Consume a string token and return it.\n                consumeStringToken();\n                break;\n\n            // U+0028 LEFT PARENTHESIS (()\n            case 0x0028:\n                // Return a <(-token>.\n                type = TYPE.LeftParenthesis;\n                offset++;\n                break;\n\n            // U+0029 RIGHT PARENTHESIS ())\n            case 0x0029:\n                // Return a <)-token>.\n                type = TYPE.RightParenthesis;\n                offset++;\n                break;\n\n            // U+002B PLUS SIGN (+)\n            case 0x002B:\n                // If the input stream starts with a number, ...\n                if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // ... reconsume the current input code point, consume a numeric token, and return it.\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+002C COMMA (,)\n            case 0x002C:\n                // Return a <comma-token>.\n                type = TYPE.Comma;\n                offset++;\n                break;\n\n            // U+002D HYPHEN-MINUS (-)\n            case 0x002D:\n                // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n                if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n                    if (getCharCode(offset + 1) === 0x002D &&\n                        getCharCode(offset + 2) === 0x003E) {\n                        type = TYPE.CDC;\n                        offset = offset + 3;\n                    } else {\n                        // Otherwise, if the input stream starts with an identifier, ...\n                        if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                            // ... reconsume the current input code point, consume an ident-like token, and return it.\n                            consumeIdentLikeToken();\n                        } else {\n                            // Otherwise, return a <delim-token> with its value set to the current input code point.\n                            type = TYPE.Delim;\n                            offset++;\n                        }\n                    }\n                }\n                break;\n\n            // U+002E FULL STOP (.)\n            case 0x002E:\n                // If the input stream starts with a number, ...\n                if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // ... reconsume the current input code point, consume a numeric token, and return it.\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+002F SOLIDUS (/)\n            case 0x002F:\n                // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n                if (getCharCode(offset + 1) === 0x002A) {\n                    // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n                    // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n                    type = TYPE.Comment;\n                    offset = source.indexOf('*/', offset + 2) + 2;\n                    if (offset === 1) {\n                        offset = source.length;\n                    }\n                } else {\n                    type = TYPE.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+003A COLON (:)\n            case 0x003A:\n                // Return a <colon-token>.\n                type = TYPE.Colon;\n                offset++;\n                break;\n\n            // U+003B SEMICOLON (;)\n            case 0x003B:\n                // Return a <semicolon-token>.\n                type = TYPE.Semicolon;\n                offset++;\n                break;\n\n            // U+003C LESS-THAN SIGN (<)\n            case 0x003C:\n                // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n                if (getCharCode(offset + 1) === 0x0021 &&\n                    getCharCode(offset + 2) === 0x002D &&\n                    getCharCode(offset + 3) === 0x002D) {\n                    // ... consume them and return a <CDO-token>.\n                    type = TYPE.CDO;\n                    offset = offset + 4;\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+0040 COMMERCIAL AT (@)\n            case 0x0040:\n                // If the next 3 input code points would start an identifier, ...\n                if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n                    // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n                    type = TYPE.AtKeyword;\n                    offset = consumeName(source, offset + 1);\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+005B LEFT SQUARE BRACKET ([)\n            case 0x005B:\n                // Return a <[-token>.\n                type = TYPE.LeftSquareBracket;\n                offset++;\n                break;\n\n            // U+005C REVERSE SOLIDUS (\\)\n            case 0x005C:\n                // If the input stream starts with a valid escape, ...\n                if (isValidEscape(code, getCharCode(offset + 1))) {\n                    // ... reconsume the current input code point, consume an ident-like token, and return it.\n                    consumeIdentLikeToken();\n                } else {\n                    // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+005D RIGHT SQUARE BRACKET (])\n            case 0x005D:\n                // Return a <]-token>.\n                type = TYPE.RightSquareBracket;\n                offset++;\n                break;\n\n            // U+007B LEFT CURLY BRACKET ({)\n            case 0x007B:\n                // Return a <{-token>.\n                type = TYPE.LeftCurlyBracket;\n                offset++;\n                break;\n\n            // U+007D RIGHT CURLY BRACKET (})\n            case 0x007D:\n                // Return a <}-token>.\n                type = TYPE.RightCurlyBracket;\n                offset++;\n                break;\n\n            // digit\n            case charCodeCategory.Digit:\n                // Reconsume the current input code point, consume a numeric token, and return it.\n                consumeNumericToken();\n                break;\n\n            // name-start code point\n            case charCodeCategory.NameStart:\n                // Reconsume the current input code point, consume an ident-like token, and return it.\n                consumeIdentLikeToken();\n                break;\n\n            // EOF\n            case charCodeCategory.Eof:\n                // Return an <EOF-token>.\n                break;\n\n            // anything else\n            default:\n                // Return a <delim-token> with its value set to the current input code point.\n                type = TYPE.Delim;\n                offset++;\n        }\n\n        switch (type) {\n            case balanceCloseType:\n                balancePrev = balanceStart & OFFSET_MASK;\n                balanceStart = balance[balancePrev];\n                balanceCloseType = balanceStart >> TYPE_SHIFT;\n                balance[tokenCount] = balancePrev;\n                balance[balancePrev++] = tokenCount;\n                for (; balancePrev < tokenCount; balancePrev++) {\n                    if (balance[balancePrev] === sourceLength) {\n                        balance[balancePrev] = tokenCount;\n                    }\n                }\n                break;\n\n            case TYPE.LeftParenthesis:\n            case TYPE.Function:\n                balance[tokenCount] = balanceStart;\n                balanceCloseType = TYPE.RightParenthesis;\n                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;\n                break;\n\n            case TYPE.LeftSquareBracket:\n                balance[tokenCount] = balanceStart;\n                balanceCloseType = TYPE.RightSquareBracket;\n                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;\n                break;\n\n            case TYPE.LeftCurlyBracket:\n                balance[tokenCount] = balanceStart;\n                balanceCloseType = TYPE.RightCurlyBracket;\n                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;\n                break;\n        }\n\n        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | offset;\n    }\n\n    // finalize buffers\n    offsetAndType[tokenCount] = (TYPE.EOF << TYPE_SHIFT) | offset; // <EOF-token>\n    balance[tokenCount] = sourceLength;\n    balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n    while (balanceStart !== 0) {\n        balancePrev = balanceStart & OFFSET_MASK;\n        balanceStart = balance[balancePrev];\n        balance[balancePrev] = sourceLength;\n    }\n\n    // update stream\n    stream.source = source;\n    stream.firstCharOffset = start;\n    stream.offsetAndType = offsetAndType;\n    stream.tokenCount = tokenCount;\n    stream.balance = balance;\n    stream.reset();\n    stream.next();\n\n    return stream;\n}\n\n// extend tokenizer with constants\nObject.keys(constants).forEach(function(key) {\n    tokenize[key] = constants[key];\n});\n\n// extend tokenizer with static methods from utils\nObject.keys(charCodeDefinitions).forEach(function(key) {\n    tokenize[key] = charCodeDefinitions[key];\n});\nObject.keys(utils).forEach(function(key) {\n    tokenize[key] = utils[key];\n});\n\nmodule.exports = tokenize;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}