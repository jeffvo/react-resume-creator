{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\nvar rawMode = require('../node/Raw').mode;\nvar COMMA = TYPE.Comma;\nvar WHITESPACE = TYPE.WhiteSpace;\n\n// var( <ident> , <value>? )\nmodule.exports = function () {\n  var children = this.createList();\n  this.scanner.skipSC();\n\n  // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer\n  children.push(this.Identifier());\n  this.scanner.skipSC();\n  if (this.scanner.tokenType === COMMA) {\n    children.push(this.Operator());\n    const startIndex = this.scanner.tokenIndex;\n    const value = this.parseCustomProperty ? this.Value(null) : this.Raw(this.scanner.tokenIndex, rawMode.exclamationMarkOrSemicolon, false);\n    if (value.type === 'Value' && value.children.isEmpty()) {\n      for (let offset = startIndex - this.scanner.tokenIndex; offset <= 0; offset++) {\n        if (this.scanner.lookupType(offset) === WHITESPACE) {\n          value.children.appendData({\n            type: 'WhiteSpace',\n            loc: null,\n            value: ' '\n          });\n          break;\n        }\n      }\n    }\n    children.push(value);\n  }\n  return children;\n};","map":{"version":3,"names":["TYPE","require","rawMode","mode","COMMA","Comma","WHITESPACE","WhiteSpace","module","exports","children","createList","scanner","skipSC","push","Identifier","tokenType","Operator","startIndex","tokenIndex","value","parseCustomProperty","Value","Raw","exclamationMarkOrSemicolon","type","isEmpty","offset","lookupType","appendData","loc"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/function/var.js"],"sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\nvar rawMode = require('../node/Raw').mode;\n\nvar COMMA = TYPE.Comma;\nvar WHITESPACE = TYPE.WhiteSpace;\n\n// var( <ident> , <value>? )\nmodule.exports = function() {\n    var children = this.createList();\n\n    this.scanner.skipSC();\n\n    // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer\n    children.push(this.Identifier());\n\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === COMMA) {\n        children.push(this.Operator());\n\n        const startIndex = this.scanner.tokenIndex;\n        const value = this.parseCustomProperty\n            ? this.Value(null)\n            : this.Raw(this.scanner.tokenIndex, rawMode.exclamationMarkOrSemicolon, false);\n\n        if (value.type === 'Value' && value.children.isEmpty()) {\n            for (let offset = startIndex - this.scanner.tokenIndex; offset <= 0; offset++) {\n                if (this.scanner.lookupType(offset) === WHITESPACE) {\n                    value.children.appendData({\n                        type: 'WhiteSpace',\n                        loc: null,\n                        value: ' '\n                    });\n                    break;\n                }\n            }\n        }\n\n        children.push(value);\n    }\n\n    return children;\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAiB,CAAC,CAACD,IAAI;AAC1C,IAAIE,OAAO,GAAGD,OAAO,CAAC,aAAa,CAAC,CAACE,IAAI;AAEzC,IAAIC,KAAK,GAAGJ,IAAI,CAACK,KAAK;AACtB,IAAIC,UAAU,GAAGN,IAAI,CAACO,UAAU;;AAEhC;AACAC,MAAM,CAACC,OAAO,GAAG,YAAW;EACxB,IAAIC,QAAQ,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;EAEhC,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,CAAC;;EAErB;EACAH,QAAQ,CAACI,IAAI,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC;EAEhC,IAAI,CAACH,OAAO,CAACC,MAAM,CAAC,CAAC;EAErB,IAAI,IAAI,CAACD,OAAO,CAACI,SAAS,KAAKZ,KAAK,EAAE;IAClCM,QAAQ,CAACI,IAAI,CAAC,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC;IAE9B,MAAMC,UAAU,GAAG,IAAI,CAACN,OAAO,CAACO,UAAU;IAC1C,MAAMC,KAAK,GAAG,IAAI,CAACC,mBAAmB,GAChC,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC,GAChB,IAAI,CAACC,GAAG,CAAC,IAAI,CAACX,OAAO,CAACO,UAAU,EAAEjB,OAAO,CAACsB,0BAA0B,EAAE,KAAK,CAAC;IAElF,IAAIJ,KAAK,CAACK,IAAI,KAAK,OAAO,IAAIL,KAAK,CAACV,QAAQ,CAACgB,OAAO,CAAC,CAAC,EAAE;MACpD,KAAK,IAAIC,MAAM,GAAGT,UAAU,GAAG,IAAI,CAACN,OAAO,CAACO,UAAU,EAAEQ,MAAM,IAAI,CAAC,EAAEA,MAAM,EAAE,EAAE;QAC3E,IAAI,IAAI,CAACf,OAAO,CAACgB,UAAU,CAACD,MAAM,CAAC,KAAKrB,UAAU,EAAE;UAChDc,KAAK,CAACV,QAAQ,CAACmB,UAAU,CAAC;YACtBJ,IAAI,EAAE,YAAY;YAClBK,GAAG,EAAE,IAAI;YACTV,KAAK,EAAE;UACX,CAAC,CAAC;UACF;QACJ;MACJ;IACJ;IAEAV,QAAQ,CAACI,IAAI,CAACM,KAAK,CAAC;EACxB;EAEA,OAAOV,QAAQ;AACnB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}