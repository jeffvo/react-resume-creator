{"ast":null,"code":"import _defineProperty from \"/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldInitSpec from \"/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\n/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Browser as SupportedBrowser, resolveBuildId, detectBrowserPlatform, getInstalledBrowsers, uninstall } from '@puppeteer/browsers';\nimport { Puppeteer } from '../common/Puppeteer.js';\nimport { PUPPETEER_REVISIONS } from '../revisions.js';\nimport { ChromeLauncher } from './ChromeLauncher.js';\nimport { FirefoxLauncher } from './FirefoxLauncher.js';\n/**\n * Extends the main {@link Puppeteer} class with Node specific behaviour for\n * fetching and downloading browsers.\n *\n * If you're using Puppeteer in a Node environment, this is the class you'll get\n * when you run `require('puppeteer')` (or the equivalent ES `import`).\n *\n * @remarks\n * The most common method to use is {@link PuppeteerNode.launch | launch}, which\n * is used to launch and connect to a new browser instance.\n *\n * See {@link Puppeteer | the main Puppeteer class} for methods common to all\n * environments, such as {@link Puppeteer.connect}.\n *\n * @example\n * The following is a typical example of using Puppeteer to drive automation:\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n * Once you have created a `page` you have access to a large API to interact\n * with the page, navigate, or find certain elements in that page.\n * The {@link Page | `page` documentation} lists all the available methods.\n *\n * @public\n */\nvar _launcher = /*#__PURE__*/new WeakMap();\nvar _lastLaunchedProduct = /*#__PURE__*/new WeakMap();\nvar _launcher2 = /*#__PURE__*/new WeakMap();\nexport class PuppeteerNode extends Puppeteer {\n  /**\n   * @internal\n   */\n  constructor(settings) {\n    const {\n      configuration,\n      ...commonSettings\n    } = settings;\n    super(commonSettings);\n    /**\n     * @internal\n     */\n    _classPrivateFieldInitSpec(this, _launcher2, {\n      get: _get_launcher,\n      set: void 0\n    });\n    _classPrivateFieldInitSpec(this, _launcher, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _lastLaunchedProduct, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @internal\n     */\n    _defineProperty(this, \"defaultBrowserRevision\", void 0);\n    /**\n     * @internal\n     */\n    _defineProperty(this, \"configuration\", {});\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    switch (this.configuration.defaultProduct) {\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        break;\n      default:\n        this.configuration.defaultProduct = 'chrome';\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        break;\n    }\n    this.connect = this.connect.bind(this);\n    this.launch = this.launch.bind(this);\n    this.executablePath = this.executablePath.bind(this);\n    this.defaultArgs = this.defaultArgs.bind(this);\n    this.trimCache = this.trimCache.bind(this);\n  }\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n  connect(options) {\n    return super.connect(options);\n  }\n  /**\n   * Launches a browser instance with given arguments and options when\n   * specified.\n   *\n   * When using with `puppeteer-core`,\n   * {@link LaunchOptions | options.executablePath} or\n   * {@link LaunchOptions | options.channel} must be provided.\n   *\n   * @example\n   * You can use {@link LaunchOptions | options.ignoreDefaultArgs}\n   * to filter out `--mute-audio` from default arguments:\n   *\n   * ```ts\n   * const browser = await puppeteer.launch({\n   *   ignoreDefaultArgs: ['--mute-audio'],\n   * });\n   * ```\n   *\n   * @remarks\n   * Puppeteer can also be used to control the Chrome browser, but it works best\n   * with the version of Chrome for Testing downloaded by default.\n   * There is no guarantee it will work with any other version. If Google Chrome\n   * (rather than Chrome for Testing) is preferred, a\n   * {@link https://www.google.com/chrome/browser/canary.html | Chrome Canary}\n   * or\n   * {@link https://www.chromium.org/getting-involved/dev-channel | Dev Channel}\n   * build is suggested. See\n   * {@link https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/ | this article}\n   * for a description of the differences between Chromium and Chrome.\n   * {@link https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md | This article}\n   * describes some differences for Linux users. See\n   * {@link https://developer.chrome.com/blog/chrome-for-testing/ | this doc} for the description\n   * of Chrome for Testing.\n   *\n   * @param options - Options to configure launching behavior.\n   */\n  launch() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      product = this.defaultProduct\n    } = options;\n    _classPrivateFieldSet(this, _lastLaunchedProduct, product);\n    return _classPrivateFieldGet(this, _launcher2).launch(options);\n  }\n  /**\n   * The default executable path.\n   */\n  executablePath(channel) {\n    return _classPrivateFieldGet(this, _launcher2).executablePath(channel);\n  }\n  /**\n   * @internal\n   */\n  get browserRevision() {\n    var _ref, _classPrivateFieldGet2, _classPrivateFieldGet3;\n    return (_ref = (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _launcher)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.getActualBrowserRevision()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : this.configuration.browserRevision) !== null && _ref !== void 0 ? _ref : this.defaultBrowserRevision;\n  }\n  /**\n   * The default download path for puppeteer. For puppeteer-core, this\n   * code should never be called as it is never defined.\n   *\n   * @internal\n   */\n  get defaultDownloadPath() {\n    return this.configuration.cacheDirectory;\n  }\n  /**\n   * The name of the browser that was last launched.\n   */\n  get lastLaunchedProduct() {\n    var _classPrivateFieldGet4;\n    return (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _lastLaunchedProduct)) !== null && _classPrivateFieldGet4 !== void 0 ? _classPrivateFieldGet4 : this.defaultProduct;\n  }\n  /**\n   * The name of the browser that will be launched by default. For\n   * `puppeteer`, this is influenced by your configuration. Otherwise, it's\n   * `chrome`.\n   */\n  get defaultProduct() {\n    var _this$configuration$d;\n    return (_this$configuration$d = this.configuration.defaultProduct) !== null && _this$configuration$d !== void 0 ? _this$configuration$d : 'chrome';\n  }\n  /**\n   * @deprecated Do not use as this field as it does not take into account\n   * multiple browsers of different types. Use\n   * {@link PuppeteerNode.defaultProduct | defaultProduct} or\n   * {@link PuppeteerNode.lastLaunchedProduct | lastLaunchedProduct}.\n   *\n   * @returns The name of the browser that is under automation.\n   */\n  get product() {\n    return _classPrivateFieldGet(this, _launcher2).product;\n  }\n  /**\n   * @param options - Set of configurable options to set on the browser.\n   *\n   * @returns The default flags that Chromium will be launched with.\n   */\n  defaultArgs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _classPrivateFieldGet(this, _launcher2).defaultArgs(options);\n  }\n  /**\n   * Removes all non-current Firefox and Chrome binaries in the cache directory\n   * identified by the provided Puppeteer configuration. The current browser\n   * version is determined by resolving PUPPETEER_REVISIONS from Puppeteer\n   * unless `configuration.browserRevision` is provided.\n   *\n   * @remarks\n   *\n   * Note that the method does not check if any other Puppeteer versions\n   * installed on the host that use the same cache directory require the\n   * non-current binaries.\n   *\n   * @public\n   */\n  async trimCache() {\n    const platform = detectBrowserPlatform();\n    if (!platform) {\n      throw new Error('The current platform is not supported.');\n    }\n    const cacheDir = this.configuration.cacheDirectory;\n    const installedBrowsers = await getInstalledBrowsers({\n      cacheDir\n    });\n    const product = this.configuration.defaultProduct;\n    const puppeteerBrowsers = [{\n      product: 'chrome',\n      browser: SupportedBrowser.CHROME,\n      currentBuildId: ''\n    }, {\n      product: 'firefox',\n      browser: SupportedBrowser.FIREFOX,\n      currentBuildId: ''\n    }];\n    // Resolve current buildIds.\n    for (const item of puppeteerBrowsers) {\n      item.currentBuildId = await resolveBuildId(item.browser, platform, (product === item.product ? this.configuration.browserRevision : null) || PUPPETEER_REVISIONS[item.product]);\n    }\n    const currentBrowserBuilds = new Set(puppeteerBrowsers.map(browser => {\n      return \"\".concat(browser.browser, \"_\").concat(browser.currentBuildId);\n    }));\n    const currentBrowsers = new Set(puppeteerBrowsers.map(browser => {\n      return browser.browser;\n    }));\n    for (const installedBrowser of installedBrowsers) {\n      // Don't uninstall browsers that are not managed by Puppeteer yet.\n      if (!currentBrowsers.has(installedBrowser.browser)) {\n        continue;\n      }\n      // Keep the browser build used by the current Puppeteer installation.\n      if (currentBrowserBuilds.has(\"\".concat(installedBrowser.browser, \"_\").concat(installedBrowser.buildId))) {\n        continue;\n      }\n      await uninstall({\n        browser: installedBrowser.browser,\n        platform,\n        cacheDir,\n        buildId: installedBrowser.buildId\n      });\n    }\n  }\n}\nfunction _get_launcher() {\n  if (_classPrivateFieldGet(this, _launcher) && _classPrivateFieldGet(this, _launcher).product === this.lastLaunchedProduct) {\n    return _classPrivateFieldGet(this, _launcher);\n  }\n  switch (this.lastLaunchedProduct) {\n    case 'chrome':\n      this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n      _classPrivateFieldSet(this, _launcher, new ChromeLauncher(this));\n      break;\n    case 'firefox':\n      this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n      _classPrivateFieldSet(this, _launcher, new FirefoxLauncher(this));\n      break;\n    default:\n      throw new Error(\"Unknown product: \".concat(_classPrivateFieldGet(this, _lastLaunchedProduct)));\n  }\n  return _classPrivateFieldGet(this, _launcher);\n}","map":{"version":3,"names":["Browser","SupportedBrowser","resolveBuildId","detectBrowserPlatform","getInstalledBrowsers","uninstall","Puppeteer","PUPPETEER_REVISIONS","ChromeLauncher","FirefoxLauncher","_launcher","WeakMap","_lastLaunchedProduct","_launcher2","PuppeteerNode","constructor","settings","configuration","commonSettings","_classPrivateFieldInitSpec","get","_get_launcher","set","writable","value","_defineProperty","defaultProduct","defaultBrowserRevision","firefox","chrome","connect","bind","launch","executablePath","defaultArgs","trimCache","options","arguments","length","undefined","product","_classPrivateFieldSet","_classPrivateFieldGet","channel","browserRevision","_ref","_classPrivateFieldGet2","_classPrivateFieldGet3","getActualBrowserRevision","defaultDownloadPath","cacheDirectory","lastLaunchedProduct","_classPrivateFieldGet4","_this$configuration$d","platform","Error","cacheDir","installedBrowsers","puppeteerBrowsers","browser","CHROME","currentBuildId","FIREFOX","item","currentBrowserBuilds","Set","map","concat","currentBrowsers","installedBrowser","has","buildId"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/puppeteer-core/src/node/PuppeteerNode.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Browser as SupportedBrowser,\n  resolveBuildId,\n  detectBrowserPlatform,\n  getInstalledBrowsers,\n  uninstall,\n} from '@puppeteer/browsers';\n\nimport type {Browser} from '../api/Browser.js';\nimport type {Configuration} from '../common/Configuration.js';\nimport type {\n  ConnectOptions,\n  BrowserConnectOptions,\n} from '../common/ConnectOptions.js';\nimport type {Product} from '../common/Product.js';\nimport {type CommonPuppeteerSettings, Puppeteer} from '../common/Puppeteer.js';\nimport {PUPPETEER_REVISIONS} from '../revisions.js';\n\nimport {ChromeLauncher} from './ChromeLauncher.js';\nimport {FirefoxLauncher} from './FirefoxLauncher.js';\nimport type {\n  BrowserLaunchArgumentOptions,\n  ChromeReleaseChannel,\n  LaunchOptions,\n} from './LaunchOptions.js';\nimport type {ProductLauncher} from './ProductLauncher.js';\n\n/**\n * @public\n */\nexport interface PuppeteerLaunchOptions\n  extends LaunchOptions,\n    BrowserLaunchArgumentOptions,\n    BrowserConnectOptions {\n  product?: Product;\n  extraPrefsFirefox?: Record<string, unknown>;\n}\n\n/**\n * Extends the main {@link Puppeteer} class with Node specific behaviour for\n * fetching and downloading browsers.\n *\n * If you're using Puppeteer in a Node environment, this is the class you'll get\n * when you run `require('puppeteer')` (or the equivalent ES `import`).\n *\n * @remarks\n * The most common method to use is {@link PuppeteerNode.launch | launch}, which\n * is used to launch and connect to a new browser instance.\n *\n * See {@link Puppeteer | the main Puppeteer class} for methods common to all\n * environments, such as {@link Puppeteer.connect}.\n *\n * @example\n * The following is a typical example of using Puppeteer to drive automation:\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n * Once you have created a `page` you have access to a large API to interact\n * with the page, navigate, or find certain elements in that page.\n * The {@link Page | `page` documentation} lists all the available methods.\n *\n * @public\n */\nexport class PuppeteerNode extends Puppeteer {\n  #_launcher?: ProductLauncher;\n  #lastLaunchedProduct?: Product;\n\n  /**\n   * @internal\n   */\n  defaultBrowserRevision: string;\n\n  /**\n   * @internal\n   */\n  configuration: Configuration = {};\n\n  /**\n   * @internal\n   */\n  constructor(\n    settings: {\n      configuration?: Configuration;\n    } & CommonPuppeteerSettings\n  ) {\n    const {configuration, ...commonSettings} = settings;\n    super(commonSettings);\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    switch (this.configuration.defaultProduct) {\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        break;\n      default:\n        this.configuration.defaultProduct = 'chrome';\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        break;\n    }\n\n    this.connect = this.connect.bind(this);\n    this.launch = this.launch.bind(this);\n    this.executablePath = this.executablePath.bind(this);\n    this.defaultArgs = this.defaultArgs.bind(this);\n    this.trimCache = this.trimCache.bind(this);\n  }\n\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n  override connect(options: ConnectOptions): Promise<Browser> {\n    return super.connect(options);\n  }\n\n  /**\n   * Launches a browser instance with given arguments and options when\n   * specified.\n   *\n   * When using with `puppeteer-core`,\n   * {@link LaunchOptions | options.executablePath} or\n   * {@link LaunchOptions | options.channel} must be provided.\n   *\n   * @example\n   * You can use {@link LaunchOptions | options.ignoreDefaultArgs}\n   * to filter out `--mute-audio` from default arguments:\n   *\n   * ```ts\n   * const browser = await puppeteer.launch({\n   *   ignoreDefaultArgs: ['--mute-audio'],\n   * });\n   * ```\n   *\n   * @remarks\n   * Puppeteer can also be used to control the Chrome browser, but it works best\n   * with the version of Chrome for Testing downloaded by default.\n   * There is no guarantee it will work with any other version. If Google Chrome\n   * (rather than Chrome for Testing) is preferred, a\n   * {@link https://www.google.com/chrome/browser/canary.html | Chrome Canary}\n   * or\n   * {@link https://www.chromium.org/getting-involved/dev-channel | Dev Channel}\n   * build is suggested. See\n   * {@link https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/ | this article}\n   * for a description of the differences between Chromium and Chrome.\n   * {@link https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md | This article}\n   * describes some differences for Linux users. See\n   * {@link https://developer.chrome.com/blog/chrome-for-testing/ | this doc} for the description\n   * of Chrome for Testing.\n   *\n   * @param options - Options to configure launching behavior.\n   */\n  launch(options: PuppeteerLaunchOptions = {}): Promise<Browser> {\n    const {product = this.defaultProduct} = options;\n    this.#lastLaunchedProduct = product;\n    return this.#launcher.launch(options);\n  }\n\n  /**\n   * @internal\n   */\n  get #launcher(): ProductLauncher {\n    if (\n      this.#_launcher &&\n      this.#_launcher.product === this.lastLaunchedProduct\n    ) {\n      return this.#_launcher;\n    }\n    switch (this.lastLaunchedProduct) {\n      case 'chrome':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        this.#_launcher = new ChromeLauncher(this);\n        break;\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        this.#_launcher = new FirefoxLauncher(this);\n        break;\n      default:\n        throw new Error(`Unknown product: ${this.#lastLaunchedProduct}`);\n    }\n    return this.#_launcher;\n  }\n\n  /**\n   * The default executable path.\n   */\n  executablePath(channel?: ChromeReleaseChannel): string {\n    return this.#launcher.executablePath(channel);\n  }\n\n  /**\n   * @internal\n   */\n  get browserRevision(): string {\n    return (\n      this.#_launcher?.getActualBrowserRevision() ??\n      this.configuration.browserRevision ??\n      this.defaultBrowserRevision!\n    );\n  }\n\n  /**\n   * The default download path for puppeteer. For puppeteer-core, this\n   * code should never be called as it is never defined.\n   *\n   * @internal\n   */\n  get defaultDownloadPath(): string | undefined {\n    return this.configuration.cacheDirectory;\n  }\n\n  /**\n   * The name of the browser that was last launched.\n   */\n  get lastLaunchedProduct(): Product {\n    return this.#lastLaunchedProduct ?? this.defaultProduct;\n  }\n\n  /**\n   * The name of the browser that will be launched by default. For\n   * `puppeteer`, this is influenced by your configuration. Otherwise, it's\n   * `chrome`.\n   */\n  get defaultProduct(): Product {\n    return this.configuration.defaultProduct ?? 'chrome';\n  }\n\n  /**\n   * @deprecated Do not use as this field as it does not take into account\n   * multiple browsers of different types. Use\n   * {@link PuppeteerNode.defaultProduct | defaultProduct} or\n   * {@link PuppeteerNode.lastLaunchedProduct | lastLaunchedProduct}.\n   *\n   * @returns The name of the browser that is under automation.\n   */\n  get product(): string {\n    return this.#launcher.product;\n  }\n\n  /**\n   * @param options - Set of configurable options to set on the browser.\n   *\n   * @returns The default flags that Chromium will be launched with.\n   */\n  defaultArgs(options: BrowserLaunchArgumentOptions = {}): string[] {\n    return this.#launcher.defaultArgs(options);\n  }\n\n  /**\n   * Removes all non-current Firefox and Chrome binaries in the cache directory\n   * identified by the provided Puppeteer configuration. The current browser\n   * version is determined by resolving PUPPETEER_REVISIONS from Puppeteer\n   * unless `configuration.browserRevision` is provided.\n   *\n   * @remarks\n   *\n   * Note that the method does not check if any other Puppeteer versions\n   * installed on the host that use the same cache directory require the\n   * non-current binaries.\n   *\n   * @public\n   */\n  async trimCache(): Promise<void> {\n    const platform = detectBrowserPlatform();\n    if (!platform) {\n      throw new Error('The current platform is not supported.');\n    }\n\n    const cacheDir = this.configuration.cacheDirectory!;\n    const installedBrowsers = await getInstalledBrowsers({\n      cacheDir,\n    });\n\n    const product = this.configuration.defaultProduct!;\n\n    const puppeteerBrowsers: Array<{\n      product: Product;\n      browser: SupportedBrowser;\n      currentBuildId: string;\n    }> = [\n      {\n        product: 'chrome',\n        browser: SupportedBrowser.CHROME,\n        currentBuildId: '',\n      },\n      {\n        product: 'firefox',\n        browser: SupportedBrowser.FIREFOX,\n        currentBuildId: '',\n      },\n    ];\n\n    // Resolve current buildIds.\n    for (const item of puppeteerBrowsers) {\n      item.currentBuildId = await resolveBuildId(\n        item.browser,\n        platform,\n        (product === item.product\n          ? this.configuration.browserRevision\n          : null) || PUPPETEER_REVISIONS[item.product]\n      );\n    }\n\n    const currentBrowserBuilds = new Set(\n      puppeteerBrowsers.map(browser => {\n        return `${browser.browser}_${browser.currentBuildId}`;\n      })\n    );\n\n    const currentBrowsers = new Set(\n      puppeteerBrowsers.map(browser => {\n        return browser.browser;\n      })\n    );\n\n    for (const installedBrowser of installedBrowsers) {\n      // Don't uninstall browsers that are not managed by Puppeteer yet.\n      if (!currentBrowsers.has(installedBrowser.browser)) {\n        continue;\n      }\n      // Keep the browser build used by the current Puppeteer installation.\n      if (\n        currentBrowserBuilds.has(\n          `${installedBrowser.browser}_${installedBrowser.buildId}`\n        )\n      ) {\n        continue;\n      }\n\n      await uninstall({\n        browser: installedBrowser.browser,\n        platform,\n        cacheDir,\n        buildId: installedBrowser.buildId,\n      });\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}