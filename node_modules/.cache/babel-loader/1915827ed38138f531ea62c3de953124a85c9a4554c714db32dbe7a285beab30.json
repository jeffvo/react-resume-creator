{"ast":null,"code":"var List = require('../common/List');\nvar SyntaxError = require('../common/SyntaxError');\nvar TokenStream = require('../common/TokenStream');\nvar Lexer = require('../lexer/Lexer');\nvar definitionSyntax = require('../definition-syntax');\nvar tokenize = require('../tokenizer');\nvar createParser = require('../parser/create');\nvar createGenerator = require('../generator/create');\nvar createConvertor = require('../convertor/create');\nvar createWalker = require('../walker/create');\nvar clone = require('../utils/clone');\nvar names = require('../utils/names');\nvar mix = require('./config/mix');\nfunction createSyntax(config) {\n  var parse = createParser(config);\n  var walk = createWalker(config);\n  var generate = createGenerator(config);\n  var convert = createConvertor(walk);\n  var syntax = {\n    List: List,\n    SyntaxError: SyntaxError,\n    TokenStream: TokenStream,\n    Lexer: Lexer,\n    vendorPrefix: names.vendorPrefix,\n    keyword: names.keyword,\n    property: names.property,\n    isCustomProperty: names.isCustomProperty,\n    definitionSyntax: definitionSyntax,\n    lexer: null,\n    createLexer: function (config) {\n      return new Lexer(config, syntax, syntax.lexer.structure);\n    },\n    tokenize: tokenize,\n    parse: parse,\n    walk: walk,\n    generate: generate,\n    find: walk.find,\n    findLast: walk.findLast,\n    findAll: walk.findAll,\n    clone: clone,\n    fromPlainObject: convert.fromPlainObject,\n    toPlainObject: convert.toPlainObject,\n    createSyntax: function (config) {\n      return createSyntax(mix({}, config));\n    },\n    fork: function (extension) {\n      var base = mix({}, config); // copy of config\n      return createSyntax(typeof extension === 'function' ? extension(base, Object.assign) : mix(base, extension));\n    }\n  };\n  syntax.lexer = new Lexer({\n    generic: true,\n    types: config.types,\n    atrules: config.atrules,\n    properties: config.properties,\n    node: config.node\n  }, syntax);\n  return syntax;\n}\n;\nexports.create = function (config) {\n  return createSyntax(mix({}, config));\n};","map":{"version":3,"names":["List","require","SyntaxError","TokenStream","Lexer","definitionSyntax","tokenize","createParser","createGenerator","createConvertor","createWalker","clone","names","mix","createSyntax","config","parse","walk","generate","convert","syntax","vendorPrefix","keyword","property","isCustomProperty","lexer","createLexer","structure","find","findLast","findAll","fromPlainObject","toPlainObject","fork","extension","base","Object","assign","generic","types","atrules","properties","node","exports","create"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/create.js"],"sourcesContent":["var List = require('../common/List');\nvar SyntaxError = require('../common/SyntaxError');\nvar TokenStream = require('../common/TokenStream');\nvar Lexer = require('../lexer/Lexer');\nvar definitionSyntax = require('../definition-syntax');\nvar tokenize = require('../tokenizer');\nvar createParser = require('../parser/create');\nvar createGenerator = require('../generator/create');\nvar createConvertor = require('../convertor/create');\nvar createWalker = require('../walker/create');\nvar clone = require('../utils/clone');\nvar names = require('../utils/names');\nvar mix = require('./config/mix');\n\nfunction createSyntax(config) {\n    var parse = createParser(config);\n    var walk = createWalker(config);\n    var generate = createGenerator(config);\n    var convert = createConvertor(walk);\n\n    var syntax = {\n        List: List,\n        SyntaxError: SyntaxError,\n        TokenStream: TokenStream,\n        Lexer: Lexer,\n\n        vendorPrefix: names.vendorPrefix,\n        keyword: names.keyword,\n        property: names.property,\n        isCustomProperty: names.isCustomProperty,\n\n        definitionSyntax: definitionSyntax,\n        lexer: null,\n        createLexer: function(config) {\n            return new Lexer(config, syntax, syntax.lexer.structure);\n        },\n\n        tokenize: tokenize,\n        parse: parse,\n        walk: walk,\n        generate: generate,\n\n        find: walk.find,\n        findLast: walk.findLast,\n        findAll: walk.findAll,\n\n        clone: clone,\n        fromPlainObject: convert.fromPlainObject,\n        toPlainObject: convert.toPlainObject,\n\n        createSyntax: function(config) {\n            return createSyntax(mix({}, config));\n        },\n        fork: function(extension) {\n            var base = mix({}, config); // copy of config\n            return createSyntax(\n                typeof extension === 'function'\n                    ? extension(base, Object.assign)\n                    : mix(base, extension)\n            );\n        }\n    };\n\n    syntax.lexer = new Lexer({\n        generic: true,\n        types: config.types,\n        atrules: config.atrules,\n        properties: config.properties,\n        node: config.node\n    }, syntax);\n\n    return syntax;\n};\n\nexports.create = function(config) {\n    return createSyntax(mix({}, config));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}