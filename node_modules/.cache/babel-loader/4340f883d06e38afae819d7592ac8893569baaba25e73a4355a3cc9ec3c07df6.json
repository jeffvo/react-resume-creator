{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CDPSessionEvent } from '../api/CDPSession.js';\nimport { EventEmitter, EventSubscription } from '../common/EventEmitter.js';\nimport { NetworkManagerEvent } from '../common/NetworkManagerEvents.js';\nimport { debugError, isString } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { DisposableStack } from '../util/disposable.js';\nimport { CdpHTTPRequest } from './HTTPRequest.js';\nimport { CdpHTTPResponse } from './HTTPResponse.js';\nimport { NetworkEventManager } from './NetworkEventManager.js';\n/**\n * @internal\n */\nexport class NetworkManager extends EventEmitter {\n  #ignoreHTTPSErrors;\n  #frameManager;\n  #networkEventManager = new NetworkEventManager();\n  #extraHTTPHeaders;\n  #credentials;\n  #attemptedAuthentications = new Set();\n  #userRequestInterceptionEnabled = false;\n  #protocolRequestInterceptionEnabled = false;\n  #userCacheDisabled;\n  #emulatedNetworkConditions;\n  #userAgent;\n  #userAgentMetadata;\n  #handlers = [['Fetch.requestPaused', this.#onRequestPaused], ['Fetch.authRequired', this.#onAuthRequired], ['Network.requestWillBeSent', this.#onRequestWillBeSent], ['Network.requestServedFromCache', this.#onRequestServedFromCache], ['Network.responseReceived', this.#onResponseReceived], ['Network.loadingFinished', this.#onLoadingFinished], ['Network.loadingFailed', this.#onLoadingFailed], ['Network.responseReceivedExtraInfo', this.#onResponseReceivedExtraInfo], [CDPSessionEvent.Disconnected, this.#removeClient]];\n  #clients = new Map();\n  constructor(ignoreHTTPSErrors, frameManager) {\n    super();\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#frameManager = frameManager;\n  }\n  async addClient(client) {\n    if (this.#clients.has(client)) {\n      return;\n    }\n    const subscriptions = new DisposableStack();\n    this.#clients.set(client, subscriptions);\n    for (const [event, handler] of this.#handlers) {\n      subscriptions.use(\n      // TODO: Remove any here.\n      new EventSubscription(client, event, arg => {\n        return handler.bind(this)(client, arg);\n      }));\n    }\n    await Promise.all([this.#ignoreHTTPSErrors ? client.send('Security.setIgnoreCertificateErrors', {\n      ignore: true\n    }) : null, client.send('Network.enable'), this.#applyExtraHTTPHeaders(client), this.#applyNetworkConditions(client), this.#applyProtocolCacheDisabled(client), this.#applyProtocolRequestInterception(client), this.#applyUserAgent(client)]);\n  }\n  async #removeClient(client) {\n    this.#clients.get(client)?.dispose();\n    this.#clients.delete(client);\n  }\n  async authenticate(credentials) {\n    this.#credentials = credentials;\n    const enabled = this.#userRequestInterceptionEnabled || !!this.#credentials;\n    if (enabled === this.#protocolRequestInterceptionEnabled) {\n      return;\n    }\n    this.#protocolRequestInterceptionEnabled = enabled;\n    await this.#applyToAllClients(this.#applyProtocolRequestInterception.bind(this));\n  }\n  async setExtraHTTPHeaders(extraHTTPHeaders) {\n    this.#extraHTTPHeaders = {};\n    for (const key of Object.keys(extraHTTPHeaders)) {\n      const value = extraHTTPHeaders[key];\n      assert(isString(value), `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n      this.#extraHTTPHeaders[key.toLowerCase()] = value;\n    }\n    await this.#applyToAllClients(this.#applyExtraHTTPHeaders.bind(this));\n  }\n  async #applyExtraHTTPHeaders(client) {\n    if (this.#extraHTTPHeaders === undefined) {\n      return;\n    }\n    await client.send('Network.setExtraHTTPHeaders', {\n      headers: this.#extraHTTPHeaders\n    });\n  }\n  extraHTTPHeaders() {\n    return Object.assign({}, this.#extraHTTPHeaders);\n  }\n  inFlightRequestsCount() {\n    return this.#networkEventManager.inFlightRequestsCount();\n  }\n  async setOfflineMode(value) {\n    if (!this.#emulatedNetworkConditions) {\n      this.#emulatedNetworkConditions = {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0\n      };\n    }\n    this.#emulatedNetworkConditions.offline = value;\n    await this.#applyToAllClients(this.#applyNetworkConditions.bind(this));\n  }\n  async emulateNetworkConditions(networkConditions) {\n    if (!this.#emulatedNetworkConditions) {\n      this.#emulatedNetworkConditions = {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0\n      };\n    }\n    this.#emulatedNetworkConditions.upload = networkConditions ? networkConditions.upload : -1;\n    this.#emulatedNetworkConditions.download = networkConditions ? networkConditions.download : -1;\n    this.#emulatedNetworkConditions.latency = networkConditions ? networkConditions.latency : 0;\n    await this.#applyToAllClients(this.#applyNetworkConditions.bind(this));\n  }\n  async #applyToAllClients(fn) {\n    await Promise.all(Array.from(this.#clients.keys()).map(client => {\n      return fn(client);\n    }));\n  }\n  async #applyNetworkConditions(client) {\n    if (this.#emulatedNetworkConditions === undefined) {\n      return;\n    }\n    await client.send('Network.emulateNetworkConditions', {\n      offline: this.#emulatedNetworkConditions.offline,\n      latency: this.#emulatedNetworkConditions.latency,\n      uploadThroughput: this.#emulatedNetworkConditions.upload,\n      downloadThroughput: this.#emulatedNetworkConditions.download\n    });\n  }\n  async setUserAgent(userAgent, userAgentMetadata) {\n    this.#userAgent = userAgent;\n    this.#userAgentMetadata = userAgentMetadata;\n    await this.#applyToAllClients(this.#applyUserAgent.bind(this));\n  }\n  async #applyUserAgent(client) {\n    if (this.#userAgent === undefined) {\n      return;\n    }\n    await client.send('Network.setUserAgentOverride', {\n      userAgent: this.#userAgent,\n      userAgentMetadata: this.#userAgentMetadata\n    });\n  }\n  async setCacheEnabled(enabled) {\n    this.#userCacheDisabled = !enabled;\n    await this.#applyToAllClients(this.#applyProtocolCacheDisabled.bind(this));\n  }\n  async setRequestInterception(value) {\n    this.#userRequestInterceptionEnabled = value;\n    const enabled = this.#userRequestInterceptionEnabled || !!this.#credentials;\n    if (enabled === this.#protocolRequestInterceptionEnabled) {\n      return;\n    }\n    this.#protocolRequestInterceptionEnabled = enabled;\n    await this.#applyToAllClients(this.#applyProtocolRequestInterception.bind(this));\n  }\n  async #applyProtocolRequestInterception(client) {\n    if (this.#userCacheDisabled === undefined) {\n      this.#userCacheDisabled = false;\n    }\n    if (this.#protocolRequestInterceptionEnabled) {\n      await Promise.all([this.#applyProtocolCacheDisabled(client), client.send('Fetch.enable', {\n        handleAuthRequests: true,\n        patterns: [{\n          urlPattern: '*'\n        }]\n      })]);\n    } else {\n      await Promise.all([this.#applyProtocolCacheDisabled(client), client.send('Fetch.disable')]);\n    }\n  }\n  async #applyProtocolCacheDisabled(client) {\n    if (this.#userCacheDisabled === undefined) {\n      return;\n    }\n    await client.send('Network.setCacheDisabled', {\n      cacheDisabled: this.#userCacheDisabled\n    });\n  }\n  #onRequestWillBeSent(client, event) {\n    // Request interception doesn't happen for data URLs with Network Service.\n    if (this.#userRequestInterceptionEnabled && !event.request.url.startsWith('data:')) {\n      const {\n        requestId: networkRequestId\n      } = event;\n      this.#networkEventManager.storeRequestWillBeSent(networkRequestId, event);\n      /**\n       * CDP may have sent a Fetch.requestPaused event already. Check for it.\n       */\n      const requestPausedEvent = this.#networkEventManager.getRequestPaused(networkRequestId);\n      if (requestPausedEvent) {\n        const {\n          requestId: fetchRequestId\n        } = requestPausedEvent;\n        this.#patchRequestEventHeaders(event, requestPausedEvent);\n        this.#onRequest(client, event, fetchRequestId);\n        this.#networkEventManager.forgetRequestPaused(networkRequestId);\n      }\n      return;\n    }\n    this.#onRequest(client, event, undefined);\n  }\n  #onAuthRequired(client, event) {\n    let response = 'Default';\n    if (this.#attemptedAuthentications.has(event.requestId)) {\n      response = 'CancelAuth';\n    } else if (this.#credentials) {\n      response = 'ProvideCredentials';\n      this.#attemptedAuthentications.add(event.requestId);\n    }\n    const {\n      username,\n      password\n    } = this.#credentials || {\n      username: undefined,\n      password: undefined\n    };\n    client.send('Fetch.continueWithAuth', {\n      requestId: event.requestId,\n      authChallengeResponse: {\n        response,\n        username,\n        password\n      }\n    }).catch(debugError);\n  }\n  /**\n   * CDP may send a Fetch.requestPaused without or before a\n   * Network.requestWillBeSent\n   *\n   * CDP may send multiple Fetch.requestPaused\n   * for the same Network.requestWillBeSent.\n   */\n  #onRequestPaused(client, event) {\n    if (!this.#userRequestInterceptionEnabled && this.#protocolRequestInterceptionEnabled) {\n      client.send('Fetch.continueRequest', {\n        requestId: event.requestId\n      }).catch(debugError);\n    }\n    const {\n      networkId: networkRequestId,\n      requestId: fetchRequestId\n    } = event;\n    if (!networkRequestId) {\n      this.#onRequestWithoutNetworkInstrumentation(client, event);\n      return;\n    }\n    const requestWillBeSentEvent = (() => {\n      const requestWillBeSentEvent = this.#networkEventManager.getRequestWillBeSent(networkRequestId);\n      // redirect requests have the same `requestId`,\n      if (requestWillBeSentEvent && (requestWillBeSentEvent.request.url !== event.request.url || requestWillBeSentEvent.request.method !== event.request.method)) {\n        this.#networkEventManager.forgetRequestWillBeSent(networkRequestId);\n        return;\n      }\n      return requestWillBeSentEvent;\n    })();\n    if (requestWillBeSentEvent) {\n      this.#patchRequestEventHeaders(requestWillBeSentEvent, event);\n      this.#onRequest(client, requestWillBeSentEvent, fetchRequestId);\n    } else {\n      this.#networkEventManager.storeRequestPaused(networkRequestId, event);\n    }\n  }\n  #patchRequestEventHeaders(requestWillBeSentEvent, requestPausedEvent) {\n    requestWillBeSentEvent.request.headers = {\n      ...requestWillBeSentEvent.request.headers,\n      // includes extra headers, like: Accept, Origin\n      ...requestPausedEvent.request.headers\n    };\n  }\n  #onRequestWithoutNetworkInstrumentation(client, event) {\n    // If an event has no networkId it should not have any network events. We\n    // still want to dispatch it for the interception by the user.\n    const frame = event.frameId ? this.#frameManager.frame(event.frameId) : null;\n    const request = new CdpHTTPRequest(client, frame, event.requestId, this.#userRequestInterceptionEnabled, event, []);\n    this.emit(NetworkManagerEvent.Request, request);\n    void request.finalizeInterceptions();\n  }\n  #onRequest(client, event, fetchRequestId) {\n    let redirectChain = [];\n    if (event.redirectResponse) {\n      // We want to emit a response and requestfinished for the\n      // redirectResponse, but we can't do so unless we have a\n      // responseExtraInfo ready to pair it up with. If we don't have any\n      // responseExtraInfos saved in our queue, they we have to wait until\n      // the next one to emit response and requestfinished, *and* we should\n      // also wait to emit this Request too because it should come after the\n      // response/requestfinished.\n      let redirectResponseExtraInfo = null;\n      if (event.redirectHasExtraInfo) {\n        redirectResponseExtraInfo = this.#networkEventManager.responseExtraInfo(event.requestId).shift();\n        if (!redirectResponseExtraInfo) {\n          this.#networkEventManager.queueRedirectInfo(event.requestId, {\n            event,\n            fetchRequestId\n          });\n          return;\n        }\n      }\n      const request = this.#networkEventManager.getRequest(event.requestId);\n      // If we connect late to the target, we could have missed the\n      // requestWillBeSent event.\n      if (request) {\n        this.#handleRequestRedirect(client, request, event.redirectResponse, redirectResponseExtraInfo);\n        redirectChain = request._redirectChain;\n      }\n    }\n    const frame = event.frameId ? this.#frameManager.frame(event.frameId) : null;\n    const request = new CdpHTTPRequest(client, frame, fetchRequestId, this.#userRequestInterceptionEnabled, event, redirectChain);\n    this.#networkEventManager.storeRequest(event.requestId, request);\n    this.emit(NetworkManagerEvent.Request, request);\n    void request.finalizeInterceptions();\n  }\n  #onRequestServedFromCache(_client, event) {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    if (request) {\n      request._fromMemoryCache = true;\n    }\n    this.emit(NetworkManagerEvent.RequestServedFromCache, request);\n  }\n  #handleRequestRedirect(client, request, responsePayload, extraInfo) {\n    const response = new CdpHTTPResponse(client, request, responsePayload, extraInfo);\n    request._response = response;\n    request._redirectChain.push(request);\n    response._resolveBody(new Error('Response body is unavailable for redirect responses'));\n    this.#forgetRequest(request, false);\n    this.emit(NetworkManagerEvent.Response, response);\n    this.emit(NetworkManagerEvent.RequestFinished, request);\n  }\n  #emitResponseEvent(client, responseReceived, extraInfo) {\n    const request = this.#networkEventManager.getRequest(responseReceived.requestId);\n    // FileUpload sends a response without a matching request.\n    if (!request) {\n      return;\n    }\n    const extraInfos = this.#networkEventManager.responseExtraInfo(responseReceived.requestId);\n    if (extraInfos.length) {\n      debugError(new Error('Unexpected extraInfo events for request ' + responseReceived.requestId));\n    }\n    // Chromium sends wrong extraInfo events for responses served from cache.\n    // See https://github.com/puppeteer/puppeteer/issues/9965 and\n    // https://crbug.com/1340398.\n    if (responseReceived.response.fromDiskCache) {\n      extraInfo = null;\n    }\n    const response = new CdpHTTPResponse(client, request, responseReceived.response, extraInfo);\n    request._response = response;\n    this.emit(NetworkManagerEvent.Response, response);\n  }\n  #onResponseReceived(client, event) {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    let extraInfo = null;\n    if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n      extraInfo = this.#networkEventManager.responseExtraInfo(event.requestId).shift();\n      if (!extraInfo) {\n        // Wait until we get the corresponding ExtraInfo event.\n        this.#networkEventManager.queueEventGroup(event.requestId, {\n          responseReceivedEvent: event\n        });\n        return;\n      }\n    }\n    this.#emitResponseEvent(client, event, extraInfo);\n  }\n  #onResponseReceivedExtraInfo(client, event) {\n    // We may have skipped a redirect response/request pair due to waiting for\n    // this ExtraInfo event. If so, continue that work now that we have the\n    // request.\n    const redirectInfo = this.#networkEventManager.takeQueuedRedirectInfo(event.requestId);\n    if (redirectInfo) {\n      this.#networkEventManager.responseExtraInfo(event.requestId).push(event);\n      this.#onRequest(client, redirectInfo.event, redirectInfo.fetchRequestId);\n      return;\n    }\n    // We may have skipped response and loading events because we didn't have\n    // this ExtraInfo event yet. If so, emit those events now.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(event.requestId);\n    if (queuedEvents) {\n      this.#networkEventManager.forgetQueuedEventGroup(event.requestId);\n      this.#emitResponseEvent(client, queuedEvents.responseReceivedEvent, event);\n      if (queuedEvents.loadingFinishedEvent) {\n        this.#emitLoadingFinished(queuedEvents.loadingFinishedEvent);\n      }\n      if (queuedEvents.loadingFailedEvent) {\n        this.#emitLoadingFailed(queuedEvents.loadingFailedEvent);\n      }\n      return;\n    }\n    // Wait until we get another event that can use this ExtraInfo event.\n    this.#networkEventManager.responseExtraInfo(event.requestId).push(event);\n  }\n  #forgetRequest(request, events) {\n    const requestId = request.id;\n    const interceptionId = request._interceptionId;\n    this.#networkEventManager.forgetRequest(requestId);\n    interceptionId !== undefined && this.#attemptedAuthentications.delete(interceptionId);\n    if (events) {\n      this.#networkEventManager.forget(requestId);\n    }\n  }\n  #onLoadingFinished(_client, event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(event.requestId);\n    if (queuedEvents) {\n      queuedEvents.loadingFinishedEvent = event;\n    } else {\n      this.#emitLoadingFinished(event);\n    }\n  }\n  #emitLoadingFinished(event) {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n      return;\n    }\n    // Under certain conditions we never get the Network.responseReceived\n    // event from protocol. @see https://crbug.com/883475\n    if (request.response()) {\n      request.response()?._resolveBody();\n    }\n    this.#forgetRequest(request, true);\n    this.emit(NetworkManagerEvent.RequestFinished, request);\n  }\n  #onLoadingFailed(_client, event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(event.requestId);\n    if (queuedEvents) {\n      queuedEvents.loadingFailedEvent = event;\n    } else {\n      this.#emitLoadingFailed(event);\n    }\n  }\n  #emitLoadingFailed(event) {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n      return;\n    }\n    request._failureText = event.errorText;\n    const response = request.response();\n    if (response) {\n      response._resolveBody();\n    }\n    this.#forgetRequest(request, true);\n    this.emit(NetworkManagerEvent.RequestFailed, request);\n  }\n}","map":{"version":3,"names":["CDPSessionEvent","EventEmitter","EventSubscription","NetworkManagerEvent","debugError","isString","assert","DisposableStack","CdpHTTPRequest","CdpHTTPResponse","NetworkEventManager","NetworkManager","ignoreHTTPSErrors","frameManager","networkEventManager","extraHTTPHeaders","credentials","attemptedAuthentications","Set","userRequestInterceptionEnabled","protocolRequestInterceptionEnabled","userCacheDisabled","emulatedNetworkConditions","userAgent","userAgentMetadata","handlers","onRequestPaused","onAuthRequired","onRequestWillBeSent","onRequestServedFromCache","onResponseReceived","onLoadingFinished","onLoadingFailed","onResponseReceivedExtraInfo","Disconnected","removeClient","clients","Map","constructor","addClient","client","has","subscriptions","set","event","handler","use","arg","bind","Promise","all","send","ignore","applyExtraHTTPHeaders","applyNetworkConditions","applyProtocolCacheDisabled","applyProtocolRequestInterception","applyUserAgent","#removeClient","get","dispose","delete","authenticate","enabled","applyToAllClients","setExtraHTTPHeaders","key","Object","keys","value","toLowerCase","#applyExtraHTTPHeaders","undefined","headers","assign","inFlightRequestsCount","setOfflineMode","offline","upload","download","latency","emulateNetworkConditions","networkConditions","#applyToAllClients","fn","Array","from","map","#applyNetworkConditions","uploadThroughput","downloadThroughput","setUserAgent","#applyUserAgent","setCacheEnabled","setRequestInterception","#applyProtocolRequestInterception","handleAuthRequests","patterns","urlPattern","#applyProtocolCacheDisabled","cacheDisabled","#onRequestWillBeSent","request","url","startsWith","requestId","networkRequestId","storeRequestWillBeSent","requestPausedEvent","getRequestPaused","fetchRequestId","patchRequestEventHeaders","onRequest","forgetRequestPaused","#onAuthRequired","response","add","username","password","authChallengeResponse","catch","#onRequestPaused","networkId","onRequestWithoutNetworkInstrumentation","requestWillBeSentEvent","getRequestWillBeSent","method","forgetRequestWillBeSent","storeRequestPaused","#patchRequestEventHeaders","#onRequestWithoutNetworkInstrumentation","frame","frameId","emit","Request","finalizeInterceptions","#onRequest","redirectChain","redirectResponse","redirectResponseExtraInfo","redirectHasExtraInfo","responseExtraInfo","shift","queueRedirectInfo","getRequest","handleRequestRedirect","_redirectChain","storeRequest","#onRequestServedFromCache","_client","_fromMemoryCache","RequestServedFromCache","#handleRequestRedirect","responsePayload","extraInfo","_response","push","_resolveBody","Error","forgetRequest","Response","RequestFinished","emitResponseEvent","#emitResponseEvent","responseReceived","extraInfos","length","fromDiskCache","#onResponseReceived","hasExtraInfo","queueEventGroup","responseReceivedEvent","#onResponseReceivedExtraInfo","redirectInfo","takeQueuedRedirectInfo","queuedEvents","getQueuedEventGroup","forgetQueuedEventGroup","loadingFinishedEvent","emitLoadingFinished","loadingFailedEvent","emitLoadingFailed","#forgetRequest","events","id","interceptionId","_interceptionId","forget","#onLoadingFinished","#emitLoadingFinished","#onLoadingFailed","#emitLoadingFailed","_failureText","errorText","RequestFailed"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/puppeteer-core/src/cdp/NetworkManager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport {CDPSessionEvent, type CDPSession} from '../api/CDPSession.js';\nimport type {Frame} from '../api/Frame.js';\nimport {EventEmitter, EventSubscription} from '../common/EventEmitter.js';\nimport {\n  NetworkManagerEvent,\n  type NetworkManagerEvents,\n} from '../common/NetworkManagerEvents.js';\nimport {debugError, isString} from '../common/util.js';\nimport {assert} from '../util/assert.js';\nimport {DisposableStack} from '../util/disposable.js';\n\nimport {CdpHTTPRequest} from './HTTPRequest.js';\nimport {CdpHTTPResponse} from './HTTPResponse.js';\nimport {\n  NetworkEventManager,\n  type FetchRequestId,\n} from './NetworkEventManager.js';\n\n/**\n * @public\n */\nexport interface Credentials {\n  username: string;\n  password: string;\n}\n\n/**\n * @public\n */\nexport interface NetworkConditions {\n  /**\n   * Download speed (bytes/s)\n   */\n  download: number;\n  /**\n   * Upload speed (bytes/s)\n   */\n  upload: number;\n  /**\n   * Latency (ms)\n   */\n  latency: number;\n}\n\n/**\n * @public\n */\nexport interface InternalNetworkConditions extends NetworkConditions {\n  offline: boolean;\n}\n\n/**\n * @internal\n */\nexport interface FrameProvider {\n  frame(id: string): Frame | null;\n}\n\n/**\n * @internal\n */\nexport class NetworkManager extends EventEmitter<NetworkManagerEvents> {\n  #ignoreHTTPSErrors: boolean;\n  #frameManager: FrameProvider;\n  #networkEventManager = new NetworkEventManager();\n  #extraHTTPHeaders?: Record<string, string>;\n  #credentials?: Credentials;\n  #attemptedAuthentications = new Set<string>();\n  #userRequestInterceptionEnabled = false;\n  #protocolRequestInterceptionEnabled = false;\n  #userCacheDisabled?: boolean;\n  #emulatedNetworkConditions?: InternalNetworkConditions;\n  #userAgent?: string;\n  #userAgentMetadata?: Protocol.Emulation.UserAgentMetadata;\n\n  readonly #handlers = [\n    ['Fetch.requestPaused', this.#onRequestPaused],\n    ['Fetch.authRequired', this.#onAuthRequired],\n    ['Network.requestWillBeSent', this.#onRequestWillBeSent],\n    ['Network.requestServedFromCache', this.#onRequestServedFromCache],\n    ['Network.responseReceived', this.#onResponseReceived],\n    ['Network.loadingFinished', this.#onLoadingFinished],\n    ['Network.loadingFailed', this.#onLoadingFailed],\n    ['Network.responseReceivedExtraInfo', this.#onResponseReceivedExtraInfo],\n    [CDPSessionEvent.Disconnected, this.#removeClient],\n  ] as const;\n\n  #clients = new Map<CDPSession, DisposableStack>();\n\n  constructor(ignoreHTTPSErrors: boolean, frameManager: FrameProvider) {\n    super();\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#frameManager = frameManager;\n  }\n\n  async addClient(client: CDPSession): Promise<void> {\n    if (this.#clients.has(client)) {\n      return;\n    }\n    const subscriptions = new DisposableStack();\n    this.#clients.set(client, subscriptions);\n    for (const [event, handler] of this.#handlers) {\n      subscriptions.use(\n        // TODO: Remove any here.\n        new EventSubscription(client, event, (arg: any) => {\n          return handler.bind(this)(client, arg);\n        })\n      );\n    }\n    await Promise.all([\n      this.#ignoreHTTPSErrors\n        ? client.send('Security.setIgnoreCertificateErrors', {\n            ignore: true,\n          })\n        : null,\n      client.send('Network.enable'),\n      this.#applyExtraHTTPHeaders(client),\n      this.#applyNetworkConditions(client),\n      this.#applyProtocolCacheDisabled(client),\n      this.#applyProtocolRequestInterception(client),\n      this.#applyUserAgent(client),\n    ]);\n  }\n\n  async #removeClient(client: CDPSession) {\n    this.#clients.get(client)?.dispose();\n    this.#clients.delete(client);\n  }\n\n  async authenticate(credentials?: Credentials): Promise<void> {\n    this.#credentials = credentials;\n    const enabled = this.#userRequestInterceptionEnabled || !!this.#credentials;\n    if (enabled === this.#protocolRequestInterceptionEnabled) {\n      return;\n    }\n    this.#protocolRequestInterceptionEnabled = enabled;\n    await this.#applyToAllClients(\n      this.#applyProtocolRequestInterception.bind(this)\n    );\n  }\n\n  async setExtraHTTPHeaders(\n    extraHTTPHeaders: Record<string, string>\n  ): Promise<void> {\n    this.#extraHTTPHeaders = {};\n    for (const key of Object.keys(extraHTTPHeaders)) {\n      const value = extraHTTPHeaders[key];\n      assert(\n        isString(value),\n        `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`\n      );\n      this.#extraHTTPHeaders[key.toLowerCase()] = value;\n    }\n\n    await this.#applyToAllClients(this.#applyExtraHTTPHeaders.bind(this));\n  }\n\n  async #applyExtraHTTPHeaders(client: CDPSession) {\n    if (this.#extraHTTPHeaders === undefined) {\n      return;\n    }\n    await client.send('Network.setExtraHTTPHeaders', {\n      headers: this.#extraHTTPHeaders,\n    });\n  }\n\n  extraHTTPHeaders(): Record<string, string> {\n    return Object.assign({}, this.#extraHTTPHeaders);\n  }\n\n  inFlightRequestsCount(): number {\n    return this.#networkEventManager.inFlightRequestsCount();\n  }\n\n  async setOfflineMode(value: boolean): Promise<void> {\n    if (!this.#emulatedNetworkConditions) {\n      this.#emulatedNetworkConditions = {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0,\n      };\n    }\n    this.#emulatedNetworkConditions.offline = value;\n    await this.#applyToAllClients(this.#applyNetworkConditions.bind(this));\n  }\n\n  async emulateNetworkConditions(\n    networkConditions: NetworkConditions | null\n  ): Promise<void> {\n    if (!this.#emulatedNetworkConditions) {\n      this.#emulatedNetworkConditions = {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0,\n      };\n    }\n    this.#emulatedNetworkConditions.upload = networkConditions\n      ? networkConditions.upload\n      : -1;\n    this.#emulatedNetworkConditions.download = networkConditions\n      ? networkConditions.download\n      : -1;\n    this.#emulatedNetworkConditions.latency = networkConditions\n      ? networkConditions.latency\n      : 0;\n\n    await this.#applyToAllClients(this.#applyNetworkConditions.bind(this));\n  }\n\n  async #applyToAllClients(fn: (client: CDPSession) => Promise<unknown>) {\n    await Promise.all(\n      Array.from(this.#clients.keys()).map(client => {\n        return fn(client);\n      })\n    );\n  }\n\n  async #applyNetworkConditions(client: CDPSession): Promise<void> {\n    if (this.#emulatedNetworkConditions === undefined) {\n      return;\n    }\n    await client.send('Network.emulateNetworkConditions', {\n      offline: this.#emulatedNetworkConditions.offline,\n      latency: this.#emulatedNetworkConditions.latency,\n      uploadThroughput: this.#emulatedNetworkConditions.upload,\n      downloadThroughput: this.#emulatedNetworkConditions.download,\n    });\n  }\n\n  async setUserAgent(\n    userAgent: string,\n    userAgentMetadata?: Protocol.Emulation.UserAgentMetadata\n  ): Promise<void> {\n    this.#userAgent = userAgent;\n    this.#userAgentMetadata = userAgentMetadata;\n    await this.#applyToAllClients(this.#applyUserAgent.bind(this));\n  }\n\n  async #applyUserAgent(client: CDPSession) {\n    if (this.#userAgent === undefined) {\n      return;\n    }\n    await client.send('Network.setUserAgentOverride', {\n      userAgent: this.#userAgent,\n      userAgentMetadata: this.#userAgentMetadata,\n    });\n  }\n\n  async setCacheEnabled(enabled: boolean): Promise<void> {\n    this.#userCacheDisabled = !enabled;\n    await this.#applyToAllClients(this.#applyProtocolCacheDisabled.bind(this));\n  }\n\n  async setRequestInterception(value: boolean): Promise<void> {\n    this.#userRequestInterceptionEnabled = value;\n    const enabled = this.#userRequestInterceptionEnabled || !!this.#credentials;\n    if (enabled === this.#protocolRequestInterceptionEnabled) {\n      return;\n    }\n    this.#protocolRequestInterceptionEnabled = enabled;\n    await this.#applyToAllClients(\n      this.#applyProtocolRequestInterception.bind(this)\n    );\n  }\n\n  async #applyProtocolRequestInterception(client: CDPSession): Promise<void> {\n    if (this.#userCacheDisabled === undefined) {\n      this.#userCacheDisabled = false;\n    }\n    if (this.#protocolRequestInterceptionEnabled) {\n      await Promise.all([\n        this.#applyProtocolCacheDisabled(client),\n        client.send('Fetch.enable', {\n          handleAuthRequests: true,\n          patterns: [{urlPattern: '*'}],\n        }),\n      ]);\n    } else {\n      await Promise.all([\n        this.#applyProtocolCacheDisabled(client),\n        client.send('Fetch.disable'),\n      ]);\n    }\n  }\n\n  async #applyProtocolCacheDisabled(client: CDPSession): Promise<void> {\n    if (this.#userCacheDisabled === undefined) {\n      return;\n    }\n    await client.send('Network.setCacheDisabled', {\n      cacheDisabled: this.#userCacheDisabled,\n    });\n  }\n\n  #onRequestWillBeSent(\n    client: CDPSession,\n    event: Protocol.Network.RequestWillBeSentEvent\n  ): void {\n    // Request interception doesn't happen for data URLs with Network Service.\n    if (\n      this.#userRequestInterceptionEnabled &&\n      !event.request.url.startsWith('data:')\n    ) {\n      const {requestId: networkRequestId} = event;\n\n      this.#networkEventManager.storeRequestWillBeSent(networkRequestId, event);\n\n      /**\n       * CDP may have sent a Fetch.requestPaused event already. Check for it.\n       */\n      const requestPausedEvent =\n        this.#networkEventManager.getRequestPaused(networkRequestId);\n      if (requestPausedEvent) {\n        const {requestId: fetchRequestId} = requestPausedEvent;\n        this.#patchRequestEventHeaders(event, requestPausedEvent);\n        this.#onRequest(client, event, fetchRequestId);\n        this.#networkEventManager.forgetRequestPaused(networkRequestId);\n      }\n\n      return;\n    }\n    this.#onRequest(client, event, undefined);\n  }\n\n  #onAuthRequired(\n    client: CDPSession,\n    event: Protocol.Fetch.AuthRequiredEvent\n  ): void {\n    let response: Protocol.Fetch.AuthChallengeResponse['response'] = 'Default';\n    if (this.#attemptedAuthentications.has(event.requestId)) {\n      response = 'CancelAuth';\n    } else if (this.#credentials) {\n      response = 'ProvideCredentials';\n      this.#attemptedAuthentications.add(event.requestId);\n    }\n    const {username, password} = this.#credentials || {\n      username: undefined,\n      password: undefined,\n    };\n    client\n      .send('Fetch.continueWithAuth', {\n        requestId: event.requestId,\n        authChallengeResponse: {response, username, password},\n      })\n      .catch(debugError);\n  }\n\n  /**\n   * CDP may send a Fetch.requestPaused without or before a\n   * Network.requestWillBeSent\n   *\n   * CDP may send multiple Fetch.requestPaused\n   * for the same Network.requestWillBeSent.\n   */\n  #onRequestPaused(\n    client: CDPSession,\n    event: Protocol.Fetch.RequestPausedEvent\n  ): void {\n    if (\n      !this.#userRequestInterceptionEnabled &&\n      this.#protocolRequestInterceptionEnabled\n    ) {\n      client\n        .send('Fetch.continueRequest', {\n          requestId: event.requestId,\n        })\n        .catch(debugError);\n    }\n\n    const {networkId: networkRequestId, requestId: fetchRequestId} = event;\n\n    if (!networkRequestId) {\n      this.#onRequestWithoutNetworkInstrumentation(client, event);\n      return;\n    }\n\n    const requestWillBeSentEvent = (() => {\n      const requestWillBeSentEvent =\n        this.#networkEventManager.getRequestWillBeSent(networkRequestId);\n\n      // redirect requests have the same `requestId`,\n      if (\n        requestWillBeSentEvent &&\n        (requestWillBeSentEvent.request.url !== event.request.url ||\n          requestWillBeSentEvent.request.method !== event.request.method)\n      ) {\n        this.#networkEventManager.forgetRequestWillBeSent(networkRequestId);\n        return;\n      }\n      return requestWillBeSentEvent;\n    })();\n\n    if (requestWillBeSentEvent) {\n      this.#patchRequestEventHeaders(requestWillBeSentEvent, event);\n      this.#onRequest(client, requestWillBeSentEvent, fetchRequestId);\n    } else {\n      this.#networkEventManager.storeRequestPaused(networkRequestId, event);\n    }\n  }\n\n  #patchRequestEventHeaders(\n    requestWillBeSentEvent: Protocol.Network.RequestWillBeSentEvent,\n    requestPausedEvent: Protocol.Fetch.RequestPausedEvent\n  ): void {\n    requestWillBeSentEvent.request.headers = {\n      ...requestWillBeSentEvent.request.headers,\n      // includes extra headers, like: Accept, Origin\n      ...requestPausedEvent.request.headers,\n    };\n  }\n\n  #onRequestWithoutNetworkInstrumentation(\n    client: CDPSession,\n    event: Protocol.Fetch.RequestPausedEvent\n  ): void {\n    // If an event has no networkId it should not have any network events. We\n    // still want to dispatch it for the interception by the user.\n    const frame = event.frameId\n      ? this.#frameManager.frame(event.frameId)\n      : null;\n\n    const request = new CdpHTTPRequest(\n      client,\n      frame,\n      event.requestId,\n      this.#userRequestInterceptionEnabled,\n      event,\n      []\n    );\n    this.emit(NetworkManagerEvent.Request, request);\n    void request.finalizeInterceptions();\n  }\n\n  #onRequest(\n    client: CDPSession,\n    event: Protocol.Network.RequestWillBeSentEvent,\n    fetchRequestId?: FetchRequestId\n  ): void {\n    let redirectChain: CdpHTTPRequest[] = [];\n    if (event.redirectResponse) {\n      // We want to emit a response and requestfinished for the\n      // redirectResponse, but we can't do so unless we have a\n      // responseExtraInfo ready to pair it up with. If we don't have any\n      // responseExtraInfos saved in our queue, they we have to wait until\n      // the next one to emit response and requestfinished, *and* we should\n      // also wait to emit this Request too because it should come after the\n      // response/requestfinished.\n      let redirectResponseExtraInfo = null;\n      if (event.redirectHasExtraInfo) {\n        redirectResponseExtraInfo = this.#networkEventManager\n          .responseExtraInfo(event.requestId)\n          .shift();\n        if (!redirectResponseExtraInfo) {\n          this.#networkEventManager.queueRedirectInfo(event.requestId, {\n            event,\n            fetchRequestId,\n          });\n          return;\n        }\n      }\n\n      const request = this.#networkEventManager.getRequest(event.requestId);\n      // If we connect late to the target, we could have missed the\n      // requestWillBeSent event.\n      if (request) {\n        this.#handleRequestRedirect(\n          client,\n          request,\n          event.redirectResponse,\n          redirectResponseExtraInfo\n        );\n        redirectChain = request._redirectChain;\n      }\n    }\n    const frame = event.frameId\n      ? this.#frameManager.frame(event.frameId)\n      : null;\n\n    const request = new CdpHTTPRequest(\n      client,\n      frame,\n      fetchRequestId,\n      this.#userRequestInterceptionEnabled,\n      event,\n      redirectChain\n    );\n    this.#networkEventManager.storeRequest(event.requestId, request);\n    this.emit(NetworkManagerEvent.Request, request);\n    void request.finalizeInterceptions();\n  }\n\n  #onRequestServedFromCache(\n    _client: CDPSession,\n    event: Protocol.Network.RequestServedFromCacheEvent\n  ): void {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    if (request) {\n      request._fromMemoryCache = true;\n    }\n    this.emit(NetworkManagerEvent.RequestServedFromCache, request);\n  }\n\n  #handleRequestRedirect(\n    client: CDPSession,\n    request: CdpHTTPRequest,\n    responsePayload: Protocol.Network.Response,\n    extraInfo: Protocol.Network.ResponseReceivedExtraInfoEvent | null\n  ): void {\n    const response = new CdpHTTPResponse(\n      client,\n      request,\n      responsePayload,\n      extraInfo\n    );\n    request._response = response;\n    request._redirectChain.push(request);\n    response._resolveBody(\n      new Error('Response body is unavailable for redirect responses')\n    );\n    this.#forgetRequest(request, false);\n    this.emit(NetworkManagerEvent.Response, response);\n    this.emit(NetworkManagerEvent.RequestFinished, request);\n  }\n\n  #emitResponseEvent(\n    client: CDPSession,\n    responseReceived: Protocol.Network.ResponseReceivedEvent,\n    extraInfo: Protocol.Network.ResponseReceivedExtraInfoEvent | null\n  ): void {\n    const request = this.#networkEventManager.getRequest(\n      responseReceived.requestId\n    );\n    // FileUpload sends a response without a matching request.\n    if (!request) {\n      return;\n    }\n\n    const extraInfos = this.#networkEventManager.responseExtraInfo(\n      responseReceived.requestId\n    );\n    if (extraInfos.length) {\n      debugError(\n        new Error(\n          'Unexpected extraInfo events for request ' +\n            responseReceived.requestId\n        )\n      );\n    }\n\n    // Chromium sends wrong extraInfo events for responses served from cache.\n    // See https://github.com/puppeteer/puppeteer/issues/9965 and\n    // https://crbug.com/1340398.\n    if (responseReceived.response.fromDiskCache) {\n      extraInfo = null;\n    }\n\n    const response = new CdpHTTPResponse(\n      client,\n      request,\n      responseReceived.response,\n      extraInfo\n    );\n    request._response = response;\n    this.emit(NetworkManagerEvent.Response, response);\n  }\n\n  #onResponseReceived(\n    client: CDPSession,\n    event: Protocol.Network.ResponseReceivedEvent\n  ): void {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    let extraInfo = null;\n    if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n      extraInfo = this.#networkEventManager\n        .responseExtraInfo(event.requestId)\n        .shift();\n      if (!extraInfo) {\n        // Wait until we get the corresponding ExtraInfo event.\n        this.#networkEventManager.queueEventGroup(event.requestId, {\n          responseReceivedEvent: event,\n        });\n        return;\n      }\n    }\n    this.#emitResponseEvent(client, event, extraInfo);\n  }\n\n  #onResponseReceivedExtraInfo(\n    client: CDPSession,\n    event: Protocol.Network.ResponseReceivedExtraInfoEvent\n  ): void {\n    // We may have skipped a redirect response/request pair due to waiting for\n    // this ExtraInfo event. If so, continue that work now that we have the\n    // request.\n    const redirectInfo = this.#networkEventManager.takeQueuedRedirectInfo(\n      event.requestId\n    );\n    if (redirectInfo) {\n      this.#networkEventManager.responseExtraInfo(event.requestId).push(event);\n      this.#onRequest(client, redirectInfo.event, redirectInfo.fetchRequestId);\n      return;\n    }\n\n    // We may have skipped response and loading events because we didn't have\n    // this ExtraInfo event yet. If so, emit those events now.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(\n      event.requestId\n    );\n    if (queuedEvents) {\n      this.#networkEventManager.forgetQueuedEventGroup(event.requestId);\n      this.#emitResponseEvent(\n        client,\n        queuedEvents.responseReceivedEvent,\n        event\n      );\n      if (queuedEvents.loadingFinishedEvent) {\n        this.#emitLoadingFinished(queuedEvents.loadingFinishedEvent);\n      }\n      if (queuedEvents.loadingFailedEvent) {\n        this.#emitLoadingFailed(queuedEvents.loadingFailedEvent);\n      }\n      return;\n    }\n\n    // Wait until we get another event that can use this ExtraInfo event.\n    this.#networkEventManager.responseExtraInfo(event.requestId).push(event);\n  }\n\n  #forgetRequest(request: CdpHTTPRequest, events: boolean): void {\n    const requestId = request.id;\n    const interceptionId = request._interceptionId;\n\n    this.#networkEventManager.forgetRequest(requestId);\n    interceptionId !== undefined &&\n      this.#attemptedAuthentications.delete(interceptionId);\n\n    if (events) {\n      this.#networkEventManager.forget(requestId);\n    }\n  }\n\n  #onLoadingFinished(\n    _client: CDPSession,\n    event: Protocol.Network.LoadingFinishedEvent\n  ): void {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(\n      event.requestId\n    );\n    if (queuedEvents) {\n      queuedEvents.loadingFinishedEvent = event;\n    } else {\n      this.#emitLoadingFinished(event);\n    }\n  }\n\n  #emitLoadingFinished(event: Protocol.Network.LoadingFinishedEvent): void {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n      return;\n    }\n\n    // Under certain conditions we never get the Network.responseReceived\n    // event from protocol. @see https://crbug.com/883475\n    if (request.response()) {\n      request.response()?._resolveBody();\n    }\n    this.#forgetRequest(request, true);\n    this.emit(NetworkManagerEvent.RequestFinished, request);\n  }\n\n  #onLoadingFailed(\n    _client: CDPSession,\n    event: Protocol.Network.LoadingFailedEvent\n  ): void {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this.#networkEventManager.getQueuedEventGroup(\n      event.requestId\n    );\n    if (queuedEvents) {\n      queuedEvents.loadingFailedEvent = event;\n    } else {\n      this.#emitLoadingFailed(event);\n    }\n  }\n\n  #emitLoadingFailed(event: Protocol.Network.LoadingFailedEvent): void {\n    const request = this.#networkEventManager.getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n      return;\n    }\n    request._failureText = event.errorText;\n    const response = request.response();\n    if (response) {\n      response._resolveBody();\n    }\n    this.#forgetRequest(request, true);\n    this.emit(NetworkManagerEvent.RequestFailed, request);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}