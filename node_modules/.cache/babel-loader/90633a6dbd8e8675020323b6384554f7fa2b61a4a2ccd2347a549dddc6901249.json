{"ast":null,"code":"var isHexDigit = require('../tokenizer').isHexDigit;\nvar cmpChar = require('../tokenizer').cmpChar;\nvar TYPE = require('../tokenizer').TYPE;\nvar IDENT = TYPE.Ident;\nvar DELIM = TYPE.Delim;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\nvar U = 0x0075; // U+0075 LATIN SMALL LETTER U (u)\n\nfunction isDelim(token, code) {\n  return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;\n}\nfunction startsWith(token, code) {\n  return token.value.charCodeAt(0) === code;\n}\nfunction hexSequence(token, offset, allowDash) {\n  for (var pos = offset, hexlen = 0; pos < token.value.length; pos++) {\n    var code = token.value.charCodeAt(pos);\n    if (code === HYPHENMINUS && allowDash && hexlen !== 0) {\n      if (hexSequence(token, offset + hexlen + 1, false) > 0) {\n        return 6; // dissallow following question marks\n      }\n      return 0; // dash at the ending of a hex sequence is not allowed\n    }\n    if (!isHexDigit(code)) {\n      return 0; // not a hex digit\n    }\n    if (++hexlen > 6) {\n      return 0; // too many hex digits\n    }\n    ;\n  }\n  return hexlen;\n}\nfunction withQuestionMarkSequence(consumed, length, getNextToken) {\n  if (!consumed) {\n    return 0; // nothing consumed\n  }\n  while (isDelim(getNextToken(length), QUESTIONMARK)) {\n    if (++consumed > 6) {\n      return 0; // too many question marks\n    }\n    length++;\n  }\n  return length;\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nmodule.exports = function urange(token, getNextToken) {\n  var length = 0;\n\n  // should start with `u` or `U`\n  if (token === null || token.type !== IDENT || !cmpChar(token.value, 0, U)) {\n    return 0;\n  }\n  token = getNextToken(++length);\n  if (token === null) {\n    return 0;\n  }\n\n  // u '+' <ident-token> '?'*\n  // u '+' '?'+\n  if (isDelim(token, PLUSSIGN)) {\n    token = getNextToken(++length);\n    if (token === null) {\n      return 0;\n    }\n    if (token.type === IDENT) {\n      // u '+' <ident-token> '?'*\n      return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);\n    }\n    if (isDelim(token, QUESTIONMARK)) {\n      // u '+' '?'+\n      return withQuestionMarkSequence(1, ++length, getNextToken);\n    }\n\n    // Hex digit or question mark is expected\n    return 0;\n  }\n\n  // u <number-token> '?'*\n  // u <number-token> <dimension-token>\n  // u <number-token> <number-token>\n  if (token.type === NUMBER) {\n    if (!startsWith(token, PLUSSIGN)) {\n      return 0;\n    }\n    var consumedHexLength = hexSequence(token, 1, true);\n    if (consumedHexLength === 0) {\n      return 0;\n    }\n    token = getNextToken(++length);\n    if (token === null) {\n      // u <number-token> <eof>\n      return length;\n    }\n    if (token.type === DIMENSION || token.type === NUMBER) {\n      // u <number-token> <dimension-token>\n      // u <number-token> <number-token>\n      if (!startsWith(token, HYPHENMINUS) || !hexSequence(token, 1, false)) {\n        return 0;\n      }\n      return length + 1;\n    }\n\n    // u <number-token> '?'*\n    return withQuestionMarkSequence(consumedHexLength, length, getNextToken);\n  }\n\n  // u <dimension-token> '?'*\n  if (token.type === DIMENSION) {\n    if (!startsWith(token, PLUSSIGN)) {\n      return 0;\n    }\n    return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);\n  }\n  return 0;\n};","map":{"version":3,"names":["isHexDigit","require","cmpChar","TYPE","IDENT","Ident","DELIM","Delim","NUMBER","Number","DIMENSION","Dimension","PLUSSIGN","HYPHENMINUS","QUESTIONMARK","U","isDelim","token","code","type","value","charCodeAt","startsWith","hexSequence","offset","allowDash","pos","hexlen","length","withQuestionMarkSequence","consumed","getNextToken","module","exports","urange","consumedHexLength"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/lexer/generic-urange.js"],"sourcesContent":["var isHexDigit = require('../tokenizer').isHexDigit;\nvar cmpChar = require('../tokenizer').cmpChar;\nvar TYPE = require('../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar DELIM = TYPE.Delim;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B;     // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D;  // U+002D HYPHEN-MINUS (-)\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\nvar U = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)\n\nfunction isDelim(token, code) {\n    return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;\n}\n\nfunction startsWith(token, code) {\n    return token.value.charCodeAt(0) === code;\n}\n\nfunction hexSequence(token, offset, allowDash) {\n    for (var pos = offset, hexlen = 0; pos < token.value.length; pos++) {\n        var code = token.value.charCodeAt(pos);\n\n        if (code === HYPHENMINUS && allowDash && hexlen !== 0) {\n            if (hexSequence(token, offset + hexlen + 1, false) > 0) {\n                return 6; // dissallow following question marks\n            }\n\n            return 0; // dash at the ending of a hex sequence is not allowed\n        }\n\n        if (!isHexDigit(code)) {\n            return 0; // not a hex digit\n        }\n\n        if (++hexlen > 6) {\n            return 0; // too many hex digits\n        };\n    }\n\n    return hexlen;\n}\n\nfunction withQuestionMarkSequence(consumed, length, getNextToken) {\n    if (!consumed) {\n        return 0; // nothing consumed\n    }\n\n    while (isDelim(getNextToken(length), QUESTIONMARK)) {\n        if (++consumed > 6) {\n            return 0; // too many question marks\n        }\n\n        length++;\n    }\n\n    return length;\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nmodule.exports = function urange(token, getNextToken) {\n    var length = 0;\n\n    // should start with `u` or `U`\n    if (token === null || token.type !== IDENT || !cmpChar(token.value, 0, U)) {\n        return 0;\n    }\n\n    token = getNextToken(++length);\n    if (token === null) {\n        return 0;\n    }\n\n    // u '+' <ident-token> '?'*\n    // u '+' '?'+\n    if (isDelim(token, PLUSSIGN)) {\n        token = getNextToken(++length);\n        if (token === null) {\n            return 0;\n        }\n\n        if (token.type === IDENT) {\n            // u '+' <ident-token> '?'*\n            return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);\n        }\n\n        if (isDelim(token, QUESTIONMARK)) {\n            // u '+' '?'+\n            return withQuestionMarkSequence(1, ++length, getNextToken);\n        }\n\n        // Hex digit or question mark is expected\n        return 0;\n    }\n\n    // u <number-token> '?'*\n    // u <number-token> <dimension-token>\n    // u <number-token> <number-token>\n    if (token.type === NUMBER) {\n        if (!startsWith(token, PLUSSIGN)) {\n            return 0;\n        }\n\n        var consumedHexLength = hexSequence(token, 1, true);\n        if (consumedHexLength === 0) {\n            return 0;\n        }\n\n        token = getNextToken(++length);\n        if (token === null) {\n            // u <number-token> <eof>\n            return length;\n        }\n\n        if (token.type === DIMENSION || token.type === NUMBER) {\n            // u <number-token> <dimension-token>\n            // u <number-token> <number-token>\n            if (!startsWith(token, HYPHENMINUS) || !hexSequence(token, 1, false)) {\n                return 0;\n            }\n\n            return length + 1;\n        }\n\n        // u <number-token> '?'*\n        return withQuestionMarkSequence(consumedHexLength, length, getNextToken);\n    }\n\n    // u <dimension-token> '?'*\n    if (token.type === DIMENSION) {\n        if (!startsWith(token, PLUSSIGN)) {\n            return 0;\n        }\n\n        return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);\n    }\n\n    return 0;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}