{"ast":null,"code":"import { TargetType } from '../api/Target.js';\nimport { WebWorker } from '../api/WebWorker.js';\nimport { TimeoutSettings } from '../common/TimeoutSettings.js';\nimport { debugError } from '../common/util.js';\nimport { ExecutionContext } from './ExecutionContext.js';\nimport { IsolatedWorld } from './IsolatedWorld.js';\nimport { CdpJSHandle } from './JSHandle.js';\n/**\n * @internal\n */\nexport class CdpWebWorker extends WebWorker {\n  #world;\n  #client;\n  #id;\n  #targetType;\n  constructor(client, url, targetId, targetType, consoleAPICalled, exceptionThrown) {\n    super(url);\n    this.#id = targetId;\n    this.#client = client;\n    this.#targetType = targetType;\n    this.#world = new IsolatedWorld(this, new TimeoutSettings());\n    this.#client.once('Runtime.executionContextCreated', async event => {\n      this.#world.setContext(new ExecutionContext(client, event.context, this.#world));\n    });\n    this.#client.on('Runtime.consoleAPICalled', async event => {\n      try {\n        return consoleAPICalled(event.type, event.args.map(object => {\n          return new CdpJSHandle(this.#world, object);\n        }), event.stackTrace);\n      } catch (err) {\n        debugError(err);\n      }\n    });\n    this.#client.on('Runtime.exceptionThrown', exceptionThrown);\n    // This might fail if the target is closed before we receive all execution contexts.\n    this.#client.send('Runtime.enable').catch(debugError);\n  }\n  mainRealm() {\n    return this.#world;\n  }\n  get client() {\n    return this.#client;\n  }\n  async close() {\n    switch (this.#targetType) {\n      case TargetType.SERVICE_WORKER:\n      case TargetType.SHARED_WORKER:\n        {\n          // For service and shared workers we need to close the target and detach to allow\n          // the worker to stop.\n          await this.client.connection()?.send('Target.closeTarget', {\n            targetId: this.#id\n          });\n          await this.client.connection()?.send('Target.detachFromTarget', {\n            sessionId: this.client.id()\n          });\n          break;\n        }\n      default:\n        await this.evaluate(() => {\n          self.close();\n        });\n    }\n  }\n}","map":{"version":3,"names":["TargetType","WebWorker","TimeoutSettings","debugError","ExecutionContext","IsolatedWorld","CdpJSHandle","CdpWebWorker","world","client","id","targetType","constructor","url","targetId","consoleAPICalled","exceptionThrown","once","event","setContext","context","on","type","args","map","object","stackTrace","err","send","catch","mainRealm","close","SERVICE_WORKER","SHARED_WORKER","connection","sessionId","evaluate","self"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/puppeteer-core/src/cdp/WebWorker.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport type {Realm} from '../api/Realm.js';\nimport {TargetType} from '../api/Target.js';\nimport {WebWorker} from '../api/WebWorker.js';\nimport {TimeoutSettings} from '../common/TimeoutSettings.js';\nimport {debugError} from '../common/util.js';\n\nimport {ExecutionContext} from './ExecutionContext.js';\nimport {IsolatedWorld} from './IsolatedWorld.js';\nimport {CdpJSHandle} from './JSHandle.js';\n\n/**\n * @internal\n */\nexport type ConsoleAPICalledCallback = (\n  eventType: string,\n  handles: CdpJSHandle[],\n  trace?: Protocol.Runtime.StackTrace\n) => void;\n\n/**\n * @internal\n */\nexport type ExceptionThrownCallback = (\n  event: Protocol.Runtime.ExceptionThrownEvent\n) => void;\n\n/**\n * @internal\n */\nexport class CdpWebWorker extends WebWorker {\n  #world: IsolatedWorld;\n  #client: CDPSession;\n  readonly #id: string;\n  readonly #targetType: TargetType;\n\n  constructor(\n    client: CDPSession,\n    url: string,\n    targetId: string,\n    targetType: TargetType,\n    consoleAPICalled: ConsoleAPICalledCallback,\n    exceptionThrown: ExceptionThrownCallback\n  ) {\n    super(url);\n    this.#id = targetId;\n    this.#client = client;\n    this.#targetType = targetType;\n    this.#world = new IsolatedWorld(this, new TimeoutSettings());\n\n    this.#client.once('Runtime.executionContextCreated', async event => {\n      this.#world.setContext(\n        new ExecutionContext(client, event.context, this.#world)\n      );\n    });\n    this.#client.on('Runtime.consoleAPICalled', async event => {\n      try {\n        return consoleAPICalled(\n          event.type,\n          event.args.map((object: Protocol.Runtime.RemoteObject) => {\n            return new CdpJSHandle(this.#world, object);\n          }),\n          event.stackTrace\n        );\n      } catch (err) {\n        debugError(err);\n      }\n    });\n    this.#client.on('Runtime.exceptionThrown', exceptionThrown);\n\n    // This might fail if the target is closed before we receive all execution contexts.\n    this.#client.send('Runtime.enable').catch(debugError);\n  }\n\n  mainRealm(): Realm {\n    return this.#world;\n  }\n\n  get client(): CDPSession {\n    return this.#client;\n  }\n\n  override async close(): Promise<void> {\n    switch (this.#targetType) {\n      case TargetType.SERVICE_WORKER:\n      case TargetType.SHARED_WORKER: {\n        // For service and shared workers we need to close the target and detach to allow\n        // the worker to stop.\n        await this.client.connection()?.send('Target.closeTarget', {\n          targetId: this.#id,\n        });\n        await this.client.connection()?.send('Target.detachFromTarget', {\n          sessionId: this.client.id(),\n        });\n        break;\n      }\n      default:\n        await this.evaluate(() => {\n          self.close();\n        });\n    }\n  }\n}\n"],"mappings":"AASA,SAAQA,UAAU,QAAO,kBAAkB;AAC3C,SAAQC,SAAS,QAAO,qBAAqB;AAC7C,SAAQC,eAAe,QAAO,8BAA8B;AAC5D,SAAQC,UAAU,QAAO,mBAAmB;AAE5C,SAAQC,gBAAgB,QAAO,uBAAuB;AACtD,SAAQC,aAAa,QAAO,oBAAoB;AAChD,SAAQC,WAAW,QAAO,eAAe;AAkBzC;;;AAGA,OAAM,MAAOC,YAAa,SAAQN,SAAS;EACzC,CAAAO,KAAM;EACN,CAAAC,MAAO;EACE,CAAAC,EAAG;EACH,CAAAC,UAAW;EAEpBC,YACEH,MAAkB,EAClBI,GAAW,EACXC,QAAgB,EAChBH,UAAsB,EACtBI,gBAA0C,EAC1CC,eAAwC;IAExC,KAAK,CAACH,GAAG,CAAC;IACV,IAAI,CAAC,CAAAH,EAAG,GAAGI,QAAQ;IACnB,IAAI,CAAC,CAAAL,MAAO,GAAGA,MAAM;IACrB,IAAI,CAAC,CAAAE,UAAW,GAAGA,UAAU;IAC7B,IAAI,CAAC,CAAAH,KAAM,GAAG,IAAIH,aAAa,CAAC,IAAI,EAAE,IAAIH,eAAe,EAAE,CAAC;IAE5D,IAAI,CAAC,CAAAO,MAAO,CAACQ,IAAI,CAAC,iCAAiC,EAAE,MAAMC,KAAK,IAAG;MACjE,IAAI,CAAC,CAAAV,KAAM,CAACW,UAAU,CACpB,IAAIf,gBAAgB,CAACK,MAAM,EAAES,KAAK,CAACE,OAAO,EAAE,IAAI,CAAC,CAAAZ,KAAM,CAAC,CACzD;IACH,CAAC,CAAC;IACF,IAAI,CAAC,CAAAC,MAAO,CAACY,EAAE,CAAC,0BAA0B,EAAE,MAAMH,KAAK,IAAG;MACxD,IAAI;QACF,OAAOH,gBAAgB,CACrBG,KAAK,CAACI,IAAI,EACVJ,KAAK,CAACK,IAAI,CAACC,GAAG,CAAEC,MAAqC,IAAI;UACvD,OAAO,IAAInB,WAAW,CAAC,IAAI,CAAC,CAAAE,KAAM,EAAEiB,MAAM,CAAC;QAC7C,CAAC,CAAC,EACFP,KAAK,CAACQ,UAAU,CACjB;MACH,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZxB,UAAU,CAACwB,GAAG,CAAC;MACjB;IACF,CAAC,CAAC;IACF,IAAI,CAAC,CAAAlB,MAAO,CAACY,EAAE,CAAC,yBAAyB,EAAEL,eAAe,CAAC;IAE3D;IACA,IAAI,CAAC,CAAAP,MAAO,CAACmB,IAAI,CAAC,gBAAgB,CAAC,CAACC,KAAK,CAAC1B,UAAU,CAAC;EACvD;EAEA2B,SAASA,CAAA;IACP,OAAO,IAAI,CAAC,CAAAtB,KAAM;EACpB;EAEA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAAC,CAAAA,MAAO;EACrB;EAES,MAAMsB,KAAKA,CAAA;IAClB,QAAQ,IAAI,CAAC,CAAApB,UAAW;MACtB,KAAKX,UAAU,CAACgC,cAAc;MAC9B,KAAKhC,UAAU,CAACiC,aAAa;QAAE;UAC7B;UACA;UACA,MAAM,IAAI,CAACxB,MAAM,CAACyB,UAAU,EAAE,EAAEN,IAAI,CAAC,oBAAoB,EAAE;YACzDd,QAAQ,EAAE,IAAI,CAAC,CAAAJ;WAChB,CAAC;UACF,MAAM,IAAI,CAACD,MAAM,CAACyB,UAAU,EAAE,EAAEN,IAAI,CAAC,yBAAyB,EAAE;YAC9DO,SAAS,EAAE,IAAI,CAAC1B,MAAM,CAACC,EAAE;WAC1B,CAAC;UACF;QACF;MACA;QACE,MAAM,IAAI,CAAC0B,QAAQ,CAAC,MAAK;UACvBC,IAAI,CAACN,KAAK,EAAE;QACd,CAAC,CAAC;IACN;EACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}