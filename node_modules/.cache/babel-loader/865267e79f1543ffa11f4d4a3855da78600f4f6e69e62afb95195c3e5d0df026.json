{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nimport { Frame, FrameEvent, throwIfDetached } from '../api/Frame.js';\nimport { UnsupportedOperation } from '../common/Errors.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { disposeSymbol } from '../util/disposable.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { IsolatedWorld } from './IsolatedWorld.js';\nimport { MAIN_WORLD, PUPPETEER_WORLD } from './IsolatedWorlds.js';\nimport { LifecycleWatcher } from './LifecycleWatcher.js';\n/**\n * @internal\n */\nlet CdpFrame = (() => {\n  let _classSuper = Frame;\n  let _instanceExtraInitializers = [];\n  let _goto_decorators;\n  let _waitForNavigation_decorators;\n  let _setContent_decorators;\n  let _waitForDevicePrompt_decorators;\n  return class CdpFrame extends _classSuper {\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;\n      __esDecorate(this, null, _goto_decorators, {\n        kind: \"method\",\n        name: \"goto\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"goto\" in obj,\n          get: obj => obj.goto\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _waitForNavigation_decorators, {\n        kind: \"method\",\n        name: \"waitForNavigation\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"waitForNavigation\" in obj,\n          get: obj => obj.waitForNavigation\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _setContent_decorators, {\n        kind: \"method\",\n        name: \"setContent\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"setContent\" in obj,\n          get: obj => obj.setContent\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(this, null, _waitForDevicePrompt_decorators, {\n        kind: \"method\",\n        name: \"waitForDevicePrompt\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"waitForDevicePrompt\" in obj,\n          get: obj => obj.waitForDevicePrompt\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      if (_metadata) Object.defineProperty(this, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n    }\n    #url = (__runInitializers(this, _instanceExtraInitializers), '');\n    #detached = false;\n    #client;\n    worlds;\n    _frameManager;\n    _id;\n    _loaderId = '';\n    _lifecycleEvents = new Set();\n    _parentId;\n    constructor(frameManager, frameId, parentFrameId, client) {\n      super();\n      this._frameManager = frameManager;\n      this.#url = '';\n      this._id = frameId;\n      this._parentId = parentFrameId;\n      this.#detached = false;\n      this._loaderId = '';\n      this.updateClient(client);\n      this.on(FrameEvent.FrameSwappedByActivation, () => {\n        // Emulate loading process for swapped frames.\n        this._onLoadingStarted();\n        this._onLoadingStopped();\n      });\n    }\n    /**\n     * This is used internally in DevTools.\n     *\n     * @internal\n     */\n    _client() {\n      return this.#client;\n    }\n    /**\n     * Updates the frame ID with the new ID. This happens when the main frame is\n     * replaced by a different frame.\n     */\n    updateId(id) {\n      this._id = id;\n    }\n    updateClient(client, keepWorlds = false) {\n      this.#client = client;\n      if (!keepWorlds) {\n        // Clear the current contexts on previous world instances.\n        if (this.worlds) {\n          this.worlds[MAIN_WORLD].clearContext();\n          this.worlds[PUPPETEER_WORLD].clearContext();\n        }\n        this.worlds = {\n          [MAIN_WORLD]: new IsolatedWorld(this, this._frameManager.timeoutSettings),\n          [PUPPETEER_WORLD]: new IsolatedWorld(this, this._frameManager.timeoutSettings)\n        };\n      } else {\n        this.worlds[MAIN_WORLD].frameUpdated();\n        this.worlds[PUPPETEER_WORLD].frameUpdated();\n      }\n    }\n    page() {\n      return this._frameManager.page();\n    }\n    isOOPFrame() {\n      return this.#client !== this._frameManager.client;\n    }\n    async goto(url, options = {}) {\n      const {\n        referer = this._frameManager.networkManager.extraHTTPHeaders()['referer'],\n        referrerPolicy = this._frameManager.networkManager.extraHTTPHeaders()['referer-policy'],\n        waitUntil = ['load'],\n        timeout = this._frameManager.timeoutSettings.navigationTimeout()\n      } = options;\n      let ensureNewDocumentNavigation = false;\n      const watcher = new LifecycleWatcher(this._frameManager.networkManager, this, waitUntil, timeout);\n      let error = await Deferred.race([navigate(this.#client, url, referer, referrerPolicy, this._id), watcher.terminationPromise()]);\n      if (!error) {\n        error = await Deferred.race([watcher.terminationPromise(), ensureNewDocumentNavigation ? watcher.newDocumentNavigationPromise() : watcher.sameDocumentNavigationPromise()]);\n      }\n      try {\n        if (error) {\n          throw error;\n        }\n        return await watcher.navigationResponse();\n      } finally {\n        watcher.dispose();\n      }\n      async function navigate(client, url, referrer, referrerPolicy, frameId) {\n        try {\n          const response = await client.send('Page.navigate', {\n            url,\n            referrer,\n            frameId,\n            referrerPolicy\n          });\n          ensureNewDocumentNavigation = !!response.loaderId;\n          if (response.errorText === 'net::ERR_HTTP_RESPONSE_CODE_FAILURE') {\n            return null;\n          }\n          return response.errorText ? new Error(`${response.errorText} at ${url}`) : null;\n        } catch (error) {\n          if (isErrorLike(error)) {\n            return error;\n          }\n          throw error;\n        }\n      }\n    }\n    async waitForNavigation(options = {}) {\n      const {\n        waitUntil = ['load'],\n        timeout = this._frameManager.timeoutSettings.navigationTimeout()\n      } = options;\n      const watcher = new LifecycleWatcher(this._frameManager.networkManager, this, waitUntil, timeout);\n      const error = await Deferred.race([watcher.terminationPromise(), watcher.sameDocumentNavigationPromise(), watcher.newDocumentNavigationPromise()]);\n      try {\n        if (error) {\n          throw error;\n        }\n        return await watcher.navigationResponse();\n      } finally {\n        watcher.dispose();\n      }\n    }\n    get client() {\n      return this.#client;\n    }\n    mainRealm() {\n      return this.worlds[MAIN_WORLD];\n    }\n    isolatedRealm() {\n      return this.worlds[PUPPETEER_WORLD];\n    }\n    async setContent(html, options = {}) {\n      const {\n        waitUntil = ['load'],\n        timeout = this._frameManager.timeoutSettings.navigationTimeout()\n      } = options;\n      // We rely upon the fact that document.open() will reset frame lifecycle with \"init\"\n      // lifecycle event. @see https://crrev.com/608658\n      await this.setFrameContent(html);\n      const watcher = new LifecycleWatcher(this._frameManager.networkManager, this, waitUntil, timeout);\n      const error = await Deferred.race([watcher.terminationPromise(), watcher.lifecyclePromise()]);\n      watcher.dispose();\n      if (error) {\n        throw error;\n      }\n    }\n    url() {\n      return this.#url;\n    }\n    parentFrame() {\n      return this._frameManager._frameTree.parentFrame(this._id) || null;\n    }\n    childFrames() {\n      return this._frameManager._frameTree.childFrames(this._id);\n    }\n    #deviceRequestPromptManager() {\n      const rootFrame = this.page().mainFrame();\n      if (this.isOOPFrame() || rootFrame === null) {\n        return this._frameManager._deviceRequestPromptManager(this.#client);\n      } else {\n        return rootFrame._frameManager._deviceRequestPromptManager(this.#client);\n      }\n    }\n    async waitForDevicePrompt(options = {}) {\n      return await this.#deviceRequestPromptManager().waitForDevicePrompt(options);\n    }\n    _navigated(framePayload) {\n      this._name = framePayload.name;\n      this.#url = `${framePayload.url}${framePayload.urlFragment || ''}`;\n    }\n    _navigatedWithinDocument(url) {\n      this.#url = url;\n    }\n    _onLifecycleEvent(loaderId, name) {\n      if (name === 'init') {\n        this._loaderId = loaderId;\n        this._lifecycleEvents.clear();\n      }\n      this._lifecycleEvents.add(name);\n    }\n    _onLoadingStopped() {\n      this._lifecycleEvents.add('DOMContentLoaded');\n      this._lifecycleEvents.add('load');\n    }\n    _onLoadingStarted() {\n      this._hasStartedLoading = true;\n    }\n    get detached() {\n      return this.#detached;\n    }\n    [(_goto_decorators = [throwIfDetached], _waitForNavigation_decorators = [throwIfDetached], _setContent_decorators = [throwIfDetached], _waitForDevicePrompt_decorators = [throwIfDetached], disposeSymbol)]() {\n      if (this.#detached) {\n        return;\n      }\n      this.#detached = true;\n      this.worlds[MAIN_WORLD][disposeSymbol]();\n      this.worlds[PUPPETEER_WORLD][disposeSymbol]();\n    }\n    exposeFunction() {\n      throw new UnsupportedOperation();\n    }\n  };\n})();\nexport { CdpFrame };","map":{"version":3,"names":["Frame","FrameEvent","throwIfDetached","UnsupportedOperation","Deferred","disposeSymbol","isErrorLike","IsolatedWorld","MAIN_WORLD","PUPPETEER_WORLD","LifecycleWatcher","CdpFrame","_classSuper","__esDecorate","_goto_decorators","kind","name","static","private","access","has","obj","get","goto","metadata","_metadata","_instanceExtraInitializers","_waitForNavigation_decorators","waitForNavigation","_setContent_decorators","setContent","_waitForDevicePrompt_decorators","waitForDevicePrompt","url","__runInitializers","detached","client","worlds","_frameManager","_id","_loaderId","_lifecycleEvents","Set","_parentId","constructor","frameManager","frameId","parentFrameId","updateClient","on","FrameSwappedByActivation","_onLoadingStarted","_onLoadingStopped","_client","updateId","id","keepWorlds","clearContext","timeoutSettings","frameUpdated","page","isOOPFrame","options","referer","networkManager","extraHTTPHeaders","referrerPolicy","waitUntil","timeout","navigationTimeout","ensureNewDocumentNavigation","watcher","error","race","navigate","terminationPromise","newDocumentNavigationPromise","sameDocumentNavigationPromise","navigationResponse","dispose","referrer","response","send","loaderId","errorText","Error","mainRealm","isolatedRealm","html","setFrameContent","lifecyclePromise","parentFrame","_frameTree","childFrames","deviceRequestPromptManager","#deviceRequestPromptManager","rootFrame","mainFrame","_deviceRequestPromptManager","_navigated","framePayload","_name","urlFragment","_navigatedWithinDocument","_onLifecycleEvent","clear","add","_hasStartedLoading","exposeFunction"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/puppeteer-core/src/cdp/Frame.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {CDPSession} from '../api/CDPSession.js';\nimport {Frame, FrameEvent, throwIfDetached} from '../api/Frame.js';\nimport type {HTTPResponse} from '../api/HTTPResponse.js';\nimport type {WaitTimeoutOptions} from '../api/Page.js';\nimport {UnsupportedOperation} from '../common/Errors.js';\nimport {Deferred} from '../util/Deferred.js';\nimport {disposeSymbol} from '../util/disposable.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\nimport type {\n  DeviceRequestPrompt,\n  DeviceRequestPromptManager,\n} from './DeviceRequestPrompt.js';\nimport type {FrameManager} from './FrameManager.js';\nimport type {IsolatedWorldChart} from './IsolatedWorld.js';\nimport {IsolatedWorld} from './IsolatedWorld.js';\nimport {MAIN_WORLD, PUPPETEER_WORLD} from './IsolatedWorlds.js';\nimport {\n  LifecycleWatcher,\n  type PuppeteerLifeCycleEvent,\n} from './LifecycleWatcher.js';\nimport type {CdpPage} from './Page.js';\n\n/**\n * @internal\n */\nexport class CdpFrame extends Frame {\n  #url = '';\n  #detached = false;\n  #client!: CDPSession;\n  worlds!: IsolatedWorldChart;\n\n  _frameManager: FrameManager;\n  override _id: string;\n  _loaderId = '';\n  _lifecycleEvents = new Set<string>();\n  override _parentId?: string;\n\n  constructor(\n    frameManager: FrameManager,\n    frameId: string,\n    parentFrameId: string | undefined,\n    client: CDPSession\n  ) {\n    super();\n    this._frameManager = frameManager;\n    this.#url = '';\n    this._id = frameId;\n    this._parentId = parentFrameId;\n    this.#detached = false;\n\n    this._loaderId = '';\n\n    this.updateClient(client);\n\n    this.on(FrameEvent.FrameSwappedByActivation, () => {\n      // Emulate loading process for swapped frames.\n      this._onLoadingStarted();\n      this._onLoadingStopped();\n    });\n  }\n\n  /**\n   * This is used internally in DevTools.\n   *\n   * @internal\n   */\n  _client(): CDPSession {\n    return this.#client;\n  }\n\n  /**\n   * Updates the frame ID with the new ID. This happens when the main frame is\n   * replaced by a different frame.\n   */\n  updateId(id: string): void {\n    this._id = id;\n  }\n\n  updateClient(client: CDPSession, keepWorlds = false): void {\n    this.#client = client;\n    if (!keepWorlds) {\n      // Clear the current contexts on previous world instances.\n      if (this.worlds) {\n        this.worlds[MAIN_WORLD].clearContext();\n        this.worlds[PUPPETEER_WORLD].clearContext();\n      }\n      this.worlds = {\n        [MAIN_WORLD]: new IsolatedWorld(\n          this,\n          this._frameManager.timeoutSettings\n        ),\n        [PUPPETEER_WORLD]: new IsolatedWorld(\n          this,\n          this._frameManager.timeoutSettings\n        ),\n      };\n    } else {\n      this.worlds[MAIN_WORLD].frameUpdated();\n      this.worlds[PUPPETEER_WORLD].frameUpdated();\n    }\n  }\n\n  override page(): CdpPage {\n    return this._frameManager.page();\n  }\n\n  override isOOPFrame(): boolean {\n    return this.#client !== this._frameManager.client;\n  }\n\n  @throwIfDetached\n  override async goto(\n    url: string,\n    options: {\n      referer?: string;\n      referrerPolicy?: string;\n      timeout?: number;\n      waitUntil?: PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[];\n    } = {}\n  ): Promise<HTTPResponse | null> {\n    const {\n      referer = this._frameManager.networkManager.extraHTTPHeaders()['referer'],\n      referrerPolicy = this._frameManager.networkManager.extraHTTPHeaders()[\n        'referer-policy'\n      ],\n      waitUntil = ['load'],\n      timeout = this._frameManager.timeoutSettings.navigationTimeout(),\n    } = options;\n\n    let ensureNewDocumentNavigation = false;\n    const watcher = new LifecycleWatcher(\n      this._frameManager.networkManager,\n      this,\n      waitUntil,\n      timeout\n    );\n    let error = await Deferred.race([\n      navigate(\n        this.#client,\n        url,\n        referer,\n        referrerPolicy as Protocol.Page.ReferrerPolicy,\n        this._id\n      ),\n      watcher.terminationPromise(),\n    ]);\n    if (!error) {\n      error = await Deferred.race([\n        watcher.terminationPromise(),\n        ensureNewDocumentNavigation\n          ? watcher.newDocumentNavigationPromise()\n          : watcher.sameDocumentNavigationPromise(),\n      ]);\n    }\n\n    try {\n      if (error) {\n        throw error;\n      }\n      return await watcher.navigationResponse();\n    } finally {\n      watcher.dispose();\n    }\n\n    async function navigate(\n      client: CDPSession,\n      url: string,\n      referrer: string | undefined,\n      referrerPolicy: Protocol.Page.ReferrerPolicy | undefined,\n      frameId: string\n    ): Promise<Error | null> {\n      try {\n        const response = await client.send('Page.navigate', {\n          url,\n          referrer,\n          frameId,\n          referrerPolicy,\n        });\n        ensureNewDocumentNavigation = !!response.loaderId;\n        if (response.errorText === 'net::ERR_HTTP_RESPONSE_CODE_FAILURE') {\n          return null;\n        }\n        return response.errorText\n          ? new Error(`${response.errorText} at ${url}`)\n          : null;\n      } catch (error) {\n        if (isErrorLike(error)) {\n          return error;\n        }\n        throw error;\n      }\n    }\n  }\n\n  @throwIfDetached\n  override async waitForNavigation(\n    options: {\n      timeout?: number;\n      waitUntil?: PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[];\n    } = {}\n  ): Promise<HTTPResponse | null> {\n    const {\n      waitUntil = ['load'],\n      timeout = this._frameManager.timeoutSettings.navigationTimeout(),\n    } = options;\n    const watcher = new LifecycleWatcher(\n      this._frameManager.networkManager,\n      this,\n      waitUntil,\n      timeout\n    );\n    const error = await Deferred.race([\n      watcher.terminationPromise(),\n      watcher.sameDocumentNavigationPromise(),\n      watcher.newDocumentNavigationPromise(),\n    ]);\n    try {\n      if (error) {\n        throw error;\n      }\n      return await watcher.navigationResponse();\n    } finally {\n      watcher.dispose();\n    }\n  }\n\n  override get client(): CDPSession {\n    return this.#client;\n  }\n\n  override mainRealm(): IsolatedWorld {\n    return this.worlds[MAIN_WORLD];\n  }\n\n  override isolatedRealm(): IsolatedWorld {\n    return this.worlds[PUPPETEER_WORLD];\n  }\n\n  @throwIfDetached\n  override async setContent(\n    html: string,\n    options: {\n      timeout?: number;\n      waitUntil?: PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[];\n    } = {}\n  ): Promise<void> {\n    const {\n      waitUntil = ['load'],\n      timeout = this._frameManager.timeoutSettings.navigationTimeout(),\n    } = options;\n\n    // We rely upon the fact that document.open() will reset frame lifecycle with \"init\"\n    // lifecycle event. @see https://crrev.com/608658\n    await this.setFrameContent(html);\n\n    const watcher = new LifecycleWatcher(\n      this._frameManager.networkManager,\n      this,\n      waitUntil,\n      timeout\n    );\n    const error = await Deferred.race<void | Error | undefined>([\n      watcher.terminationPromise(),\n      watcher.lifecyclePromise(),\n    ]);\n    watcher.dispose();\n    if (error) {\n      throw error;\n    }\n  }\n\n  override url(): string {\n    return this.#url;\n  }\n\n  override parentFrame(): CdpFrame | null {\n    return this._frameManager._frameTree.parentFrame(this._id) || null;\n  }\n\n  override childFrames(): CdpFrame[] {\n    return this._frameManager._frameTree.childFrames(this._id);\n  }\n\n  #deviceRequestPromptManager(): DeviceRequestPromptManager {\n    const rootFrame = this.page().mainFrame();\n    if (this.isOOPFrame() || rootFrame === null) {\n      return this._frameManager._deviceRequestPromptManager(this.#client);\n    } else {\n      return rootFrame._frameManager._deviceRequestPromptManager(this.#client);\n    }\n  }\n\n  @throwIfDetached\n  override async waitForDevicePrompt(\n    options: WaitTimeoutOptions = {}\n  ): Promise<DeviceRequestPrompt> {\n    return await this.#deviceRequestPromptManager().waitForDevicePrompt(\n      options\n    );\n  }\n\n  _navigated(framePayload: Protocol.Page.Frame): void {\n    this._name = framePayload.name;\n    this.#url = `${framePayload.url}${framePayload.urlFragment || ''}`;\n  }\n\n  _navigatedWithinDocument(url: string): void {\n    this.#url = url;\n  }\n\n  _onLifecycleEvent(loaderId: string, name: string): void {\n    if (name === 'init') {\n      this._loaderId = loaderId;\n      this._lifecycleEvents.clear();\n    }\n    this._lifecycleEvents.add(name);\n  }\n\n  _onLoadingStopped(): void {\n    this._lifecycleEvents.add('DOMContentLoaded');\n    this._lifecycleEvents.add('load');\n  }\n\n  _onLoadingStarted(): void {\n    this._hasStartedLoading = true;\n  }\n\n  override get detached(): boolean {\n    return this.#detached;\n  }\n\n  [disposeSymbol](): void {\n    if (this.#detached) {\n      return;\n    }\n    this.#detached = true;\n    this.worlds[MAIN_WORLD][disposeSymbol]();\n    this.worlds[PUPPETEER_WORLD][disposeSymbol]();\n  }\n\n  exposeFunction(): never {\n    throw new UnsupportedOperation();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}