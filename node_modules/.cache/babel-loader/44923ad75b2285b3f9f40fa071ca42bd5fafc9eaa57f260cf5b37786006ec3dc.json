{"ast":null,"code":"function noop(value) {\n  return value;\n}\nfunction generateMultiplier(multiplier) {\n  if (multiplier.min === 0 && multiplier.max === 0) {\n    return '*';\n  }\n  if (multiplier.min === 0 && multiplier.max === 1) {\n    return '?';\n  }\n  if (multiplier.min === 1 && multiplier.max === 0) {\n    return multiplier.comma ? '#' : '+';\n  }\n  if (multiplier.min === 1 && multiplier.max === 1) {\n    return '';\n  }\n  return (multiplier.comma ? '#' : '') + (multiplier.min === multiplier.max ? '{' + multiplier.min + '}' : '{' + multiplier.min + ',' + (multiplier.max !== 0 ? multiplier.max : '') + '}');\n}\nfunction generateTypeOpts(node) {\n  switch (node.type) {\n    case 'Range':\n      return ' [' + (node.min === null ? '-∞' : node.min) + ',' + (node.max === null ? '∞' : node.max) + ']';\n    default:\n      throw new Error('Unknown node type `' + node.type + '`');\n  }\n}\nfunction generateSequence(node, decorate, forceBraces, compact) {\n  var combinator = node.combinator === ' ' || compact ? node.combinator : ' ' + node.combinator + ' ';\n  var result = node.terms.map(function (term) {\n    return generate(term, decorate, forceBraces, compact);\n  }).join(combinator);\n  if (node.explicit || forceBraces) {\n    result = (compact || result[0] === ',' ? '[' : '[ ') + result + (compact ? ']' : ' ]');\n  }\n  return result;\n}\nfunction generate(node, decorate, forceBraces, compact) {\n  var result;\n  switch (node.type) {\n    case 'Group':\n      result = generateSequence(node, decorate, forceBraces, compact) + (node.disallowEmpty ? '!' : '');\n      break;\n    case 'Multiplier':\n      // return since node is a composition\n      return generate(node.term, decorate, forceBraces, compact) + decorate(generateMultiplier(node), node);\n    case 'Type':\n      result = '<' + node.name + (node.opts ? decorate(generateTypeOpts(node.opts), node.opts) : '') + '>';\n      break;\n    case 'Property':\n      result = '<\\'' + node.name + '\\'>';\n      break;\n    case 'Keyword':\n      result = node.name;\n      break;\n    case 'AtKeyword':\n      result = '@' + node.name;\n      break;\n    case 'Function':\n      result = node.name + '(';\n      break;\n    case 'String':\n    case 'Token':\n      result = node.value;\n      break;\n    case 'Comma':\n      result = ',';\n      break;\n    default:\n      throw new Error('Unknown node type `' + node.type + '`');\n  }\n  return decorate(result, node);\n}\nmodule.exports = function (node, options) {\n  var decorate = noop;\n  var forceBraces = false;\n  var compact = false;\n  if (typeof options === 'function') {\n    decorate = options;\n  } else if (options) {\n    forceBraces = Boolean(options.forceBraces);\n    compact = Boolean(options.compact);\n    if (typeof options.decorate === 'function') {\n      decorate = options.decorate;\n    }\n  }\n  return generate(node, decorate, forceBraces, compact);\n};","map":{"version":3,"names":["noop","value","generateMultiplier","multiplier","min","max","comma","generateTypeOpts","node","type","Error","generateSequence","decorate","forceBraces","compact","combinator","result","terms","map","term","generate","join","explicit","disallowEmpty","name","opts","module","exports","options","Boolean"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/definition-syntax/generate.js"],"sourcesContent":["function noop(value) {\n    return value;\n}\n\nfunction generateMultiplier(multiplier) {\n    if (multiplier.min === 0 && multiplier.max === 0) {\n        return '*';\n    }\n\n    if (multiplier.min === 0 && multiplier.max === 1) {\n        return '?';\n    }\n\n    if (multiplier.min === 1 && multiplier.max === 0) {\n        return multiplier.comma ? '#' : '+';\n    }\n\n    if (multiplier.min === 1 && multiplier.max === 1) {\n        return '';\n    }\n\n    return (\n        (multiplier.comma ? '#' : '') +\n        (multiplier.min === multiplier.max\n            ? '{' + multiplier.min + '}'\n            : '{' + multiplier.min + ',' + (multiplier.max !== 0 ? multiplier.max : '') + '}'\n        )\n    );\n}\n\nfunction generateTypeOpts(node) {\n    switch (node.type) {\n        case 'Range':\n            return (\n                ' [' +\n                (node.min === null ? '-∞' : node.min) +\n                ',' +\n                (node.max === null ? '∞' : node.max) +\n                ']'\n            );\n\n        default:\n            throw new Error('Unknown node type `' + node.type + '`');\n    }\n}\n\nfunction generateSequence(node, decorate, forceBraces, compact) {\n    var combinator = node.combinator === ' ' || compact ? node.combinator : ' ' + node.combinator + ' ';\n    var result = node.terms.map(function(term) {\n        return generate(term, decorate, forceBraces, compact);\n    }).join(combinator);\n\n    if (node.explicit || forceBraces) {\n        result = (compact || result[0] === ',' ? '[' : '[ ') + result + (compact ? ']' : ' ]');\n    }\n\n    return result;\n}\n\nfunction generate(node, decorate, forceBraces, compact) {\n    var result;\n\n    switch (node.type) {\n        case 'Group':\n            result =\n                generateSequence(node, decorate, forceBraces, compact) +\n                (node.disallowEmpty ? '!' : '');\n            break;\n\n        case 'Multiplier':\n            // return since node is a composition\n            return (\n                generate(node.term, decorate, forceBraces, compact) +\n                decorate(generateMultiplier(node), node)\n            );\n\n        case 'Type':\n            result = '<' + node.name + (node.opts ? decorate(generateTypeOpts(node.opts), node.opts) : '') + '>';\n            break;\n\n        case 'Property':\n            result = '<\\'' + node.name + '\\'>';\n            break;\n\n        case 'Keyword':\n            result = node.name;\n            break;\n\n        case 'AtKeyword':\n            result = '@' + node.name;\n            break;\n\n        case 'Function':\n            result = node.name + '(';\n            break;\n\n        case 'String':\n        case 'Token':\n            result = node.value;\n            break;\n\n        case 'Comma':\n            result = ',';\n            break;\n\n        default:\n            throw new Error('Unknown node type `' + node.type + '`');\n    }\n\n    return decorate(result, node);\n}\n\nmodule.exports = function(node, options) {\n    var decorate = noop;\n    var forceBraces = false;\n    var compact = false;\n\n    if (typeof options === 'function') {\n        decorate = options;\n    } else if (options) {\n        forceBraces = Boolean(options.forceBraces);\n        compact = Boolean(options.compact);\n        if (typeof options.decorate === 'function') {\n            decorate = options.decorate;\n        }\n    }\n\n    return generate(node, decorate, forceBraces, compact);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}