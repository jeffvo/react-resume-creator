{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CDPSession, CDPSessionEvent } from '../api/CDPSession.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { debugError } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { CdpTarget, InitializationStatus } from './Target.js';\nfunction isPageTargetBecomingPrimary(target, newTargetInfo) {\n  return Boolean(target._subtype()) && !newTargetInfo.subtype;\n}\n/**\n * ChromeTargetManager uses the CDP's auto-attach mechanism to intercept\n * new targets and allow the rest of Puppeteer to configure listeners while\n * the target is paused.\n *\n * @internal\n */\nexport class ChromeTargetManager extends EventEmitter {\n  #connection;\n  /**\n   * Keeps track of the following events: 'Target.targetCreated',\n   * 'Target.targetDestroyed', 'Target.targetInfoChanged'.\n   *\n   * A target becomes discovered when 'Target.targetCreated' is received.\n   * A target is removed from this map once 'Target.targetDestroyed' is\n   * received.\n   *\n   * `targetFilterCallback` has no effect on this map.\n   */\n  #discoveredTargetsByTargetId = new Map();\n  /**\n   * A target is added to this map once ChromeTargetManager has created\n   * a Target and attached at least once to it.\n   */\n  #attachedTargetsByTargetId = new Map();\n  /**\n   * Tracks which sessions attach to which target.\n   */\n  #attachedTargetsBySessionId = new Map();\n  /**\n   * If a target was filtered out by `targetFilterCallback`, we still receive\n   * events about it from CDP, but we don't forward them to the rest of Puppeteer.\n   */\n  #ignoredTargets = new Set();\n  #targetFilterCallback;\n  #targetFactory;\n  #attachedToTargetListenersBySession = new WeakMap();\n  #detachedFromTargetListenersBySession = new WeakMap();\n  #initializeDeferred = Deferred.create();\n  #targetsIdsForInit = new Set();\n  #waitForInitiallyDiscoveredTargets = true;\n  #discoveryFilter = [{}];\n  constructor(connection, targetFactory, targetFilterCallback, waitForInitiallyDiscoveredTargets = true) {\n    super();\n    this.#connection = connection;\n    this.#targetFilterCallback = targetFilterCallback;\n    this.#targetFactory = targetFactory;\n    this.#waitForInitiallyDiscoveredTargets = waitForInitiallyDiscoveredTargets;\n    this.#connection.on('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.on('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.on('Target.targetInfoChanged', this.#onTargetInfoChanged);\n    this.#connection.on(CDPSessionEvent.SessionDetached, this.#onSessionDetached);\n    this.#setupAttachmentListeners(this.#connection);\n  }\n  #storeExistingTargetsForInit = () => {\n    if (!this.#waitForInitiallyDiscoveredTargets) {\n      return;\n    }\n    for (const [targetId, targetInfo] of this.#discoveredTargetsByTargetId.entries()) {\n      const targetForFilter = new CdpTarget(targetInfo, undefined, undefined, this, undefined);\n      if ((!this.#targetFilterCallback || this.#targetFilterCallback(targetForFilter)) && targetInfo.type !== 'browser') {\n        this.#targetsIdsForInit.add(targetId);\n      }\n    }\n  };\n  async initialize() {\n    await this.#connection.send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: this.#discoveryFilter\n    });\n    this.#storeExistingTargetsForInit();\n    await this.#connection.send('Target.setAutoAttach', {\n      waitForDebuggerOnStart: true,\n      flatten: true,\n      autoAttach: true,\n      filter: [{\n        type: 'page',\n        exclude: true\n      }, ...this.#discoveryFilter]\n    });\n    this.#finishInitializationIfReady();\n    await this.#initializeDeferred.valueOrThrow();\n  }\n  dispose() {\n    this.#connection.off('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.off('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.off('Target.targetInfoChanged', this.#onTargetInfoChanged);\n    this.#connection.off(CDPSessionEvent.SessionDetached, this.#onSessionDetached);\n    this.#removeAttachmentListeners(this.#connection);\n  }\n  getAvailableTargets() {\n    return this.#attachedTargetsByTargetId;\n  }\n  #setupAttachmentListeners(session) {\n    const listener = event => {\n      void this.#onAttachedToTarget(session, event);\n    };\n    assert(!this.#attachedToTargetListenersBySession.has(session));\n    this.#attachedToTargetListenersBySession.set(session, listener);\n    session.on('Target.attachedToTarget', listener);\n    const detachedListener = event => {\n      return this.#onDetachedFromTarget(session, event);\n    };\n    assert(!this.#detachedFromTargetListenersBySession.has(session));\n    this.#detachedFromTargetListenersBySession.set(session, detachedListener);\n    session.on('Target.detachedFromTarget', detachedListener);\n  }\n  #removeAttachmentListeners(session) {\n    const listener = this.#attachedToTargetListenersBySession.get(session);\n    if (listener) {\n      session.off('Target.attachedToTarget', listener);\n      this.#attachedToTargetListenersBySession.delete(session);\n    }\n    if (this.#detachedFromTargetListenersBySession.has(session)) {\n      session.off('Target.detachedFromTarget', this.#detachedFromTargetListenersBySession.get(session));\n      this.#detachedFromTargetListenersBySession.delete(session);\n    }\n  }\n  #onSessionDetached = session => {\n    this.#removeAttachmentListeners(session);\n  };\n  #onTargetCreated = async event => {\n    this.#discoveredTargetsByTargetId.set(event.targetInfo.targetId, event.targetInfo);\n    this.emit(\"targetDiscovered\" /* TargetManagerEvent.TargetDiscovered */, event.targetInfo);\n    // The connection is already attached to the browser target implicitly,\n    // therefore, no new CDPSession is created and we have special handling\n    // here.\n    if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n      if (this.#attachedTargetsByTargetId.has(event.targetInfo.targetId)) {\n        return;\n      }\n      const target = this.#targetFactory(event.targetInfo, undefined);\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(event.targetInfo.targetId, target);\n    }\n  };\n  #onTargetDestroyed = event => {\n    const targetInfo = this.#discoveredTargetsByTargetId.get(event.targetId);\n    this.#discoveredTargetsByTargetId.delete(event.targetId);\n    this.#finishInitializationIfReady(event.targetId);\n    if (targetInfo?.type === 'service_worker' && this.#attachedTargetsByTargetId.has(event.targetId)) {\n      // Special case for service workers: report TargetGone event when\n      // the worker is destroyed.\n      const target = this.#attachedTargetsByTargetId.get(event.targetId);\n      if (target) {\n        this.emit(\"targetGone\" /* TargetManagerEvent.TargetGone */, target);\n        this.#attachedTargetsByTargetId.delete(event.targetId);\n      }\n    }\n  };\n  #onTargetInfoChanged = event => {\n    this.#discoveredTargetsByTargetId.set(event.targetInfo.targetId, event.targetInfo);\n    if (this.#ignoredTargets.has(event.targetInfo.targetId) || !this.#attachedTargetsByTargetId.has(event.targetInfo.targetId) || !event.targetInfo.attached) {\n      return;\n    }\n    const target = this.#attachedTargetsByTargetId.get(event.targetInfo.targetId);\n    if (!target) {\n      return;\n    }\n    const previousURL = target.url();\n    const wasInitialized = target._initializedDeferred.value() === InitializationStatus.SUCCESS;\n    if (isPageTargetBecomingPrimary(target, event.targetInfo)) {\n      const session = target?._session();\n      assert(session, 'Target that is being activated is missing a CDPSession.');\n      session.parentSession()?.emit(CDPSessionEvent.Swapped, session);\n    }\n    target._targetInfoChanged(event.targetInfo);\n    if (wasInitialized && previousURL !== target.url()) {\n      this.emit(\"targetChanged\" /* TargetManagerEvent.TargetChanged */, {\n        target,\n        wasInitialized,\n        previousURL\n      });\n    }\n  };\n  #onAttachedToTarget = async (parentSession, event) => {\n    const targetInfo = event.targetInfo;\n    const session = this.#connection.session(event.sessionId);\n    if (!session) {\n      throw new Error(`Session ${event.sessionId} was not created.`);\n    }\n    const silentDetach = async () => {\n      await session.send('Runtime.runIfWaitingForDebugger').catch(debugError);\n      // We don't use `session.detach()` because that dispatches all commands on\n      // the connection instead of the parent session.\n      await parentSession.send('Target.detachFromTarget', {\n        sessionId: session.id()\n      }).catch(debugError);\n    };\n    if (!this.#connection.isAutoAttached(targetInfo.targetId)) {\n      return;\n    }\n    // Special case for service workers: being attached to service workers will\n    // prevent them from ever being destroyed. Therefore, we silently detach\n    // from service workers unless the connection was manually created via\n    // `page.worker()`. To determine this, we use\n    // `this.#connection.isAutoAttached(targetInfo.targetId)`. In the future, we\n    // should determine if a target is auto-attached or not with the help of\n    // CDP.\n    if (targetInfo.type === 'service_worker') {\n      this.#finishInitializationIfReady(targetInfo.targetId);\n      await silentDetach();\n      if (this.#attachedTargetsByTargetId.has(targetInfo.targetId)) {\n        return;\n      }\n      const target = this.#targetFactory(targetInfo);\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(targetInfo.targetId, target);\n      this.emit(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, target);\n      return;\n    }\n    const isExistingTarget = this.#attachedTargetsByTargetId.has(targetInfo.targetId);\n    const target = isExistingTarget ? this.#attachedTargetsByTargetId.get(targetInfo.targetId) : this.#targetFactory(targetInfo, session, parentSession instanceof CDPSession ? parentSession : undefined);\n    if (this.#targetFilterCallback && !this.#targetFilterCallback(target)) {\n      this.#ignoredTargets.add(targetInfo.targetId);\n      this.#finishInitializationIfReady(targetInfo.targetId);\n      await silentDetach();\n      return;\n    }\n    this.#setupAttachmentListeners(session);\n    if (isExistingTarget) {\n      session._setTarget(target);\n      this.#attachedTargetsBySessionId.set(session.id(), this.#attachedTargetsByTargetId.get(targetInfo.targetId));\n    } else {\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(targetInfo.targetId, target);\n      this.#attachedTargetsBySessionId.set(session.id(), target);\n    }\n    parentSession.emit(CDPSessionEvent.Ready, session);\n    this.#targetsIdsForInit.delete(target._targetId);\n    if (!isExistingTarget) {\n      this.emit(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, target);\n    }\n    this.#finishInitializationIfReady();\n    // TODO: the browser might be shutting down here. What do we do with the\n    // error?\n    await Promise.all([session.send('Target.setAutoAttach', {\n      waitForDebuggerOnStart: true,\n      flatten: true,\n      autoAttach: true,\n      filter: this.#discoveryFilter\n    }), session.send('Runtime.runIfWaitingForDebugger')]).catch(debugError);\n  };\n  #finishInitializationIfReady(targetId) {\n    targetId !== undefined && this.#targetsIdsForInit.delete(targetId);\n    if (this.#targetsIdsForInit.size === 0) {\n      this.#initializeDeferred.resolve();\n    }\n  }\n  #onDetachedFromTarget = (_parentSession, event) => {\n    const target = this.#attachedTargetsBySessionId.get(event.sessionId);\n    this.#attachedTargetsBySessionId.delete(event.sessionId);\n    if (!target) {\n      return;\n    }\n    this.#attachedTargetsByTargetId.delete(target._targetId);\n    this.emit(\"targetGone\" /* TargetManagerEvent.TargetGone */, target);\n  };\n}","map":{"version":3,"names":["CDPSession","CDPSessionEvent","EventEmitter","debugError","assert","Deferred","CdpTarget","InitializationStatus","isPageTargetBecomingPrimary","target","newTargetInfo","Boolean","_subtype","subtype","ChromeTargetManager","connection","discoveredTargetsByTargetId","Map","attachedTargetsByTargetId","attachedTargetsBySessionId","ignoredTargets","Set","targetFilterCallback","targetFactory","attachedToTargetListenersBySession","WeakMap","detachedFromTargetListenersBySession","initializeDeferred","create","targetsIdsForInit","waitForInitiallyDiscoveredTargets","discoveryFilter","constructor","on","onTargetCreated","onTargetDestroyed","onTargetInfoChanged","SessionDetached","onSessionDetached","setupAttachmentListeners","storeExistingTargetsForInit","#storeExistingTargetsForInit","targetId","targetInfo","entries","targetForFilter","undefined","type","add","initialize","send","discover","filter","waitForDebuggerOnStart","flatten","autoAttach","exclude","finishInitializationIfReady","valueOrThrow","dispose","off","removeAttachmentListeners","getAvailableTargets","#setupAttachmentListeners","session","listener","event","onAttachedToTarget","has","set","detachedListener","onDetachedFromTarget","#removeAttachmentListeners","get","delete","emit","attached","_initialize","previousURL","url","wasInitialized","_initializedDeferred","value","SUCCESS","_session","parentSession","Swapped","_targetInfoChanged","#onAttachedToTarget","sessionId","Error","silentDetach","catch","id","isAutoAttached","isExistingTarget","_setTarget","Ready","_targetId","Promise","all","#finishInitializationIfReady","size","resolve","#onDetachedFromTarget","_parentSession"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/puppeteer-core/src/cdp/ChromeTargetManager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {TargetFilterCallback} from '../api/Browser.js';\nimport {CDPSession, CDPSessionEvent} from '../api/CDPSession.js';\nimport {EventEmitter} from '../common/EventEmitter.js';\nimport {debugError} from '../common/util.js';\nimport {assert} from '../util/assert.js';\nimport {Deferred} from '../util/Deferred.js';\n\nimport type {CdpCDPSession} from './CDPSession.js';\nimport type {Connection} from './Connection.js';\nimport {CdpTarget, InitializationStatus} from './Target.js';\nimport {\n  type TargetFactory,\n  type TargetManager,\n  TargetManagerEvent,\n  type TargetManagerEvents,\n} from './TargetManager.js';\n\nfunction isPageTargetBecomingPrimary(\n  target: CdpTarget,\n  newTargetInfo: Protocol.Target.TargetInfo\n): boolean {\n  return Boolean(target._subtype()) && !newTargetInfo.subtype;\n}\n\n/**\n * ChromeTargetManager uses the CDP's auto-attach mechanism to intercept\n * new targets and allow the rest of Puppeteer to configure listeners while\n * the target is paused.\n *\n * @internal\n */\nexport class ChromeTargetManager\n  extends EventEmitter<TargetManagerEvents>\n  implements TargetManager\n{\n  #connection: Connection;\n  /**\n   * Keeps track of the following events: 'Target.targetCreated',\n   * 'Target.targetDestroyed', 'Target.targetInfoChanged'.\n   *\n   * A target becomes discovered when 'Target.targetCreated' is received.\n   * A target is removed from this map once 'Target.targetDestroyed' is\n   * received.\n   *\n   * `targetFilterCallback` has no effect on this map.\n   */\n  #discoveredTargetsByTargetId = new Map<string, Protocol.Target.TargetInfo>();\n  /**\n   * A target is added to this map once ChromeTargetManager has created\n   * a Target and attached at least once to it.\n   */\n  #attachedTargetsByTargetId = new Map<string, CdpTarget>();\n  /**\n   * Tracks which sessions attach to which target.\n   */\n  #attachedTargetsBySessionId = new Map<string, CdpTarget>();\n  /**\n   * If a target was filtered out by `targetFilterCallback`, we still receive\n   * events about it from CDP, but we don't forward them to the rest of Puppeteer.\n   */\n  #ignoredTargets = new Set<string>();\n  #targetFilterCallback: TargetFilterCallback | undefined;\n  #targetFactory: TargetFactory;\n\n  #attachedToTargetListenersBySession = new WeakMap<\n    CDPSession | Connection,\n    (event: Protocol.Target.AttachedToTargetEvent) => void\n  >();\n  #detachedFromTargetListenersBySession = new WeakMap<\n    CDPSession | Connection,\n    (event: Protocol.Target.DetachedFromTargetEvent) => void\n  >();\n\n  #initializeDeferred = Deferred.create<void>();\n  #targetsIdsForInit = new Set<string>();\n  #waitForInitiallyDiscoveredTargets = true;\n\n  #discoveryFilter: Protocol.Target.FilterEntry[] = [{}];\n\n  constructor(\n    connection: Connection,\n    targetFactory: TargetFactory,\n    targetFilterCallback?: TargetFilterCallback,\n    waitForInitiallyDiscoveredTargets = true\n  ) {\n    super();\n    this.#connection = connection;\n    this.#targetFilterCallback = targetFilterCallback;\n    this.#targetFactory = targetFactory;\n    this.#waitForInitiallyDiscoveredTargets = waitForInitiallyDiscoveredTargets;\n\n    this.#connection.on('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.on('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.on('Target.targetInfoChanged', this.#onTargetInfoChanged);\n    this.#connection.on(\n      CDPSessionEvent.SessionDetached,\n      this.#onSessionDetached\n    );\n    this.#setupAttachmentListeners(this.#connection);\n  }\n\n  #storeExistingTargetsForInit = () => {\n    if (!this.#waitForInitiallyDiscoveredTargets) {\n      return;\n    }\n    for (const [\n      targetId,\n      targetInfo,\n    ] of this.#discoveredTargetsByTargetId.entries()) {\n      const targetForFilter = new CdpTarget(\n        targetInfo,\n        undefined,\n        undefined,\n        this,\n        undefined\n      );\n      if (\n        (!this.#targetFilterCallback ||\n          this.#targetFilterCallback(targetForFilter)) &&\n        targetInfo.type !== 'browser'\n      ) {\n        this.#targetsIdsForInit.add(targetId);\n      }\n    }\n  };\n\n  async initialize(): Promise<void> {\n    await this.#connection.send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: this.#discoveryFilter,\n    });\n\n    this.#storeExistingTargetsForInit();\n\n    await this.#connection.send('Target.setAutoAttach', {\n      waitForDebuggerOnStart: true,\n      flatten: true,\n      autoAttach: true,\n      filter: [\n        {\n          type: 'page',\n          exclude: true,\n        },\n        ...this.#discoveryFilter,\n      ],\n    });\n    this.#finishInitializationIfReady();\n    await this.#initializeDeferred.valueOrThrow();\n  }\n\n  dispose(): void {\n    this.#connection.off('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.off('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.off('Target.targetInfoChanged', this.#onTargetInfoChanged);\n    this.#connection.off(\n      CDPSessionEvent.SessionDetached,\n      this.#onSessionDetached\n    );\n\n    this.#removeAttachmentListeners(this.#connection);\n  }\n\n  getAvailableTargets(): ReadonlyMap<string, CdpTarget> {\n    return this.#attachedTargetsByTargetId;\n  }\n\n  #setupAttachmentListeners(session: CDPSession | Connection): void {\n    const listener = (event: Protocol.Target.AttachedToTargetEvent) => {\n      void this.#onAttachedToTarget(session, event);\n    };\n    assert(!this.#attachedToTargetListenersBySession.has(session));\n    this.#attachedToTargetListenersBySession.set(session, listener);\n    session.on('Target.attachedToTarget', listener);\n\n    const detachedListener = (\n      event: Protocol.Target.DetachedFromTargetEvent\n    ) => {\n      return this.#onDetachedFromTarget(session, event);\n    };\n    assert(!this.#detachedFromTargetListenersBySession.has(session));\n    this.#detachedFromTargetListenersBySession.set(session, detachedListener);\n    session.on('Target.detachedFromTarget', detachedListener);\n  }\n\n  #removeAttachmentListeners(session: CDPSession | Connection): void {\n    const listener = this.#attachedToTargetListenersBySession.get(session);\n    if (listener) {\n      session.off('Target.attachedToTarget', listener);\n      this.#attachedToTargetListenersBySession.delete(session);\n    }\n\n    if (this.#detachedFromTargetListenersBySession.has(session)) {\n      session.off(\n        'Target.detachedFromTarget',\n        this.#detachedFromTargetListenersBySession.get(session)!\n      );\n      this.#detachedFromTargetListenersBySession.delete(session);\n    }\n  }\n\n  #onSessionDetached = (session: CDPSession) => {\n    this.#removeAttachmentListeners(session);\n  };\n\n  #onTargetCreated = async (event: Protocol.Target.TargetCreatedEvent) => {\n    this.#discoveredTargetsByTargetId.set(\n      event.targetInfo.targetId,\n      event.targetInfo\n    );\n\n    this.emit(TargetManagerEvent.TargetDiscovered, event.targetInfo);\n\n    // The connection is already attached to the browser target implicitly,\n    // therefore, no new CDPSession is created and we have special handling\n    // here.\n    if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n      if (this.#attachedTargetsByTargetId.has(event.targetInfo.targetId)) {\n        return;\n      }\n      const target = this.#targetFactory(event.targetInfo, undefined);\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(event.targetInfo.targetId, target);\n    }\n  };\n\n  #onTargetDestroyed = (event: Protocol.Target.TargetDestroyedEvent) => {\n    const targetInfo = this.#discoveredTargetsByTargetId.get(event.targetId);\n    this.#discoveredTargetsByTargetId.delete(event.targetId);\n    this.#finishInitializationIfReady(event.targetId);\n    if (\n      targetInfo?.type === 'service_worker' &&\n      this.#attachedTargetsByTargetId.has(event.targetId)\n    ) {\n      // Special case for service workers: report TargetGone event when\n      // the worker is destroyed.\n      const target = this.#attachedTargetsByTargetId.get(event.targetId);\n      if (target) {\n        this.emit(TargetManagerEvent.TargetGone, target);\n        this.#attachedTargetsByTargetId.delete(event.targetId);\n      }\n    }\n  };\n\n  #onTargetInfoChanged = (event: Protocol.Target.TargetInfoChangedEvent) => {\n    this.#discoveredTargetsByTargetId.set(\n      event.targetInfo.targetId,\n      event.targetInfo\n    );\n\n    if (\n      this.#ignoredTargets.has(event.targetInfo.targetId) ||\n      !this.#attachedTargetsByTargetId.has(event.targetInfo.targetId) ||\n      !event.targetInfo.attached\n    ) {\n      return;\n    }\n\n    const target = this.#attachedTargetsByTargetId.get(\n      event.targetInfo.targetId\n    );\n    if (!target) {\n      return;\n    }\n    const previousURL = target.url();\n    const wasInitialized =\n      target._initializedDeferred.value() === InitializationStatus.SUCCESS;\n\n    if (isPageTargetBecomingPrimary(target, event.targetInfo)) {\n      const session = target?._session();\n      assert(\n        session,\n        'Target that is being activated is missing a CDPSession.'\n      );\n      session.parentSession()?.emit(CDPSessionEvent.Swapped, session);\n    }\n\n    target._targetInfoChanged(event.targetInfo);\n\n    if (wasInitialized && previousURL !== target.url()) {\n      this.emit(TargetManagerEvent.TargetChanged, {\n        target,\n        wasInitialized,\n        previousURL,\n      });\n    }\n  };\n\n  #onAttachedToTarget = async (\n    parentSession: Connection | CDPSession,\n    event: Protocol.Target.AttachedToTargetEvent\n  ) => {\n    const targetInfo = event.targetInfo;\n    const session = this.#connection.session(event.sessionId);\n    if (!session) {\n      throw new Error(`Session ${event.sessionId} was not created.`);\n    }\n\n    const silentDetach = async () => {\n      await session.send('Runtime.runIfWaitingForDebugger').catch(debugError);\n      // We don't use `session.detach()` because that dispatches all commands on\n      // the connection instead of the parent session.\n      await parentSession\n        .send('Target.detachFromTarget', {\n          sessionId: session.id(),\n        })\n        .catch(debugError);\n    };\n\n    if (!this.#connection.isAutoAttached(targetInfo.targetId)) {\n      return;\n    }\n\n    // Special case for service workers: being attached to service workers will\n    // prevent them from ever being destroyed. Therefore, we silently detach\n    // from service workers unless the connection was manually created via\n    // `page.worker()`. To determine this, we use\n    // `this.#connection.isAutoAttached(targetInfo.targetId)`. In the future, we\n    // should determine if a target is auto-attached or not with the help of\n    // CDP.\n    if (targetInfo.type === 'service_worker') {\n      this.#finishInitializationIfReady(targetInfo.targetId);\n      await silentDetach();\n      if (this.#attachedTargetsByTargetId.has(targetInfo.targetId)) {\n        return;\n      }\n      const target = this.#targetFactory(targetInfo);\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(targetInfo.targetId, target);\n      this.emit(TargetManagerEvent.TargetAvailable, target);\n      return;\n    }\n\n    const isExistingTarget = this.#attachedTargetsByTargetId.has(\n      targetInfo.targetId\n    );\n\n    const target = isExistingTarget\n      ? this.#attachedTargetsByTargetId.get(targetInfo.targetId)!\n      : this.#targetFactory(\n          targetInfo,\n          session,\n          parentSession instanceof CDPSession ? parentSession : undefined\n        );\n\n    if (this.#targetFilterCallback && !this.#targetFilterCallback(target)) {\n      this.#ignoredTargets.add(targetInfo.targetId);\n      this.#finishInitializationIfReady(targetInfo.targetId);\n      await silentDetach();\n      return;\n    }\n\n    this.#setupAttachmentListeners(session);\n\n    if (isExistingTarget) {\n      (session as CdpCDPSession)._setTarget(target);\n      this.#attachedTargetsBySessionId.set(\n        session.id(),\n        this.#attachedTargetsByTargetId.get(targetInfo.targetId)!\n      );\n    } else {\n      target._initialize();\n      this.#attachedTargetsByTargetId.set(targetInfo.targetId, target);\n      this.#attachedTargetsBySessionId.set(session.id(), target);\n    }\n\n    parentSession.emit(CDPSessionEvent.Ready, session);\n\n    this.#targetsIdsForInit.delete(target._targetId);\n    if (!isExistingTarget) {\n      this.emit(TargetManagerEvent.TargetAvailable, target);\n    }\n    this.#finishInitializationIfReady();\n\n    // TODO: the browser might be shutting down here. What do we do with the\n    // error?\n    await Promise.all([\n      session.send('Target.setAutoAttach', {\n        waitForDebuggerOnStart: true,\n        flatten: true,\n        autoAttach: true,\n        filter: this.#discoveryFilter,\n      }),\n      session.send('Runtime.runIfWaitingForDebugger'),\n    ]).catch(debugError);\n  };\n\n  #finishInitializationIfReady(targetId?: string): void {\n    targetId !== undefined && this.#targetsIdsForInit.delete(targetId);\n    if (this.#targetsIdsForInit.size === 0) {\n      this.#initializeDeferred.resolve();\n    }\n  }\n\n  #onDetachedFromTarget = (\n    _parentSession: Connection | CDPSession,\n    event: Protocol.Target.DetachedFromTargetEvent\n  ) => {\n    const target = this.#attachedTargetsBySessionId.get(event.sessionId);\n\n    this.#attachedTargetsBySessionId.delete(event.sessionId);\n\n    if (!target) {\n      return;\n    }\n\n    this.#attachedTargetsByTargetId.delete(target._targetId);\n    this.emit(TargetManagerEvent.TargetGone, target);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}