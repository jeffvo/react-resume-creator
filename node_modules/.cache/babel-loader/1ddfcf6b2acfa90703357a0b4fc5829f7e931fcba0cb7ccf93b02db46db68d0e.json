{"ast":null,"code":"var isHexDigit = require('../../tokenizer').isHexDigit;\nvar cmpChar = require('../../tokenizer').cmpChar;\nvar TYPE = require('../../tokenizer').TYPE;\nvar NAME = require('../../tokenizer').NAME;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\nvar U = 0x0075; // U+0075 LATIN SMALL LETTER U (u)\n\nfunction eatHexSequence(offset, allowDash) {\n  for (var pos = this.scanner.tokenStart + offset, len = 0; pos < this.scanner.tokenEnd; pos++) {\n    var code = this.scanner.source.charCodeAt(pos);\n    if (code === HYPHENMINUS && allowDash && len !== 0) {\n      if (eatHexSequence.call(this, offset + len + 1, false) === 0) {\n        this.error();\n      }\n      return -1;\n    }\n    if (!isHexDigit(code)) {\n      this.error(allowDash && len !== 0 ? 'HyphenMinus' + (len < 6 ? ' or hex digit' : '') + ' is expected' : len < 6 ? 'Hex digit is expected' : 'Unexpected input', pos);\n    }\n    if (++len > 6) {\n      this.error('Too many hex digits', pos);\n    }\n    ;\n  }\n  this.scanner.next();\n  return len;\n}\nfunction eatQuestionMarkSequence(max) {\n  var count = 0;\n  while (this.scanner.isDelim(QUESTIONMARK)) {\n    if (++count > max) {\n      this.error('Too many question marks');\n    }\n    this.scanner.next();\n  }\n}\nfunction startsWith(code) {\n  if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== code) {\n    this.error(NAME[code] + ' is expected');\n  }\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nfunction scanUnicodeRange() {\n  var hexLength = 0;\n\n  // u '+' <ident-token> '?'*\n  // u '+' '?'+\n  if (this.scanner.isDelim(PLUSSIGN)) {\n    this.scanner.next();\n    if (this.scanner.tokenType === IDENT) {\n      hexLength = eatHexSequence.call(this, 0, true);\n      if (hexLength > 0) {\n        eatQuestionMarkSequence.call(this, 6 - hexLength);\n      }\n      return;\n    }\n    if (this.scanner.isDelim(QUESTIONMARK)) {\n      this.scanner.next();\n      eatQuestionMarkSequence.call(this, 5);\n      return;\n    }\n    this.error('Hex digit or question mark is expected');\n    return;\n  }\n\n  // u <number-token> '?'*\n  // u <number-token> <dimension-token>\n  // u <number-token> <number-token>\n  if (this.scanner.tokenType === NUMBER) {\n    startsWith.call(this, PLUSSIGN);\n    hexLength = eatHexSequence.call(this, 1, true);\n    if (this.scanner.isDelim(QUESTIONMARK)) {\n      eatQuestionMarkSequence.call(this, 6 - hexLength);\n      return;\n    }\n    if (this.scanner.tokenType === DIMENSION || this.scanner.tokenType === NUMBER) {\n      startsWith.call(this, HYPHENMINUS);\n      eatHexSequence.call(this, 1, false);\n      return;\n    }\n    return;\n  }\n\n  // u <dimension-token> '?'*\n  if (this.scanner.tokenType === DIMENSION) {\n    startsWith.call(this, PLUSSIGN);\n    hexLength = eatHexSequence.call(this, 1, true);\n    if (hexLength > 0) {\n      eatQuestionMarkSequence.call(this, 6 - hexLength);\n    }\n    return;\n  }\n  this.error();\n}\nmodule.exports = {\n  name: 'UnicodeRange',\n  structure: {\n    value: String\n  },\n  parse: function () {\n    var start = this.scanner.tokenStart;\n\n    // U or u\n    if (!cmpChar(this.scanner.source, start, U)) {\n      this.error('U is expected');\n    }\n    if (!cmpChar(this.scanner.source, start + 1, PLUSSIGN)) {\n      this.error('Plus sign is expected');\n    }\n    this.scanner.next();\n    scanUnicodeRange.call(this);\n    return {\n      type: 'UnicodeRange',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      value: this.scanner.substrToCursor(start)\n    };\n  },\n  generate: function (node) {\n    this.chunk(node.value);\n  }\n};","map":{"version":3,"names":["isHexDigit","require","cmpChar","TYPE","NAME","IDENT","Ident","NUMBER","Number","DIMENSION","Dimension","PLUSSIGN","HYPHENMINUS","QUESTIONMARK","U","eatHexSequence","offset","allowDash","pos","scanner","tokenStart","len","tokenEnd","code","source","charCodeAt","call","error","next","eatQuestionMarkSequence","max","count","isDelim","startsWith","scanUnicodeRange","hexLength","tokenType","module","exports","name","structure","value","String","parse","start","type","loc","getLocation","substrToCursor","generate","node","chunk"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/UnicodeRange.js"],"sourcesContent":["var isHexDigit = require('../../tokenizer').isHexDigit;\nvar cmpChar = require('../../tokenizer').cmpChar;\nvar TYPE = require('../../tokenizer').TYPE;\nvar NAME = require('../../tokenizer').NAME;\n\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B;     // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D;  // U+002D HYPHEN-MINUS (-)\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\nvar U = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)\n\nfunction eatHexSequence(offset, allowDash) {\n    for (var pos = this.scanner.tokenStart + offset, len = 0; pos < this.scanner.tokenEnd; pos++) {\n        var code = this.scanner.source.charCodeAt(pos);\n\n        if (code === HYPHENMINUS && allowDash && len !== 0) {\n            if (eatHexSequence.call(this, offset + len + 1, false) === 0) {\n                this.error();\n            }\n\n            return -1;\n        }\n\n        if (!isHexDigit(code)) {\n            this.error(\n                allowDash && len !== 0\n                    ? 'HyphenMinus' + (len < 6 ? ' or hex digit' : '') + ' is expected'\n                    : (len < 6 ? 'Hex digit is expected' : 'Unexpected input'),\n                pos\n            );\n        }\n\n        if (++len > 6) {\n            this.error('Too many hex digits', pos);\n        };\n    }\n\n    this.scanner.next();\n    return len;\n}\n\nfunction eatQuestionMarkSequence(max) {\n    var count = 0;\n\n    while (this.scanner.isDelim(QUESTIONMARK)) {\n        if (++count > max) {\n            this.error('Too many question marks');\n        }\n\n        this.scanner.next();\n    }\n}\n\nfunction startsWith(code) {\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== code) {\n        this.error(NAME[code] + ' is expected');\n    }\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nfunction scanUnicodeRange() {\n    var hexLength = 0;\n\n    // u '+' <ident-token> '?'*\n    // u '+' '?'+\n    if (this.scanner.isDelim(PLUSSIGN)) {\n        this.scanner.next();\n\n        if (this.scanner.tokenType === IDENT) {\n            hexLength = eatHexSequence.call(this, 0, true);\n            if (hexLength > 0) {\n                eatQuestionMarkSequence.call(this, 6 - hexLength);\n            }\n            return;\n        }\n\n        if (this.scanner.isDelim(QUESTIONMARK)) {\n            this.scanner.next();\n            eatQuestionMarkSequence.call(this, 5);\n            return;\n        }\n\n        this.error('Hex digit or question mark is expected');\n        return;\n    }\n\n    // u <number-token> '?'*\n    // u <number-token> <dimension-token>\n    // u <number-token> <number-token>\n    if (this.scanner.tokenType === NUMBER) {\n        startsWith.call(this, PLUSSIGN);\n        hexLength = eatHexSequence.call(this, 1, true);\n\n        if (this.scanner.isDelim(QUESTIONMARK)) {\n            eatQuestionMarkSequence.call(this, 6 - hexLength);\n            return;\n        }\n\n        if (this.scanner.tokenType === DIMENSION ||\n            this.scanner.tokenType === NUMBER) {\n            startsWith.call(this, HYPHENMINUS);\n            eatHexSequence.call(this, 1, false);\n            return;\n        }\n\n        return;\n    }\n\n    // u <dimension-token> '?'*\n    if (this.scanner.tokenType === DIMENSION) {\n        startsWith.call(this, PLUSSIGN);\n        hexLength = eatHexSequence.call(this, 1, true);\n\n        if (hexLength > 0) {\n            eatQuestionMarkSequence.call(this, 6 - hexLength);\n        }\n\n        return;\n    }\n\n    this.error();\n}\n\nmodule.exports = {\n    name: 'UnicodeRange',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        // U or u\n        if (!cmpChar(this.scanner.source, start, U)) {\n            this.error('U is expected');\n        }\n\n        if (!cmpChar(this.scanner.source, start + 1, PLUSSIGN)) {\n            this.error('Plus sign is expected');\n        }\n\n        this.scanner.next();\n        scanUnicodeRange.call(this);\n\n        return {\n            type: 'UnicodeRange',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.value);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}