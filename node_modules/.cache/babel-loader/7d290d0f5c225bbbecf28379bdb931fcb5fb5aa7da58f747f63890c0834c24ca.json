{"ast":null,"code":"//\n//                              list\n//                            ┌──────┐\n//             ┌──────────────┼─head │\n//             │              │ tail─┼──────────────┐\n//             │              └──────┘              │\n//             ▼                                    ▼\n//            item        item        item        item\n//          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐\n//  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │\n//          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null\n//          ├──────┤    ├──────┤    ├──────┤    ├──────┤\n//          │ data │    │ data │    │ data │    │ data │\n//          └──────┘    └──────┘    └──────┘    └──────┘\n//\n\nfunction createItem(data) {\n  return {\n    prev: null,\n    next: null,\n    data: data\n  };\n}\nfunction allocateCursor(node, prev, next) {\n  var cursor;\n  if (cursors !== null) {\n    cursor = cursors;\n    cursors = cursors.cursor;\n    cursor.prev = prev;\n    cursor.next = next;\n    cursor.cursor = node.cursor;\n  } else {\n    cursor = {\n      prev: prev,\n      next: next,\n      cursor: node.cursor\n    };\n  }\n  node.cursor = cursor;\n  return cursor;\n}\nfunction releaseCursor(node) {\n  var cursor = node.cursor;\n  node.cursor = cursor.cursor;\n  cursor.prev = null;\n  cursor.next = null;\n  cursor.cursor = cursors;\n  cursors = cursor;\n}\nvar cursors = null;\nvar List = function () {\n  this.cursor = null;\n  this.head = null;\n  this.tail = null;\n};\nList.createItem = createItem;\nList.prototype.createItem = createItem;\nList.prototype.updateCursors = function (prevOld, prevNew, nextOld, nextNew) {\n  var cursor = this.cursor;\n  while (cursor !== null) {\n    if (cursor.prev === prevOld) {\n      cursor.prev = prevNew;\n    }\n    if (cursor.next === nextOld) {\n      cursor.next = nextNew;\n    }\n    cursor = cursor.cursor;\n  }\n};\nList.prototype.getSize = function () {\n  var size = 0;\n  var cursor = this.head;\n  while (cursor) {\n    size++;\n    cursor = cursor.next;\n  }\n  return size;\n};\nList.prototype.fromArray = function (array) {\n  var cursor = null;\n  this.head = null;\n  for (var i = 0; i < array.length; i++) {\n    var item = createItem(array[i]);\n    if (cursor !== null) {\n      cursor.next = item;\n    } else {\n      this.head = item;\n    }\n    item.prev = cursor;\n    cursor = item;\n  }\n  this.tail = cursor;\n  return this;\n};\nList.prototype.toArray = function () {\n  var cursor = this.head;\n  var result = [];\n  while (cursor) {\n    result.push(cursor.data);\n    cursor = cursor.next;\n  }\n  return result;\n};\nList.prototype.toJSON = List.prototype.toArray;\nList.prototype.isEmpty = function () {\n  return this.head === null;\n};\nList.prototype.first = function () {\n  return this.head && this.head.data;\n};\nList.prototype.last = function () {\n  return this.tail && this.tail.data;\n};\nList.prototype.each = function (fn, context) {\n  var item;\n  if (context === undefined) {\n    context = this;\n  }\n\n  // push cursor\n  var cursor = allocateCursor(this, null, this.head);\n  while (cursor.next !== null) {\n    item = cursor.next;\n    cursor.next = item.next;\n    fn.call(context, item.data, item, this);\n  }\n\n  // pop cursor\n  releaseCursor(this);\n};\nList.prototype.forEach = List.prototype.each;\nList.prototype.eachRight = function (fn, context) {\n  var item;\n  if (context === undefined) {\n    context = this;\n  }\n\n  // push cursor\n  var cursor = allocateCursor(this, this.tail, null);\n  while (cursor.prev !== null) {\n    item = cursor.prev;\n    cursor.prev = item.prev;\n    fn.call(context, item.data, item, this);\n  }\n\n  // pop cursor\n  releaseCursor(this);\n};\nList.prototype.forEachRight = List.prototype.eachRight;\nList.prototype.reduce = function (fn, initialValue, context) {\n  var item;\n  if (context === undefined) {\n    context = this;\n  }\n\n  // push cursor\n  var cursor = allocateCursor(this, null, this.head);\n  var acc = initialValue;\n  while (cursor.next !== null) {\n    item = cursor.next;\n    cursor.next = item.next;\n    acc = fn.call(context, acc, item.data, item, this);\n  }\n\n  // pop cursor\n  releaseCursor(this);\n  return acc;\n};\nList.prototype.reduceRight = function (fn, initialValue, context) {\n  var item;\n  if (context === undefined) {\n    context = this;\n  }\n\n  // push cursor\n  var cursor = allocateCursor(this, this.tail, null);\n  var acc = initialValue;\n  while (cursor.prev !== null) {\n    item = cursor.prev;\n    cursor.prev = item.prev;\n    acc = fn.call(context, acc, item.data, item, this);\n  }\n\n  // pop cursor\n  releaseCursor(this);\n  return acc;\n};\nList.prototype.nextUntil = function (start, fn, context) {\n  if (start === null) {\n    return;\n  }\n  var item;\n  if (context === undefined) {\n    context = this;\n  }\n\n  // push cursor\n  var cursor = allocateCursor(this, null, start);\n  while (cursor.next !== null) {\n    item = cursor.next;\n    cursor.next = item.next;\n    if (fn.call(context, item.data, item, this)) {\n      break;\n    }\n  }\n\n  // pop cursor\n  releaseCursor(this);\n};\nList.prototype.prevUntil = function (start, fn, context) {\n  if (start === null) {\n    return;\n  }\n  var item;\n  if (context === undefined) {\n    context = this;\n  }\n\n  // push cursor\n  var cursor = allocateCursor(this, start, null);\n  while (cursor.prev !== null) {\n    item = cursor.prev;\n    cursor.prev = item.prev;\n    if (fn.call(context, item.data, item, this)) {\n      break;\n    }\n  }\n\n  // pop cursor\n  releaseCursor(this);\n};\nList.prototype.some = function (fn, context) {\n  var cursor = this.head;\n  if (context === undefined) {\n    context = this;\n  }\n  while (cursor !== null) {\n    if (fn.call(context, cursor.data, cursor, this)) {\n      return true;\n    }\n    cursor = cursor.next;\n  }\n  return false;\n};\nList.prototype.map = function (fn, context) {\n  var result = new List();\n  var cursor = this.head;\n  if (context === undefined) {\n    context = this;\n  }\n  while (cursor !== null) {\n    result.appendData(fn.call(context, cursor.data, cursor, this));\n    cursor = cursor.next;\n  }\n  return result;\n};\nList.prototype.filter = function (fn, context) {\n  var result = new List();\n  var cursor = this.head;\n  if (context === undefined) {\n    context = this;\n  }\n  while (cursor !== null) {\n    if (fn.call(context, cursor.data, cursor, this)) {\n      result.appendData(cursor.data);\n    }\n    cursor = cursor.next;\n  }\n  return result;\n};\nList.prototype.clear = function () {\n  this.head = null;\n  this.tail = null;\n};\nList.prototype.copy = function () {\n  var result = new List();\n  var cursor = this.head;\n  while (cursor !== null) {\n    result.insert(createItem(cursor.data));\n    cursor = cursor.next;\n  }\n  return result;\n};\nList.prototype.prepend = function (item) {\n  //      head\n  //    ^\n  // item\n  this.updateCursors(null, item, this.head, item);\n\n  // insert to the beginning of the list\n  if (this.head !== null) {\n    // new item <- first item\n    this.head.prev = item;\n\n    // new item -> first item\n    item.next = this.head;\n  } else {\n    // if list has no head, then it also has no tail\n    // in this case tail points to the new item\n    this.tail = item;\n  }\n\n  // head always points to new item\n  this.head = item;\n  return this;\n};\nList.prototype.prependData = function (data) {\n  return this.prepend(createItem(data));\n};\nList.prototype.append = function (item) {\n  return this.insert(item);\n};\nList.prototype.appendData = function (data) {\n  return this.insert(createItem(data));\n};\nList.prototype.insert = function (item, before) {\n  if (before !== undefined && before !== null) {\n    // prev   before\n    //      ^\n    //     item\n    this.updateCursors(before.prev, item, before, item);\n    if (before.prev === null) {\n      // insert to the beginning of list\n      if (this.head !== before) {\n        throw new Error('before doesn\\'t belong to list');\n      }\n\n      // since head points to before therefore list doesn't empty\n      // no need to check tail\n      this.head = item;\n      before.prev = item;\n      item.next = before;\n      this.updateCursors(null, item);\n    } else {\n      // insert between two items\n      before.prev.next = item;\n      item.prev = before.prev;\n      before.prev = item;\n      item.next = before;\n    }\n  } else {\n    // tail\n    //      ^\n    //      item\n    this.updateCursors(this.tail, item, null, item);\n\n    // insert to the ending of the list\n    if (this.tail !== null) {\n      // last item -> new item\n      this.tail.next = item;\n\n      // last item <- new item\n      item.prev = this.tail;\n    } else {\n      // if list has no tail, then it also has no head\n      // in this case head points to new item\n      this.head = item;\n    }\n\n    // tail always points to new item\n    this.tail = item;\n  }\n  return this;\n};\nList.prototype.insertData = function (data, before) {\n  return this.insert(createItem(data), before);\n};\nList.prototype.remove = function (item) {\n  //      item\n  //       ^\n  // prev     next\n  this.updateCursors(item, item.prev, item, item.next);\n  if (item.prev !== null) {\n    item.prev.next = item.next;\n  } else {\n    if (this.head !== item) {\n      throw new Error('item doesn\\'t belong to list');\n    }\n    this.head = item.next;\n  }\n  if (item.next !== null) {\n    item.next.prev = item.prev;\n  } else {\n    if (this.tail !== item) {\n      throw new Error('item doesn\\'t belong to list');\n    }\n    this.tail = item.prev;\n  }\n  item.prev = null;\n  item.next = null;\n  return item;\n};\nList.prototype.push = function (data) {\n  this.insert(createItem(data));\n};\nList.prototype.pop = function () {\n  if (this.tail !== null) {\n    return this.remove(this.tail);\n  }\n};\nList.prototype.unshift = function (data) {\n  this.prepend(createItem(data));\n};\nList.prototype.shift = function () {\n  if (this.head !== null) {\n    return this.remove(this.head);\n  }\n};\nList.prototype.prependList = function (list) {\n  return this.insertList(list, this.head);\n};\nList.prototype.appendList = function (list) {\n  return this.insertList(list);\n};\nList.prototype.insertList = function (list, before) {\n  // ignore empty lists\n  if (list.head === null) {\n    return this;\n  }\n  if (before !== undefined && before !== null) {\n    this.updateCursors(before.prev, list.tail, before, list.head);\n\n    // insert in the middle of dist list\n    if (before.prev !== null) {\n      // before.prev <-> list.head\n      before.prev.next = list.head;\n      list.head.prev = before.prev;\n    } else {\n      this.head = list.head;\n    }\n    before.prev = list.tail;\n    list.tail.next = before;\n  } else {\n    this.updateCursors(this.tail, list.tail, null, list.head);\n\n    // insert to end of the list\n    if (this.tail !== null) {\n      // if destination list has a tail, then it also has a head,\n      // but head doesn't change\n\n      // dest tail -> source head\n      this.tail.next = list.head;\n\n      // dest tail <- source head\n      list.head.prev = this.tail;\n    } else {\n      // if list has no a tail, then it also has no a head\n      // in this case points head to new item\n      this.head = list.head;\n    }\n\n    // tail always start point to new item\n    this.tail = list.tail;\n  }\n  list.head = null;\n  list.tail = null;\n  return this;\n};\nList.prototype.replace = function (oldItem, newItemOrList) {\n  if ('head' in newItemOrList) {\n    this.insertList(newItemOrList, oldItem);\n  } else {\n    this.insert(newItemOrList, oldItem);\n  }\n  this.remove(oldItem);\n};\nmodule.exports = List;","map":{"version":3,"names":["createItem","data","prev","next","allocateCursor","node","cursor","cursors","releaseCursor","List","head","tail","prototype","updateCursors","prevOld","prevNew","nextOld","nextNew","getSize","size","fromArray","array","i","length","item","toArray","result","push","toJSON","isEmpty","first","last","each","fn","context","undefined","call","forEach","eachRight","forEachRight","reduce","initialValue","acc","reduceRight","nextUntil","start","prevUntil","some","map","appendData","filter","clear","copy","insert","prepend","prependData","append","before","Error","insertData","remove","pop","unshift","shift","prependList","list","insertList","appendList","replace","oldItem","newItemOrList","module","exports"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/common/List.js"],"sourcesContent":["//\n//                              list\n//                            ┌──────┐\n//             ┌──────────────┼─head │\n//             │              │ tail─┼──────────────┐\n//             │              └──────┘              │\n//             ▼                                    ▼\n//            item        item        item        item\n//          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐\n//  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │\n//          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null\n//          ├──────┤    ├──────┤    ├──────┤    ├──────┤\n//          │ data │    │ data │    │ data │    │ data │\n//          └──────┘    └──────┘    └──────┘    └──────┘\n//\n\nfunction createItem(data) {\n    return {\n        prev: null,\n        next: null,\n        data: data\n    };\n}\n\nfunction allocateCursor(node, prev, next) {\n    var cursor;\n\n    if (cursors !== null) {\n        cursor = cursors;\n        cursors = cursors.cursor;\n        cursor.prev = prev;\n        cursor.next = next;\n        cursor.cursor = node.cursor;\n    } else {\n        cursor = {\n            prev: prev,\n            next: next,\n            cursor: node.cursor\n        };\n    }\n\n    node.cursor = cursor;\n\n    return cursor;\n}\n\nfunction releaseCursor(node) {\n    var cursor = node.cursor;\n\n    node.cursor = cursor.cursor;\n    cursor.prev = null;\n    cursor.next = null;\n    cursor.cursor = cursors;\n    cursors = cursor;\n}\n\nvar cursors = null;\nvar List = function() {\n    this.cursor = null;\n    this.head = null;\n    this.tail = null;\n};\n\nList.createItem = createItem;\nList.prototype.createItem = createItem;\n\nList.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {\n    var cursor = this.cursor;\n\n    while (cursor !== null) {\n        if (cursor.prev === prevOld) {\n            cursor.prev = prevNew;\n        }\n\n        if (cursor.next === nextOld) {\n            cursor.next = nextNew;\n        }\n\n        cursor = cursor.cursor;\n    }\n};\n\nList.prototype.getSize = function() {\n    var size = 0;\n    var cursor = this.head;\n\n    while (cursor) {\n        size++;\n        cursor = cursor.next;\n    }\n\n    return size;\n};\n\nList.prototype.fromArray = function(array) {\n    var cursor = null;\n\n    this.head = null;\n\n    for (var i = 0; i < array.length; i++) {\n        var item = createItem(array[i]);\n\n        if (cursor !== null) {\n            cursor.next = item;\n        } else {\n            this.head = item;\n        }\n\n        item.prev = cursor;\n        cursor = item;\n    }\n\n    this.tail = cursor;\n\n    return this;\n};\n\nList.prototype.toArray = function() {\n    var cursor = this.head;\n    var result = [];\n\n    while (cursor) {\n        result.push(cursor.data);\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.toJSON = List.prototype.toArray;\n\nList.prototype.isEmpty = function() {\n    return this.head === null;\n};\n\nList.prototype.first = function() {\n    return this.head && this.head.data;\n};\n\nList.prototype.last = function() {\n    return this.tail && this.tail.data;\n};\n\nList.prototype.each = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, this.head);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.forEach = List.prototype.each;\n\nList.prototype.eachRight = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, this.tail, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.forEachRight = List.prototype.eachRight;\n\nList.prototype.reduce = function(fn, initialValue, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, this.head);\n    var acc = initialValue;\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        acc = fn.call(context, acc, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n\n    return acc;\n};\n\nList.prototype.reduceRight = function(fn, initialValue, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, this.tail, null);\n    var acc = initialValue;\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        acc = fn.call(context, acc, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n\n    return acc;\n};\n\nList.prototype.nextUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, start);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.prevUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, start, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.some = function(fn, context) {\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            return true;\n        }\n\n        cursor = cursor.next;\n    }\n\n    return false;\n};\n\nList.prototype.map = function(fn, context) {\n    var result = new List();\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        result.appendData(fn.call(context, cursor.data, cursor, this));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.filter = function(fn, context) {\n    var result = new List();\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            result.appendData(cursor.data);\n        }\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.clear = function() {\n    this.head = null;\n    this.tail = null;\n};\n\nList.prototype.copy = function() {\n    var result = new List();\n    var cursor = this.head;\n\n    while (cursor !== null) {\n        result.insert(createItem(cursor.data));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.prepend = function(item) {\n    //      head\n    //    ^\n    // item\n    this.updateCursors(null, item, this.head, item);\n\n    // insert to the beginning of the list\n    if (this.head !== null) {\n        // new item <- first item\n        this.head.prev = item;\n\n        // new item -> first item\n        item.next = this.head;\n    } else {\n        // if list has no head, then it also has no tail\n        // in this case tail points to the new item\n        this.tail = item;\n    }\n\n    // head always points to new item\n    this.head = item;\n\n    return this;\n};\n\nList.prototype.prependData = function(data) {\n    return this.prepend(createItem(data));\n};\n\nList.prototype.append = function(item) {\n    return this.insert(item);\n};\n\nList.prototype.appendData = function(data) {\n    return this.insert(createItem(data));\n};\n\nList.prototype.insert = function(item, before) {\n    if (before !== undefined && before !== null) {\n        // prev   before\n        //      ^\n        //     item\n        this.updateCursors(before.prev, item, before, item);\n\n        if (before.prev === null) {\n            // insert to the beginning of list\n            if (this.head !== before) {\n                throw new Error('before doesn\\'t belong to list');\n            }\n\n            // since head points to before therefore list doesn't empty\n            // no need to check tail\n            this.head = item;\n            before.prev = item;\n            item.next = before;\n\n            this.updateCursors(null, item);\n        } else {\n\n            // insert between two items\n            before.prev.next = item;\n            item.prev = before.prev;\n\n            before.prev = item;\n            item.next = before;\n        }\n    } else {\n        // tail\n        //      ^\n        //      item\n        this.updateCursors(this.tail, item, null, item);\n\n        // insert to the ending of the list\n        if (this.tail !== null) {\n            // last item -> new item\n            this.tail.next = item;\n\n            // last item <- new item\n            item.prev = this.tail;\n        } else {\n            // if list has no tail, then it also has no head\n            // in this case head points to new item\n            this.head = item;\n        }\n\n        // tail always points to new item\n        this.tail = item;\n    }\n\n    return this;\n};\n\nList.prototype.insertData = function(data, before) {\n    return this.insert(createItem(data), before);\n};\n\nList.prototype.remove = function(item) {\n    //      item\n    //       ^\n    // prev     next\n    this.updateCursors(item, item.prev, item, item.next);\n\n    if (item.prev !== null) {\n        item.prev.next = item.next;\n    } else {\n        if (this.head !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.head = item.next;\n    }\n\n    if (item.next !== null) {\n        item.next.prev = item.prev;\n    } else {\n        if (this.tail !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.tail = item.prev;\n    }\n\n    item.prev = null;\n    item.next = null;\n\n    return item;\n};\n\nList.prototype.push = function(data) {\n    this.insert(createItem(data));\n};\n\nList.prototype.pop = function() {\n    if (this.tail !== null) {\n        return this.remove(this.tail);\n    }\n};\n\nList.prototype.unshift = function(data) {\n    this.prepend(createItem(data));\n};\n\nList.prototype.shift = function() {\n    if (this.head !== null) {\n        return this.remove(this.head);\n    }\n};\n\nList.prototype.prependList = function(list) {\n    return this.insertList(list, this.head);\n};\n\nList.prototype.appendList = function(list) {\n    return this.insertList(list);\n};\n\nList.prototype.insertList = function(list, before) {\n    // ignore empty lists\n    if (list.head === null) {\n        return this;\n    }\n\n    if (before !== undefined && before !== null) {\n        this.updateCursors(before.prev, list.tail, before, list.head);\n\n        // insert in the middle of dist list\n        if (before.prev !== null) {\n            // before.prev <-> list.head\n            before.prev.next = list.head;\n            list.head.prev = before.prev;\n        } else {\n            this.head = list.head;\n        }\n\n        before.prev = list.tail;\n        list.tail.next = before;\n    } else {\n        this.updateCursors(this.tail, list.tail, null, list.head);\n\n        // insert to end of the list\n        if (this.tail !== null) {\n            // if destination list has a tail, then it also has a head,\n            // but head doesn't change\n\n            // dest tail -> source head\n            this.tail.next = list.head;\n\n            // dest tail <- source head\n            list.head.prev = this.tail;\n        } else {\n            // if list has no a tail, then it also has no a head\n            // in this case points head to new item\n            this.head = list.head;\n        }\n\n        // tail always start point to new item\n        this.tail = list.tail;\n    }\n\n    list.head = null;\n    list.tail = null;\n\n    return this;\n};\n\nList.prototype.replace = function(oldItem, newItemOrList) {\n    if ('head' in newItemOrList) {\n        this.insertList(newItemOrList, oldItem);\n    } else {\n        this.insert(newItemOrList, oldItem);\n    }\n\n    this.remove(oldItem);\n};\n\nmodule.exports = List;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}