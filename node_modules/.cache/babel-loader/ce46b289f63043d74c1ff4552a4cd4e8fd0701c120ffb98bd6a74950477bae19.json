{"ast":null,"code":"var isDigit = require('../../tokenizer').isDigit;\nvar TYPE = require('../../tokenizer').TYPE;\nvar NUMBER = TYPE.Number;\nvar DELIM = TYPE.Delim;\nvar SOLIDUS = 0x002F; // U+002F SOLIDUS (/)\nvar FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n\n// Terms of <ratio> should be a positive numbers (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without an exponent part.\n// Additional checking may be applied on lexer validation.\nfunction consumeNumber() {\n  this.scanner.skipWS();\n  var value = this.consume(NUMBER);\n  for (var i = 0; i < value.length; i++) {\n    var code = value.charCodeAt(i);\n    if (!isDigit(code) && code !== FULLSTOP) {\n      this.error('Unsigned number is expected', this.scanner.tokenStart - value.length + i);\n    }\n  }\n  if (Number(value) === 0) {\n    this.error('Zero number is not allowed', this.scanner.tokenStart - value.length);\n  }\n  return value;\n}\n\n// <positive-integer> S* '/' S* <positive-integer>\nmodule.exports = {\n  name: 'Ratio',\n  structure: {\n    left: String,\n    right: String\n  },\n  parse: function () {\n    var start = this.scanner.tokenStart;\n    var left = consumeNumber.call(this);\n    var right;\n    this.scanner.skipWS();\n    if (!this.scanner.isDelim(SOLIDUS)) {\n      this.error('Solidus is expected');\n    }\n    this.eat(DELIM);\n    right = consumeNumber.call(this);\n    return {\n      type: 'Ratio',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      left: left,\n      right: right\n    };\n  },\n  generate: function (node) {\n    this.chunk(node.left);\n    this.chunk('/');\n    this.chunk(node.right);\n  }\n};","map":{"version":3,"names":["isDigit","require","TYPE","NUMBER","Number","DELIM","Delim","SOLIDUS","FULLSTOP","consumeNumber","scanner","skipWS","value","consume","i","length","code","charCodeAt","error","tokenStart","module","exports","name","structure","left","String","right","parse","start","call","isDelim","eat","type","loc","getLocation","generate","node","chunk"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/node_modules/css-tree/lib/syntax/node/Ratio.js"],"sourcesContent":["var isDigit = require('../../tokenizer').isDigit;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar NUMBER = TYPE.Number;\nvar DELIM = TYPE.Delim;\nvar SOLIDUS = 0x002F;  // U+002F SOLIDUS (/)\nvar FULLSTOP = 0x002E; // U+002E FULL STOP (.)\n\n// Terms of <ratio> should be a positive numbers (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without an exponent part.\n// Additional checking may be applied on lexer validation.\nfunction consumeNumber() {\n    this.scanner.skipWS();\n\n    var value = this.consume(NUMBER);\n\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i);\n        if (!isDigit(code) && code !== FULLSTOP) {\n            this.error('Unsigned number is expected', this.scanner.tokenStart - value.length + i);\n        }\n    }\n\n    if (Number(value) === 0) {\n        this.error('Zero number is not allowed', this.scanner.tokenStart - value.length);\n    }\n\n    return value;\n}\n\n// <positive-integer> S* '/' S* <positive-integer>\nmodule.exports = {\n    name: 'Ratio',\n    structure: {\n        left: String,\n        right: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var left = consumeNumber.call(this);\n        var right;\n\n        this.scanner.skipWS();\n\n        if (!this.scanner.isDelim(SOLIDUS)) {\n            this.error('Solidus is expected');\n        }\n        this.eat(DELIM);\n        right = consumeNumber.call(this);\n\n        return {\n            type: 'Ratio',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            left: left,\n            right: right\n        };\n    },\n    generate: function(node) {\n        this.chunk(node.left);\n        this.chunk('/');\n        this.chunk(node.right);\n    }\n};\n"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,iBAAiB,CAAC,CAACD,OAAO;AAChD,IAAIE,IAAI,GAAGD,OAAO,CAAC,iBAAiB,CAAC,CAACC,IAAI;AAE1C,IAAIC,MAAM,GAAGD,IAAI,CAACE,MAAM;AACxB,IAAIC,KAAK,GAAGH,IAAI,CAACI,KAAK;AACtB,IAAIC,OAAO,GAAG,MAAM,CAAC,CAAE;AACvB,IAAIC,QAAQ,GAAG,MAAM,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAA,EAAG;EACrB,IAAI,CAACC,OAAO,CAACC,MAAM,CAAC,CAAC;EAErB,IAAIC,KAAK,GAAG,IAAI,CAACC,OAAO,CAACV,MAAM,CAAC;EAEhC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAIE,IAAI,GAAGJ,KAAK,CAACK,UAAU,CAACH,CAAC,CAAC;IAC9B,IAAI,CAACd,OAAO,CAACgB,IAAI,CAAC,IAAIA,IAAI,KAAKR,QAAQ,EAAE;MACrC,IAAI,CAACU,KAAK,CAAC,6BAA6B,EAAE,IAAI,CAACR,OAAO,CAACS,UAAU,GAAGP,KAAK,CAACG,MAAM,GAAGD,CAAC,CAAC;IACzF;EACJ;EAEA,IAAIV,MAAM,CAACQ,KAAK,CAAC,KAAK,CAAC,EAAE;IACrB,IAAI,CAACM,KAAK,CAAC,4BAA4B,EAAE,IAAI,CAACR,OAAO,CAACS,UAAU,GAAGP,KAAK,CAACG,MAAM,CAAC;EACpF;EAEA,OAAOH,KAAK;AAChB;;AAEA;AACAQ,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAE;IACPC,IAAI,EAAEC,MAAM;IACZC,KAAK,EAAED;EACX,CAAC;EACDE,KAAK,EAAE,SAAAA,CAAA,EAAW;IACd,IAAIC,KAAK,GAAG,IAAI,CAAClB,OAAO,CAACS,UAAU;IACnC,IAAIK,IAAI,GAAGf,aAAa,CAACoB,IAAI,CAAC,IAAI,CAAC;IACnC,IAAIH,KAAK;IAET,IAAI,CAAChB,OAAO,CAACC,MAAM,CAAC,CAAC;IAErB,IAAI,CAAC,IAAI,CAACD,OAAO,CAACoB,OAAO,CAACvB,OAAO,CAAC,EAAE;MAChC,IAAI,CAACW,KAAK,CAAC,qBAAqB,CAAC;IACrC;IACA,IAAI,CAACa,GAAG,CAAC1B,KAAK,CAAC;IACfqB,KAAK,GAAGjB,aAAa,CAACoB,IAAI,CAAC,IAAI,CAAC;IAEhC,OAAO;MACHG,IAAI,EAAE,OAAO;MACbC,GAAG,EAAE,IAAI,CAACC,WAAW,CAACN,KAAK,EAAE,IAAI,CAAClB,OAAO,CAACS,UAAU,CAAC;MACrDK,IAAI,EAAEA,IAAI;MACVE,KAAK,EAAEA;IACX,CAAC;EACL,CAAC;EACDS,QAAQ,EAAE,SAAAA,CAASC,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACZ,IAAI,CAAC;IACrB,IAAI,CAACa,KAAK,CAAC,GAAG,CAAC;IACf,IAAI,CAACA,KAAK,CAACD,IAAI,CAACV,KAAK,CAAC;EAC1B;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}