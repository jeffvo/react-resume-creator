{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Browser as SupportedBrowser, resolveBuildId, detectBrowserPlatform, getInstalledBrowsers, uninstall } from '@puppeteer/browsers';\nimport { Puppeteer } from '../common/Puppeteer.js';\nimport { PUPPETEER_REVISIONS } from '../revisions.js';\nimport { ChromeLauncher } from './ChromeLauncher.js';\nimport { FirefoxLauncher } from './FirefoxLauncher.js';\n/**\n * Extends the main {@link Puppeteer} class with Node specific behaviour for\n * fetching and downloading browsers.\n *\n * If you're using Puppeteer in a Node environment, this is the class you'll get\n * when you run `require('puppeteer')` (or the equivalent ES `import`).\n *\n * @remarks\n * The most common method to use is {@link PuppeteerNode.launch | launch}, which\n * is used to launch and connect to a new browser instance.\n *\n * See {@link Puppeteer | the main Puppeteer class} for methods common to all\n * environments, such as {@link Puppeteer.connect}.\n *\n * @example\n * The following is a typical example of using Puppeteer to drive automation:\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n * Once you have created a `page` you have access to a large API to interact\n * with the page, navigate, or find certain elements in that page.\n * The {@link Page | `page` documentation} lists all the available methods.\n *\n * @public\n */\nexport class PuppeteerNode extends Puppeteer {\n  #_launcher;\n  #lastLaunchedProduct;\n  /**\n   * @internal\n   */\n  defaultBrowserRevision;\n  /**\n   * @internal\n   */\n  configuration = {};\n  /**\n   * @internal\n   */\n  constructor(settings) {\n    const {\n      configuration,\n      ...commonSettings\n    } = settings;\n    super(commonSettings);\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    switch (this.configuration.defaultProduct) {\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        break;\n      default:\n        this.configuration.defaultProduct = 'chrome';\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        break;\n    }\n    this.connect = this.connect.bind(this);\n    this.launch = this.launch.bind(this);\n    this.executablePath = this.executablePath.bind(this);\n    this.defaultArgs = this.defaultArgs.bind(this);\n    this.trimCache = this.trimCache.bind(this);\n  }\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n  connect(options) {\n    return super.connect(options);\n  }\n  /**\n   * Launches a browser instance with given arguments and options when\n   * specified.\n   *\n   * When using with `puppeteer-core`,\n   * {@link LaunchOptions | options.executablePath} or\n   * {@link LaunchOptions | options.channel} must be provided.\n   *\n   * @example\n   * You can use {@link LaunchOptions | options.ignoreDefaultArgs}\n   * to filter out `--mute-audio` from default arguments:\n   *\n   * ```ts\n   * const browser = await puppeteer.launch({\n   *   ignoreDefaultArgs: ['--mute-audio'],\n   * });\n   * ```\n   *\n   * @remarks\n   * Puppeteer can also be used to control the Chrome browser, but it works best\n   * with the version of Chrome for Testing downloaded by default.\n   * There is no guarantee it will work with any other version. If Google Chrome\n   * (rather than Chrome for Testing) is preferred, a\n   * {@link https://www.google.com/chrome/browser/canary.html | Chrome Canary}\n   * or\n   * {@link https://www.chromium.org/getting-involved/dev-channel | Dev Channel}\n   * build is suggested. See\n   * {@link https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/ | this article}\n   * for a description of the differences between Chromium and Chrome.\n   * {@link https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md | This article}\n   * describes some differences for Linux users. See\n   * {@link https://developer.chrome.com/blog/chrome-for-testing/ | this doc} for the description\n   * of Chrome for Testing.\n   *\n   * @param options - Options to configure launching behavior.\n   */\n  launch(options = {}) {\n    const {\n      product = this.defaultProduct\n    } = options;\n    this.#lastLaunchedProduct = product;\n    return this.#launcher.launch(options);\n  }\n  /**\n   * @internal\n   */\n  get #launcher() {\n    if (this.#_launcher && this.#_launcher.product === this.lastLaunchedProduct) {\n      return this.#_launcher;\n    }\n    switch (this.lastLaunchedProduct) {\n      case 'chrome':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        this.#_launcher = new ChromeLauncher(this);\n        break;\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        this.#_launcher = new FirefoxLauncher(this);\n        break;\n      default:\n        throw new Error(`Unknown product: ${this.#lastLaunchedProduct}`);\n    }\n    return this.#_launcher;\n  }\n  /**\n   * The default executable path.\n   */\n  executablePath(channel) {\n    return this.#launcher.executablePath(channel);\n  }\n  /**\n   * @internal\n   */\n  get browserRevision() {\n    return this.#_launcher?.getActualBrowserRevision() ?? this.configuration.browserRevision ?? this.defaultBrowserRevision;\n  }\n  /**\n   * The default download path for puppeteer. For puppeteer-core, this\n   * code should never be called as it is never defined.\n   *\n   * @internal\n   */\n  get defaultDownloadPath() {\n    return this.configuration.cacheDirectory;\n  }\n  /**\n   * The name of the browser that was last launched.\n   */\n  get lastLaunchedProduct() {\n    return this.#lastLaunchedProduct ?? this.defaultProduct;\n  }\n  /**\n   * The name of the browser that will be launched by default. For\n   * `puppeteer`, this is influenced by your configuration. Otherwise, it's\n   * `chrome`.\n   */\n  get defaultProduct() {\n    return this.configuration.defaultProduct ?? 'chrome';\n  }\n  /**\n   * @deprecated Do not use as this field as it does not take into account\n   * multiple browsers of different types. Use\n   * {@link PuppeteerNode.defaultProduct | defaultProduct} or\n   * {@link PuppeteerNode.lastLaunchedProduct | lastLaunchedProduct}.\n   *\n   * @returns The name of the browser that is under automation.\n   */\n  get product() {\n    return this.#launcher.product;\n  }\n  /**\n   * @param options - Set of configurable options to set on the browser.\n   *\n   * @returns The default flags that Chromium will be launched with.\n   */\n  defaultArgs(options = {}) {\n    return this.#launcher.defaultArgs(options);\n  }\n  /**\n   * Removes all non-current Firefox and Chrome binaries in the cache directory\n   * identified by the provided Puppeteer configuration. The current browser\n   * version is determined by resolving PUPPETEER_REVISIONS from Puppeteer\n   * unless `configuration.browserRevision` is provided.\n   *\n   * @remarks\n   *\n   * Note that the method does not check if any other Puppeteer versions\n   * installed on the host that use the same cache directory require the\n   * non-current binaries.\n   *\n   * @public\n   */\n  async trimCache() {\n    const platform = detectBrowserPlatform();\n    if (!platform) {\n      throw new Error('The current platform is not supported.');\n    }\n    const cacheDir = this.configuration.cacheDirectory;\n    const installedBrowsers = await getInstalledBrowsers({\n      cacheDir\n    });\n    const product = this.configuration.defaultProduct;\n    const puppeteerBrowsers = [{\n      product: 'chrome',\n      browser: SupportedBrowser.CHROME,\n      currentBuildId: ''\n    }, {\n      product: 'firefox',\n      browser: SupportedBrowser.FIREFOX,\n      currentBuildId: ''\n    }];\n    // Resolve current buildIds.\n    for (const item of puppeteerBrowsers) {\n      item.currentBuildId = await resolveBuildId(item.browser, platform, (product === item.product ? this.configuration.browserRevision : null) || PUPPETEER_REVISIONS[item.product]);\n    }\n    const currentBrowserBuilds = new Set(puppeteerBrowsers.map(browser => {\n      return `${browser.browser}_${browser.currentBuildId}`;\n    }));\n    const currentBrowsers = new Set(puppeteerBrowsers.map(browser => {\n      return browser.browser;\n    }));\n    for (const installedBrowser of installedBrowsers) {\n      // Don't uninstall browsers that are not managed by Puppeteer yet.\n      if (!currentBrowsers.has(installedBrowser.browser)) {\n        continue;\n      }\n      // Keep the browser build used by the current Puppeteer installation.\n      if (currentBrowserBuilds.has(`${installedBrowser.browser}_${installedBrowser.buildId}`)) {\n        continue;\n      }\n      await uninstall({\n        browser: installedBrowser.browser,\n        platform,\n        cacheDir,\n        buildId: installedBrowser.buildId\n      });\n    }\n  }\n}","map":{"version":3,"names":["Browser","SupportedBrowser","resolveBuildId","detectBrowserPlatform","getInstalledBrowsers","uninstall","Puppeteer","PUPPETEER_REVISIONS","ChromeLauncher","FirefoxLauncher","PuppeteerNode","_launcher","lastLaunchedProduct","defaultBrowserRevision","configuration","constructor","settings","commonSettings","defaultProduct","firefox","chrome","connect","bind","launch","executablePath","defaultArgs","trimCache","options","product","launcher","#launcher","Error","channel","browserRevision","getActualBrowserRevision","defaultDownloadPath","cacheDirectory","platform","cacheDir","installedBrowsers","puppeteerBrowsers","browser","CHROME","currentBuildId","FIREFOX","item","currentBrowserBuilds","Set","map","currentBrowsers","installedBrowser","has","buildId"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/puppeteer-core/src/node/PuppeteerNode.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Browser as SupportedBrowser,\n  resolveBuildId,\n  detectBrowserPlatform,\n  getInstalledBrowsers,\n  uninstall,\n} from '@puppeteer/browsers';\n\nimport type {Browser} from '../api/Browser.js';\nimport type {Configuration} from '../common/Configuration.js';\nimport type {\n  ConnectOptions,\n  BrowserConnectOptions,\n} from '../common/ConnectOptions.js';\nimport type {Product} from '../common/Product.js';\nimport {type CommonPuppeteerSettings, Puppeteer} from '../common/Puppeteer.js';\nimport {PUPPETEER_REVISIONS} from '../revisions.js';\n\nimport {ChromeLauncher} from './ChromeLauncher.js';\nimport {FirefoxLauncher} from './FirefoxLauncher.js';\nimport type {\n  BrowserLaunchArgumentOptions,\n  ChromeReleaseChannel,\n  LaunchOptions,\n} from './LaunchOptions.js';\nimport type {ProductLauncher} from './ProductLauncher.js';\n\n/**\n * @public\n */\nexport interface PuppeteerLaunchOptions\n  extends LaunchOptions,\n    BrowserLaunchArgumentOptions,\n    BrowserConnectOptions {\n  product?: Product;\n  extraPrefsFirefox?: Record<string, unknown>;\n}\n\n/**\n * Extends the main {@link Puppeteer} class with Node specific behaviour for\n * fetching and downloading browsers.\n *\n * If you're using Puppeteer in a Node environment, this is the class you'll get\n * when you run `require('puppeteer')` (or the equivalent ES `import`).\n *\n * @remarks\n * The most common method to use is {@link PuppeteerNode.launch | launch}, which\n * is used to launch and connect to a new browser instance.\n *\n * See {@link Puppeteer | the main Puppeteer class} for methods common to all\n * environments, such as {@link Puppeteer.connect}.\n *\n * @example\n * The following is a typical example of using Puppeteer to drive automation:\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n * Once you have created a `page` you have access to a large API to interact\n * with the page, navigate, or find certain elements in that page.\n * The {@link Page | `page` documentation} lists all the available methods.\n *\n * @public\n */\nexport class PuppeteerNode extends Puppeteer {\n  #_launcher?: ProductLauncher;\n  #lastLaunchedProduct?: Product;\n\n  /**\n   * @internal\n   */\n  defaultBrowserRevision: string;\n\n  /**\n   * @internal\n   */\n  configuration: Configuration = {};\n\n  /**\n   * @internal\n   */\n  constructor(\n    settings: {\n      configuration?: Configuration;\n    } & CommonPuppeteerSettings\n  ) {\n    const {configuration, ...commonSettings} = settings;\n    super(commonSettings);\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    switch (this.configuration.defaultProduct) {\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        break;\n      default:\n        this.configuration.defaultProduct = 'chrome';\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        break;\n    }\n\n    this.connect = this.connect.bind(this);\n    this.launch = this.launch.bind(this);\n    this.executablePath = this.executablePath.bind(this);\n    this.defaultArgs = this.defaultArgs.bind(this);\n    this.trimCache = this.trimCache.bind(this);\n  }\n\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n  override connect(options: ConnectOptions): Promise<Browser> {\n    return super.connect(options);\n  }\n\n  /**\n   * Launches a browser instance with given arguments and options when\n   * specified.\n   *\n   * When using with `puppeteer-core`,\n   * {@link LaunchOptions | options.executablePath} or\n   * {@link LaunchOptions | options.channel} must be provided.\n   *\n   * @example\n   * You can use {@link LaunchOptions | options.ignoreDefaultArgs}\n   * to filter out `--mute-audio` from default arguments:\n   *\n   * ```ts\n   * const browser = await puppeteer.launch({\n   *   ignoreDefaultArgs: ['--mute-audio'],\n   * });\n   * ```\n   *\n   * @remarks\n   * Puppeteer can also be used to control the Chrome browser, but it works best\n   * with the version of Chrome for Testing downloaded by default.\n   * There is no guarantee it will work with any other version. If Google Chrome\n   * (rather than Chrome for Testing) is preferred, a\n   * {@link https://www.google.com/chrome/browser/canary.html | Chrome Canary}\n   * or\n   * {@link https://www.chromium.org/getting-involved/dev-channel | Dev Channel}\n   * build is suggested. See\n   * {@link https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/ | this article}\n   * for a description of the differences between Chromium and Chrome.\n   * {@link https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md | This article}\n   * describes some differences for Linux users. See\n   * {@link https://developer.chrome.com/blog/chrome-for-testing/ | this doc} for the description\n   * of Chrome for Testing.\n   *\n   * @param options - Options to configure launching behavior.\n   */\n  launch(options: PuppeteerLaunchOptions = {}): Promise<Browser> {\n    const {product = this.defaultProduct} = options;\n    this.#lastLaunchedProduct = product;\n    return this.#launcher.launch(options);\n  }\n\n  /**\n   * @internal\n   */\n  get #launcher(): ProductLauncher {\n    if (\n      this.#_launcher &&\n      this.#_launcher.product === this.lastLaunchedProduct\n    ) {\n      return this.#_launcher;\n    }\n    switch (this.lastLaunchedProduct) {\n      case 'chrome':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.chrome;\n        this.#_launcher = new ChromeLauncher(this);\n        break;\n      case 'firefox':\n        this.defaultBrowserRevision = PUPPETEER_REVISIONS.firefox;\n        this.#_launcher = new FirefoxLauncher(this);\n        break;\n      default:\n        throw new Error(`Unknown product: ${this.#lastLaunchedProduct}`);\n    }\n    return this.#_launcher;\n  }\n\n  /**\n   * The default executable path.\n   */\n  executablePath(channel?: ChromeReleaseChannel): string {\n    return this.#launcher.executablePath(channel);\n  }\n\n  /**\n   * @internal\n   */\n  get browserRevision(): string {\n    return (\n      this.#_launcher?.getActualBrowserRevision() ??\n      this.configuration.browserRevision ??\n      this.defaultBrowserRevision!\n    );\n  }\n\n  /**\n   * The default download path for puppeteer. For puppeteer-core, this\n   * code should never be called as it is never defined.\n   *\n   * @internal\n   */\n  get defaultDownloadPath(): string | undefined {\n    return this.configuration.cacheDirectory;\n  }\n\n  /**\n   * The name of the browser that was last launched.\n   */\n  get lastLaunchedProduct(): Product {\n    return this.#lastLaunchedProduct ?? this.defaultProduct;\n  }\n\n  /**\n   * The name of the browser that will be launched by default. For\n   * `puppeteer`, this is influenced by your configuration. Otherwise, it's\n   * `chrome`.\n   */\n  get defaultProduct(): Product {\n    return this.configuration.defaultProduct ?? 'chrome';\n  }\n\n  /**\n   * @deprecated Do not use as this field as it does not take into account\n   * multiple browsers of different types. Use\n   * {@link PuppeteerNode.defaultProduct | defaultProduct} or\n   * {@link PuppeteerNode.lastLaunchedProduct | lastLaunchedProduct}.\n   *\n   * @returns The name of the browser that is under automation.\n   */\n  get product(): string {\n    return this.#launcher.product;\n  }\n\n  /**\n   * @param options - Set of configurable options to set on the browser.\n   *\n   * @returns The default flags that Chromium will be launched with.\n   */\n  defaultArgs(options: BrowserLaunchArgumentOptions = {}): string[] {\n    return this.#launcher.defaultArgs(options);\n  }\n\n  /**\n   * Removes all non-current Firefox and Chrome binaries in the cache directory\n   * identified by the provided Puppeteer configuration. The current browser\n   * version is determined by resolving PUPPETEER_REVISIONS from Puppeteer\n   * unless `configuration.browserRevision` is provided.\n   *\n   * @remarks\n   *\n   * Note that the method does not check if any other Puppeteer versions\n   * installed on the host that use the same cache directory require the\n   * non-current binaries.\n   *\n   * @public\n   */\n  async trimCache(): Promise<void> {\n    const platform = detectBrowserPlatform();\n    if (!platform) {\n      throw new Error('The current platform is not supported.');\n    }\n\n    const cacheDir = this.configuration.cacheDirectory!;\n    const installedBrowsers = await getInstalledBrowsers({\n      cacheDir,\n    });\n\n    const product = this.configuration.defaultProduct!;\n\n    const puppeteerBrowsers: Array<{\n      product: Product;\n      browser: SupportedBrowser;\n      currentBuildId: string;\n    }> = [\n      {\n        product: 'chrome',\n        browser: SupportedBrowser.CHROME,\n        currentBuildId: '',\n      },\n      {\n        product: 'firefox',\n        browser: SupportedBrowser.FIREFOX,\n        currentBuildId: '',\n      },\n    ];\n\n    // Resolve current buildIds.\n    for (const item of puppeteerBrowsers) {\n      item.currentBuildId = await resolveBuildId(\n        item.browser,\n        platform,\n        (product === item.product\n          ? this.configuration.browserRevision\n          : null) || PUPPETEER_REVISIONS[item.product]\n      );\n    }\n\n    const currentBrowserBuilds = new Set(\n      puppeteerBrowsers.map(browser => {\n        return `${browser.browser}_${browser.currentBuildId}`;\n      })\n    );\n\n    const currentBrowsers = new Set(\n      puppeteerBrowsers.map(browser => {\n        return browser.browser;\n      })\n    );\n\n    for (const installedBrowser of installedBrowsers) {\n      // Don't uninstall browsers that are not managed by Puppeteer yet.\n      if (!currentBrowsers.has(installedBrowser.browser)) {\n        continue;\n      }\n      // Keep the browser build used by the current Puppeteer installation.\n      if (\n        currentBrowserBuilds.has(\n          `${installedBrowser.browser}_${installedBrowser.buildId}`\n        )\n      ) {\n        continue;\n      }\n\n      await uninstall({\n        browser: installedBrowser.browser,\n        platform,\n        cacheDir,\n        buildId: installedBrowser.buildId,\n      });\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}