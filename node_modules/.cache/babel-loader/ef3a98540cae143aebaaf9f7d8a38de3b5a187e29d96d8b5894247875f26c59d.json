{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CSS_CACHE = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst sync_fetch_1 = __importDefault(require(\"sync-fetch\"));\nconst createCache = ({\n  limit = 100\n} = {}) => {\n  let cache = {};\n  let keys = [];\n  return {\n    get: key => cache[key],\n    set: (key, value) => {\n      keys.push(key);\n      if (keys.length > limit) {\n        delete cache[keys.shift()];\n      }\n      cache[key] = value;\n    },\n    reset: () => {\n      cache = {};\n      keys = [];\n    },\n    length: () => keys.length\n  };\n};\nexports.CSS_CACHE = createCache({\n  limit: 30\n});\nconst getAbsoluteLocalPath = src => {\n  // if (BROWSER) {\n  //   throw new Error('Cannot check local paths in client-side environment');\n  // }\n  const {\n    protocol,\n    auth,\n    host,\n    port,\n    hostname,\n    path: pathname\n  } = url_1.default.parse(src);\n  const absolutePath = path_1.default.resolve(pathname);\n  if (protocol && protocol !== 'file:' || auth || host || port || hostname) {\n    return undefined;\n  }\n  return absolutePath;\n};\nconst fetchLocalFile = src => {\n  // if (BROWSER) {\n  //   throw new Error('Cannot fetch local file in this environment');\n  // }\n  const absolutePath = getAbsoluteLocalPath(src);\n  if (!absolutePath) {\n    throw new Error(`Cannot fetch non-local path: ${src}`);\n  }\n  return fs_1.default.readFileSync(absolutePath, {\n    encoding: 'utf8',\n    flag: 'r'\n  });\n};\nconst fetchRemoteFile = (uri, options) => {\n  const response = (0, sync_fetch_1.default)(uri, options);\n  return response.text();\n};\nconst resolveImageFromUrl = (src, crossOrigin = 'anonymous') => {\n  return getAbsoluteLocalPath(src) ? fetchLocalFile(src) : fetchRemoteFile(src, {\n    method: 'GET'\n  });\n};\nconst resolveCssFile = (src, crossOrigin = 'anonymous', cache = true) => {\n  let image;\n  if (cache && exports.CSS_CACHE.get(src)) {\n    return exports.CSS_CACHE.get(src);\n  } else {\n    image = resolveImageFromUrl(src, crossOrigin);\n  }\n  if (!image) {\n    throw new Error('Cannot resolve image');\n  }\n  if (cache) {\n    exports.CSS_CACHE.set(src, image);\n  }\n  return image;\n};\nexports.default = resolveCssFile;","map":{"version":3,"names":["fs_1","__importDefault","require","url_1","path_1","sync_fetch_1","createCache","limit","cache","keys","get","key","set","value","push","length","shift","reset","exports","CSS_CACHE","getAbsoluteLocalPath","src","protocol","auth","host","port","hostname","path","pathname","default","parse","absolutePath","resolve","undefined","fetchLocalFile","Error","readFileSync","encoding","flag","fetchRemoteFile","uri","options","response","text","resolveImageFromUrl","crossOrigin","method","resolveCssFile","image"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/react-pdf-html/src/resolveCssFile.ts"],"sourcesContent":["import fs from 'fs';\nimport url from 'url';\nimport path from 'path';\nimport fetch from 'sync-fetch';\n\nconst createCache = ({ limit = 100 } = {}) => {\n  let cache: Record<string, any> = {};\n  let keys: string[] = [];\n\n  return {\n    get: (key: string) => cache[key],\n    set: (key: string, value: any) => {\n      keys.push(key);\n      if (keys.length > limit) {\n        delete cache[keys.shift() as string];\n      }\n      cache[key] = value;\n    },\n    reset: () => {\n      cache = {};\n      keys = [];\n    },\n    length: () => keys.length,\n  };\n};\n\nexport const CSS_CACHE = createCache({ limit: 30 });\n\nconst getAbsoluteLocalPath = (src: string) => {\n  // if (BROWSER) {\n  //   throw new Error('Cannot check local paths in client-side environment');\n  // }\n\n  const {\n    protocol,\n    auth,\n    host,\n    port,\n    hostname,\n    path: pathname,\n  } = url.parse(src);\n  const absolutePath = path.resolve(pathname as string);\n  if ((protocol && protocol !== 'file:') || auth || host || port || hostname) {\n    return undefined;\n  }\n  return absolutePath;\n};\n\nconst fetchLocalFile = (src: string): string => {\n  // if (BROWSER) {\n  //   throw new Error('Cannot fetch local file in this environment');\n  // }\n\n  const absolutePath = getAbsoluteLocalPath(src);\n  if (!absolutePath) {\n    throw new Error(`Cannot fetch non-local path: ${src}`);\n  }\n  return fs.readFileSync(absolutePath, { encoding: 'utf8', flag: 'r' });\n};\n\nconst fetchRemoteFile = (\n  uri: string,\n  options: Parameters<typeof fetch>['1']\n): string => {\n  const response = fetch(uri, options);\n\n  return response.text();\n};\n\nconst resolveImageFromUrl = (\n  src: string,\n  crossOrigin: 'anonymous' | 'use-credentials' = 'anonymous'\n) => {\n  return getAbsoluteLocalPath(src)\n    ? fetchLocalFile(src)\n    : fetchRemoteFile(src, {\n        method: 'GET',\n      });\n};\n\nconst resolveCssFile = (\n  src: string,\n  crossOrigin: 'anonymous' | 'use-credentials' = 'anonymous',\n  cache = true\n) => {\n  let image;\n\n  if (cache && CSS_CACHE.get(src)) {\n    return CSS_CACHE.get(src);\n  } else {\n    image = resolveImageFromUrl(src, crossOrigin);\n  }\n\n  if (!image) {\n    throw new Error('Cannot resolve image');\n  }\n\n  if (cache) {\n    CSS_CACHE.set(src, image);\n  }\n\n  return image;\n};\n\nexport default resolveCssFile;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}