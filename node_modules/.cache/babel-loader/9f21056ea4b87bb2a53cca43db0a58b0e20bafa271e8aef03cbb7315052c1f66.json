{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CDPSessionEvent } from '../api/CDPSession.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { assert } from '../util/assert.js';\nimport { Deferred } from '../util/Deferred.js';\n/**\n * FirefoxTargetManager implements target management using\n * `Target.setDiscoverTargets` without using auto-attach. It, therefore, creates\n * targets that lazily establish their CDP sessions.\n *\n * Although the approach is potentially flaky, there is no other way for Firefox\n * because Firefox's CDP implementation does not support auto-attach.\n *\n * Firefox does not support targetInfoChanged and detachedFromTarget events:\n *\n * - https://bugzilla.mozilla.org/show_bug.cgi?id=1610855\n * - https://bugzilla.mozilla.org/show_bug.cgi?id=1636979\n *   @internal\n */\nexport class FirefoxTargetManager extends EventEmitter {\n  #connection;\n  /**\n   * Keeps track of the following events: 'Target.targetCreated',\n   * 'Target.targetDestroyed'.\n   *\n   * A target becomes discovered when 'Target.targetCreated' is received.\n   * A target is removed from this map once 'Target.targetDestroyed' is\n   * received.\n   *\n   * `targetFilterCallback` has no effect on this map.\n   */\n  #discoveredTargetsByTargetId = new Map();\n  /**\n   * Keeps track of targets that were created via 'Target.targetCreated'\n   * and which one are not filtered out by `targetFilterCallback`.\n   *\n   * The target is removed from here once it's been destroyed.\n   */\n  #availableTargetsByTargetId = new Map();\n  /**\n   * Tracks which sessions attach to which target.\n   */\n  #availableTargetsBySessionId = new Map();\n  #targetFilterCallback;\n  #targetFactory;\n  #attachedToTargetListenersBySession = new WeakMap();\n  #initializeDeferred = Deferred.create();\n  #targetsIdsForInit = new Set();\n  constructor(connection, targetFactory, targetFilterCallback) {\n    super();\n    this.#connection = connection;\n    this.#targetFilterCallback = targetFilterCallback;\n    this.#targetFactory = targetFactory;\n    this.#connection.on('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.on('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.on(CDPSessionEvent.SessionDetached, this.#onSessionDetached);\n    this.setupAttachmentListeners(this.#connection);\n  }\n  setupAttachmentListeners(session) {\n    const listener = event => {\n      return this.#onAttachedToTarget(session, event);\n    };\n    assert(!this.#attachedToTargetListenersBySession.has(session));\n    this.#attachedToTargetListenersBySession.set(session, listener);\n    session.on('Target.attachedToTarget', listener);\n  }\n  #onSessionDetached = session => {\n    this.removeSessionListeners(session);\n    this.#availableTargetsBySessionId.delete(session.id());\n  };\n  removeSessionListeners(session) {\n    if (this.#attachedToTargetListenersBySession.has(session)) {\n      session.off('Target.attachedToTarget', this.#attachedToTargetListenersBySession.get(session));\n      this.#attachedToTargetListenersBySession.delete(session);\n    }\n  }\n  getAvailableTargets() {\n    return this.#availableTargetsByTargetId;\n  }\n  dispose() {\n    this.#connection.off('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.off('Target.targetDestroyed', this.#onTargetDestroyed);\n  }\n  async initialize() {\n    await this.#connection.send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: [{}]\n    });\n    this.#targetsIdsForInit = new Set(this.#discoveredTargetsByTargetId.keys());\n    await this.#initializeDeferred.valueOrThrow();\n  }\n  #onTargetCreated = async event => {\n    if (this.#discoveredTargetsByTargetId.has(event.targetInfo.targetId)) {\n      return;\n    }\n    this.#discoveredTargetsByTargetId.set(event.targetInfo.targetId, event.targetInfo);\n    if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n      const target = this.#targetFactory(event.targetInfo, undefined);\n      target._initialize();\n      this.#availableTargetsByTargetId.set(event.targetInfo.targetId, target);\n      this.#finishInitializationIfReady(target._targetId);\n      return;\n    }\n    const target = this.#targetFactory(event.targetInfo, undefined);\n    if (this.#targetFilterCallback && !this.#targetFilterCallback(target)) {\n      this.#finishInitializationIfReady(event.targetInfo.targetId);\n      return;\n    }\n    target._initialize();\n    this.#availableTargetsByTargetId.set(event.targetInfo.targetId, target);\n    this.emit(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, target);\n    this.#finishInitializationIfReady(target._targetId);\n  };\n  #onTargetDestroyed = event => {\n    this.#discoveredTargetsByTargetId.delete(event.targetId);\n    this.#finishInitializationIfReady(event.targetId);\n    const target = this.#availableTargetsByTargetId.get(event.targetId);\n    if (target) {\n      this.emit(\"targetGone\" /* TargetManagerEvent.TargetGone */, target);\n      this.#availableTargetsByTargetId.delete(event.targetId);\n    }\n  };\n  #onAttachedToTarget = async (parentSession, event) => {\n    const targetInfo = event.targetInfo;\n    const session = this.#connection.session(event.sessionId);\n    if (!session) {\n      throw new Error(`Session ${event.sessionId} was not created.`);\n    }\n    const target = this.#availableTargetsByTargetId.get(targetInfo.targetId);\n    assert(target, `Target ${targetInfo.targetId} is missing`);\n    session._setTarget(target);\n    this.setupAttachmentListeners(session);\n    this.#availableTargetsBySessionId.set(session.id(), this.#availableTargetsByTargetId.get(targetInfo.targetId));\n    parentSession.emit(CDPSessionEvent.Ready, session);\n  };\n  #finishInitializationIfReady(targetId) {\n    this.#targetsIdsForInit.delete(targetId);\n    if (this.#targetsIdsForInit.size === 0) {\n      this.#initializeDeferred.resolve();\n    }\n  }\n}","map":{"version":3,"names":["CDPSessionEvent","EventEmitter","assert","Deferred","FirefoxTargetManager","connection","discoveredTargetsByTargetId","Map","availableTargetsByTargetId","availableTargetsBySessionId","targetFilterCallback","targetFactory","attachedToTargetListenersBySession","WeakMap","initializeDeferred","create","targetsIdsForInit","Set","constructor","on","onTargetCreated","onTargetDestroyed","SessionDetached","onSessionDetached","setupAttachmentListeners","session","listener","event","onAttachedToTarget","has","set","removeSessionListeners","delete","id","off","get","getAvailableTargets","dispose","initialize","send","discover","filter","keys","valueOrThrow","targetInfo","targetId","type","attached","target","undefined","_initialize","finishInitializationIfReady","_targetId","emit","#onAttachedToTarget","parentSession","sessionId","Error","_setTarget","Ready","#finishInitializationIfReady","size","resolve"],"sources":["/Users/jeffreyvanoosterwijk/Desktop/repos/resume-generator/node_modules/puppeteer-core/src/cdp/FirefoxTargetManager.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type {Protocol} from 'devtools-protocol';\n\nimport type {TargetFilterCallback} from '../api/Browser.js';\nimport {type CDPSession, CDPSessionEvent} from '../api/CDPSession.js';\nimport {EventEmitter} from '../common/EventEmitter.js';\nimport {assert} from '../util/assert.js';\nimport {Deferred} from '../util/Deferred.js';\n\nimport type {CdpCDPSession} from './CDPSession.js';\nimport type {Connection} from './Connection.js';\nimport type {CdpTarget} from './Target.js';\nimport {\n  type TargetFactory,\n  TargetManagerEvent,\n  type TargetManager,\n  type TargetManagerEvents,\n} from './TargetManager.js';\n\n/**\n * FirefoxTargetManager implements target management using\n * `Target.setDiscoverTargets` without using auto-attach. It, therefore, creates\n * targets that lazily establish their CDP sessions.\n *\n * Although the approach is potentially flaky, there is no other way for Firefox\n * because Firefox's CDP implementation does not support auto-attach.\n *\n * Firefox does not support targetInfoChanged and detachedFromTarget events:\n *\n * - https://bugzilla.mozilla.org/show_bug.cgi?id=1610855\n * - https://bugzilla.mozilla.org/show_bug.cgi?id=1636979\n *   @internal\n */\nexport class FirefoxTargetManager\n  extends EventEmitter<TargetManagerEvents>\n  implements TargetManager\n{\n  #connection: Connection;\n  /**\n   * Keeps track of the following events: 'Target.targetCreated',\n   * 'Target.targetDestroyed'.\n   *\n   * A target becomes discovered when 'Target.targetCreated' is received.\n   * A target is removed from this map once 'Target.targetDestroyed' is\n   * received.\n   *\n   * `targetFilterCallback` has no effect on this map.\n   */\n  #discoveredTargetsByTargetId = new Map<string, Protocol.Target.TargetInfo>();\n  /**\n   * Keeps track of targets that were created via 'Target.targetCreated'\n   * and which one are not filtered out by `targetFilterCallback`.\n   *\n   * The target is removed from here once it's been destroyed.\n   */\n  #availableTargetsByTargetId = new Map<string, CdpTarget>();\n  /**\n   * Tracks which sessions attach to which target.\n   */\n  #availableTargetsBySessionId = new Map<string, CdpTarget>();\n  #targetFilterCallback: TargetFilterCallback | undefined;\n  #targetFactory: TargetFactory;\n\n  #attachedToTargetListenersBySession = new WeakMap<\n    CDPSession | Connection,\n    (event: Protocol.Target.AttachedToTargetEvent) => Promise<void>\n  >();\n\n  #initializeDeferred = Deferred.create<void>();\n  #targetsIdsForInit = new Set<string>();\n\n  constructor(\n    connection: Connection,\n    targetFactory: TargetFactory,\n    targetFilterCallback?: TargetFilterCallback\n  ) {\n    super();\n    this.#connection = connection;\n    this.#targetFilterCallback = targetFilterCallback;\n    this.#targetFactory = targetFactory;\n\n    this.#connection.on('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.on('Target.targetDestroyed', this.#onTargetDestroyed);\n    this.#connection.on(\n      CDPSessionEvent.SessionDetached,\n      this.#onSessionDetached\n    );\n    this.setupAttachmentListeners(this.#connection);\n  }\n\n  setupAttachmentListeners(session: CDPSession | Connection): void {\n    const listener = (event: Protocol.Target.AttachedToTargetEvent) => {\n      return this.#onAttachedToTarget(session, event);\n    };\n    assert(!this.#attachedToTargetListenersBySession.has(session));\n    this.#attachedToTargetListenersBySession.set(session, listener);\n    session.on('Target.attachedToTarget', listener);\n  }\n\n  #onSessionDetached = (session: CDPSession) => {\n    this.removeSessionListeners(session);\n    this.#availableTargetsBySessionId.delete(session.id());\n  };\n\n  removeSessionListeners(session: CDPSession): void {\n    if (this.#attachedToTargetListenersBySession.has(session)) {\n      session.off(\n        'Target.attachedToTarget',\n        this.#attachedToTargetListenersBySession.get(session)!\n      );\n      this.#attachedToTargetListenersBySession.delete(session);\n    }\n  }\n\n  getAvailableTargets(): ReadonlyMap<string, CdpTarget> {\n    return this.#availableTargetsByTargetId;\n  }\n\n  dispose(): void {\n    this.#connection.off('Target.targetCreated', this.#onTargetCreated);\n    this.#connection.off('Target.targetDestroyed', this.#onTargetDestroyed);\n  }\n\n  async initialize(): Promise<void> {\n    await this.#connection.send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: [{}],\n    });\n    this.#targetsIdsForInit = new Set(this.#discoveredTargetsByTargetId.keys());\n    await this.#initializeDeferred.valueOrThrow();\n  }\n\n  #onTargetCreated = async (\n    event: Protocol.Target.TargetCreatedEvent\n  ): Promise<void> => {\n    if (this.#discoveredTargetsByTargetId.has(event.targetInfo.targetId)) {\n      return;\n    }\n\n    this.#discoveredTargetsByTargetId.set(\n      event.targetInfo.targetId,\n      event.targetInfo\n    );\n\n    if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n      const target = this.#targetFactory(event.targetInfo, undefined);\n      target._initialize();\n      this.#availableTargetsByTargetId.set(event.targetInfo.targetId, target);\n      this.#finishInitializationIfReady(target._targetId);\n      return;\n    }\n\n    const target = this.#targetFactory(event.targetInfo, undefined);\n    if (this.#targetFilterCallback && !this.#targetFilterCallback(target)) {\n      this.#finishInitializationIfReady(event.targetInfo.targetId);\n      return;\n    }\n    target._initialize();\n    this.#availableTargetsByTargetId.set(event.targetInfo.targetId, target);\n    this.emit(TargetManagerEvent.TargetAvailable, target);\n    this.#finishInitializationIfReady(target._targetId);\n  };\n\n  #onTargetDestroyed = (event: Protocol.Target.TargetDestroyedEvent): void => {\n    this.#discoveredTargetsByTargetId.delete(event.targetId);\n    this.#finishInitializationIfReady(event.targetId);\n    const target = this.#availableTargetsByTargetId.get(event.targetId);\n    if (target) {\n      this.emit(TargetManagerEvent.TargetGone, target);\n      this.#availableTargetsByTargetId.delete(event.targetId);\n    }\n  };\n\n  #onAttachedToTarget = async (\n    parentSession: Connection | CDPSession,\n    event: Protocol.Target.AttachedToTargetEvent\n  ) => {\n    const targetInfo = event.targetInfo;\n    const session = this.#connection.session(event.sessionId);\n    if (!session) {\n      throw new Error(`Session ${event.sessionId} was not created.`);\n    }\n\n    const target = this.#availableTargetsByTargetId.get(targetInfo.targetId);\n\n    assert(target, `Target ${targetInfo.targetId} is missing`);\n\n    (session as CdpCDPSession)._setTarget(target);\n    this.setupAttachmentListeners(session);\n\n    this.#availableTargetsBySessionId.set(\n      session.id(),\n      this.#availableTargetsByTargetId.get(targetInfo.targetId)!\n    );\n\n    parentSession.emit(CDPSessionEvent.Ready, session);\n  };\n\n  #finishInitializationIfReady(targetId: string): void {\n    this.#targetsIdsForInit.delete(targetId);\n    if (this.#targetsIdsForInit.size === 0) {\n      this.#initializeDeferred.resolve();\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;AASA,SAAyBA,eAAe,QAAO,sBAAsB;AACrE,SAAQC,YAAY,QAAO,2BAA2B;AACtD,SAAQC,MAAM,QAAO,mBAAmB;AACxC,SAAQC,QAAQ,QAAO,qBAAqB;AAY5C;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,oBACX,SAAQH,YAAiC;EAGzC,CAAAI,UAAW;EACX;;;;;;;;;;EAUA,CAAAC,2BAA4B,GAAG,IAAIC,GAAG,EAAsC;EAC5E;;;;;;EAMA,CAAAC,0BAA2B,GAAG,IAAID,GAAG,EAAqB;EAC1D;;;EAGA,CAAAE,2BAA4B,GAAG,IAAIF,GAAG,EAAqB;EAC3D,CAAAG,oBAAqB;EACrB,CAAAC,aAAc;EAEd,CAAAC,kCAAmC,GAAG,IAAIC,OAAO,EAG9C;EAEH,CAAAC,kBAAmB,GAAGX,QAAQ,CAACY,MAAM,EAAQ;EAC7C,CAAAC,iBAAkB,GAAG,IAAIC,GAAG,EAAU;EAEtCC,YACEb,UAAsB,EACtBM,aAA4B,EAC5BD,oBAA2C;IAE3C,KAAK,EAAE;IACP,IAAI,CAAC,CAAAL,UAAW,GAAGA,UAAU;IAC7B,IAAI,CAAC,CAAAK,oBAAqB,GAAGA,oBAAoB;IACjD,IAAI,CAAC,CAAAC,aAAc,GAAGA,aAAa;IAEnC,IAAI,CAAC,CAAAN,UAAW,CAACc,EAAE,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAAC,eAAgB,CAAC;IAClE,IAAI,CAAC,CAAAf,UAAW,CAACc,EAAE,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAAE,iBAAkB,CAAC;IACtE,IAAI,CAAC,CAAAhB,UAAW,CAACc,EAAE,CACjBnB,eAAe,CAACsB,eAAe,EAC/B,IAAI,CAAC,CAAAC,iBAAkB,CACxB;IACD,IAAI,CAACC,wBAAwB,CAAC,IAAI,CAAC,CAAAnB,UAAW,CAAC;EACjD;EAEAmB,wBAAwBA,CAACC,OAAgC;IACvD,MAAMC,QAAQ,GAAIC,KAA4C,IAAI;MAChE,OAAO,IAAI,CAAC,CAAAC,kBAAmB,CAACH,OAAO,EAAEE,KAAK,CAAC;IACjD,CAAC;IACDzB,MAAM,CAAC,CAAC,IAAI,CAAC,CAAAU,kCAAmC,CAACiB,GAAG,CAACJ,OAAO,CAAC,CAAC;IAC9D,IAAI,CAAC,CAAAb,kCAAmC,CAACkB,GAAG,CAACL,OAAO,EAAEC,QAAQ,CAAC;IAC/DD,OAAO,CAACN,EAAE,CAAC,yBAAyB,EAAEO,QAAQ,CAAC;EACjD;EAEA,CAAAH,iBAAkB,GAAIE,OAAmB,IAAI;IAC3C,IAAI,CAACM,sBAAsB,CAACN,OAAO,CAAC;IACpC,IAAI,CAAC,CAAAhB,2BAA4B,CAACuB,MAAM,CAACP,OAAO,CAACQ,EAAE,EAAE,CAAC;EACxD,CAAC;EAEDF,sBAAsBA,CAACN,OAAmB;IACxC,IAAI,IAAI,CAAC,CAAAb,kCAAmC,CAACiB,GAAG,CAACJ,OAAO,CAAC,EAAE;MACzDA,OAAO,CAACS,GAAG,CACT,yBAAyB,EACzB,IAAI,CAAC,CAAAtB,kCAAmC,CAACuB,GAAG,CAACV,OAAO,CAAE,CACvD;MACD,IAAI,CAAC,CAAAb,kCAAmC,CAACoB,MAAM,CAACP,OAAO,CAAC;IAC1D;EACF;EAEAW,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAAC,CAAA5B,0BAA2B;EACzC;EAEA6B,OAAOA,CAAA;IACL,IAAI,CAAC,CAAAhC,UAAW,CAAC6B,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAAd,eAAgB,CAAC;IACnE,IAAI,CAAC,CAAAf,UAAW,CAAC6B,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAAb,iBAAkB,CAAC;EACzE;EAEA,MAAMiB,UAAUA,CAAA;IACd,MAAM,IAAI,CAAC,CAAAjC,UAAW,CAACkC,IAAI,CAAC,2BAA2B,EAAE;MACvDC,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE,CAAC,EAAE;KACZ,CAAC;IACF,IAAI,CAAC,CAAAzB,iBAAkB,GAAG,IAAIC,GAAG,CAAC,IAAI,CAAC,CAAAX,2BAA4B,CAACoC,IAAI,EAAE,CAAC;IAC3E,MAAM,IAAI,CAAC,CAAA5B,kBAAmB,CAAC6B,YAAY,EAAE;EAC/C;EAEA,CAAAvB,eAAgB,GAAG,MACjBO,KAAyC,IACxB;IACjB,IAAI,IAAI,CAAC,CAAArB,2BAA4B,CAACuB,GAAG,CAACF,KAAK,CAACiB,UAAU,CAACC,QAAQ,CAAC,EAAE;MACpE;IACF;IAEA,IAAI,CAAC,CAAAvC,2BAA4B,CAACwB,GAAG,CACnCH,KAAK,CAACiB,UAAU,CAACC,QAAQ,EACzBlB,KAAK,CAACiB,UAAU,CACjB;IAED,IAAIjB,KAAK,CAACiB,UAAU,CAACE,IAAI,KAAK,SAAS,IAAInB,KAAK,CAACiB,UAAU,CAACG,QAAQ,EAAE;MACpE,MAAMC,MAAM,GAAG,IAAI,CAAC,CAAArC,aAAc,CAACgB,KAAK,CAACiB,UAAU,EAAEK,SAAS,CAAC;MAC/DD,MAAM,CAACE,WAAW,EAAE;MACpB,IAAI,CAAC,CAAA1C,0BAA2B,CAACsB,GAAG,CAACH,KAAK,CAACiB,UAAU,CAACC,QAAQ,EAAEG,MAAM,CAAC;MACvE,IAAI,CAAC,CAAAG,2BAA4B,CAACH,MAAM,CAACI,SAAS,CAAC;MACnD;IACF;IAEA,MAAMJ,MAAM,GAAG,IAAI,CAAC,CAAArC,aAAc,CAACgB,KAAK,CAACiB,UAAU,EAAEK,SAAS,CAAC;IAC/D,IAAI,IAAI,CAAC,CAAAvC,oBAAqB,IAAI,CAAC,IAAI,CAAC,CAAAA,oBAAqB,CAACsC,MAAM,CAAC,EAAE;MACrE,IAAI,CAAC,CAAAG,2BAA4B,CAACxB,KAAK,CAACiB,UAAU,CAACC,QAAQ,CAAC;MAC5D;IACF;IACAG,MAAM,CAACE,WAAW,EAAE;IACpB,IAAI,CAAC,CAAA1C,0BAA2B,CAACsB,GAAG,CAACH,KAAK,CAACiB,UAAU,CAACC,QAAQ,EAAEG,MAAM,CAAC;IACvE,IAAI,CAACK,IAAI,6DAAqCL,MAAM,CAAC;IACrD,IAAI,CAAC,CAAAG,2BAA4B,CAACH,MAAM,CAACI,SAAS,CAAC;EACrD,CAAC;EAED,CAAA/B,iBAAkB,GAAIM,KAA2C,IAAU;IACzE,IAAI,CAAC,CAAArB,2BAA4B,CAAC0B,MAAM,CAACL,KAAK,CAACkB,QAAQ,CAAC;IACxD,IAAI,CAAC,CAAAM,2BAA4B,CAACxB,KAAK,CAACkB,QAAQ,CAAC;IACjD,MAAMG,MAAM,GAAG,IAAI,CAAC,CAAAxC,0BAA2B,CAAC2B,GAAG,CAACR,KAAK,CAACkB,QAAQ,CAAC;IACnE,IAAIG,MAAM,EAAE;MACV,IAAI,CAACK,IAAI,mDAAgCL,MAAM,CAAC;MAChD,IAAI,CAAC,CAAAxC,0BAA2B,CAACwB,MAAM,CAACL,KAAK,CAACkB,QAAQ,CAAC;IACzD;EACF,CAAC;EAED,CAAAjB,kBAAmB,GAAG,MAAA0B,CACpBC,aAAsC,EACtC5B,KAA4C,KAC1C;IACF,MAAMiB,UAAU,GAAGjB,KAAK,CAACiB,UAAU;IACnC,MAAMnB,OAAO,GAAG,IAAI,CAAC,CAAApB,UAAW,CAACoB,OAAO,CAACE,KAAK,CAAC6B,SAAS,CAAC;IACzD,IAAI,CAAC/B,OAAO,EAAE;MACZ,MAAM,IAAIgC,KAAK,CAAC,WAAW9B,KAAK,CAAC6B,SAAS,mBAAmB,CAAC;IAChE;IAEA,MAAMR,MAAM,GAAG,IAAI,CAAC,CAAAxC,0BAA2B,CAAC2B,GAAG,CAACS,UAAU,CAACC,QAAQ,CAAC;IAExE3C,MAAM,CAAC8C,MAAM,EAAE,UAAUJ,UAAU,CAACC,QAAQ,aAAa,CAAC;IAEzDpB,OAAyB,CAACiC,UAAU,CAACV,MAAM,CAAC;IAC7C,IAAI,CAACxB,wBAAwB,CAACC,OAAO,CAAC;IAEtC,IAAI,CAAC,CAAAhB,2BAA4B,CAACqB,GAAG,CACnCL,OAAO,CAACQ,EAAE,EAAE,EACZ,IAAI,CAAC,CAAAzB,0BAA2B,CAAC2B,GAAG,CAACS,UAAU,CAACC,QAAQ,CAAE,CAC3D;IAEDU,aAAa,CAACF,IAAI,CAACrD,eAAe,CAAC2D,KAAK,EAAElC,OAAO,CAAC;EACpD,CAAC;EAED,CAAA0B,2BAA4BS,CAACf,QAAgB;IAC3C,IAAI,CAAC,CAAA7B,iBAAkB,CAACgB,MAAM,CAACa,QAAQ,CAAC;IACxC,IAAI,IAAI,CAAC,CAAA7B,iBAAkB,CAAC6C,IAAI,KAAK,CAAC,EAAE;MACtC,IAAI,CAAC,CAAA/C,kBAAmB,CAACgD,OAAO,EAAE;IACpC;EACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}